
weatherballoon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800a0c8  0800a0c8  0001a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a188  0800a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a190  0800a190  0001a190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800a198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800a1ac  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800a20c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050e8  240000d4  0800a26c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240051bc  0800a26c  000251bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029a13  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004860  00000000  00000000  00049b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ee8  00000000  00000000  0004e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001814  00000000  00000000  000502a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000571d  00000000  00000000  00051ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002566f  00000000  00000000  000571d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00178fce  00000000  00000000  0007c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000085dc  00000000  00000000  001f5810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001fddec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a0b0 	.word	0x0800a0b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800a0b0 	.word	0x0800a0b0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cutBalloon>:
/* USER CODE BEGIN 0 */




void cutBalloon(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	//set to pin to high HAL FUNCTION WITH PIN
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2120      	movs	r1, #32
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <cutBalloon+0x14>)
 80005e6:	f001 fe9d 	bl	8002324 <HAL_GPIO_WritePin>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	58020400 	.word	0x58020400

080005f4 <lowPowerMode>:

void lowPowerMode(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	int time10Min = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
    //stopTransmitter();
	//log data()
    while(1){
    	if(HAL_GetTick() - time10Min >= 600000){
 80005fe:	f000 ff8d 	bl	800151c <HAL_GetTick>
 8000602:	4602      	mov	r2, r0
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <lowPowerMode+0x24>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d9f7      	bls.n	80005fe <lowPowerMode+0xa>
    		time10Min = HAL_GetTick();
 800060e:	f000 ff85 	bl	800151c <HAL_GetTick>
 8000612:	4603      	mov	r3, r0
 8000614:	607b      	str	r3, [r7, #4]
    	if(HAL_GetTick() - time10Min >= 600000){
 8000616:	e7f2      	b.n	80005fe <lowPowerMode+0xa>
 8000618:	000927bf 	.word	0x000927bf

0800061c <checkBattery>:

    	}
    }
}

void checkBattery(){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	float batteryVoltage = 0;
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	607b      	str	r3, [r7, #4]

		if (batteryVoltage <= powMin){
 8000628:	edd7 7a01 	vldr	s15, [r7, #4]
 800062c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000638:	d900      	bls.n	800063c <checkBattery+0x20>
			lowPowerMode();
		}
}
 800063a:	e001      	b.n	8000640 <checkBattery+0x24>
			lowPowerMode();
 800063c:	f7ff ffda 	bl	80005f4 <lowPowerMode>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <checkAltitude>:



int checkAltitude(float altitude){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (altitude < prevAltitude){
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <checkAltitude+0x50>)
 8000654:	edd3 7a00 	vldr	s15, [r3]
 8000658:	ed97 7a01 	vldr	s14, [r7, #4]
 800065c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	d504      	bpl.n	8000670 <checkAltitude+0x28>
		descendFlag+= 1;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <checkAltitude+0x54>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a0b      	ldr	r2, [pc, #44]	; (800069c <checkAltitude+0x54>)
 800066e:	6013      	str	r3, [r2, #0]
	}
    if (altitude >= maxAltitude){
 8000670:	edd7 7a01 	vldr	s15, [r7, #4]
 8000674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067c:	db01      	blt.n	8000682 <checkAltitude+0x3a>
        return 1;
 800067e:	2301      	movs	r3, #1
 8000680:	e003      	b.n	800068a <checkAltitude+0x42>
    }
    prevAltitude = altitude;
 8000682:	4a05      	ldr	r2, [pc, #20]	; (8000698 <checkAltitude+0x50>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6013      	str	r3, [r2, #0]
    return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	240000f4 	.word	0x240000f4
 800069c:	240000f0 	.word	0x240000f0

080006a0 <checkLocation>:


void checkLocation(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
    // getLongitude(), getLatitude(), getAltitude(), and locationDisplay() are placeholders
   // int longitude = function.longitude();
   // int latitude = function.latitude();
   // int altitude = function.altitude();

    float longitude = 0;
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
    float latitude = 0;
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
    float altitude = 0;
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]


    if (longitude < maxLongitude && longitude > minLongitude){
 80006b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80006bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c4:	d51e      	bpl.n	8000704 <checkLocation+0x64>
 80006c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80006ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d2:	dd17      	ble.n	8000704 <checkLocation+0x64>
        if(latitude < maxLatitude && latitude > minLatitude){
 80006d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80006d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	d510      	bpl.n	8000704 <checkLocation+0x64>
 80006e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ee:	dd09      	ble.n	8000704 <checkLocation+0x64>
            if(checkAltitude(altitude) == 1){
 80006f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80006f4:	f7ff ffa8 	bl	8000648 <checkAltitude>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d105      	bne.n	800070a <checkLocation+0x6a>
                cutBalloon();
 80006fe:	f7ff ff6d 	bl	80005dc <cutBalloon>
            }
            return;
 8000702:	e002      	b.n	800070a <checkLocation+0x6a>
        }
    }

    cutBalloon();
 8000704:	f7ff ff6a 	bl	80005dc <cutBalloon>
 8000708:	e000      	b.n	800070c <checkLocation+0x6c>
            return;
 800070a:	bf00      	nop
}
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 feb0 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f83c 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 f9d6 	bl	8000ad0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000724:	f000 f8b8 	bl	8000898 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000728:	f000 f954 	bl	80009d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800072c:	f000 f99e 	bl	8000a6c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000730:	f000 f8fe 	bl	8000930 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000734:	f006 fe32 	bl	800739c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of batteryTimer */
  batteryTimerHandle = osTimerNew(BatteryCallback, osTimerPeriodic, NULL, &batteryTimer_attributes);
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <main+0x60>)
 800073a:	2200      	movs	r2, #0
 800073c:	2101      	movs	r1, #1
 800073e:	480e      	ldr	r0, [pc, #56]	; (8000778 <main+0x64>)
 8000740:	f006 ff1e 	bl	8007580 <osTimerNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <main+0x68>)
 8000748:	6013      	str	r3, [r2, #0]

  /* creation of descensionTimer */
  descensionTimerHandle = osTimerNew(DescensionCallback, osTimerPeriodic, NULL, &descensionTimer_attributes);
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <main+0x6c>)
 800074c:	2200      	movs	r2, #0
 800074e:	2101      	movs	r1, #1
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <main+0x70>)
 8000752:	f006 ff15 	bl	8007580 <osTimerNew>
 8000756:	4603      	mov	r3, r0
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <main+0x74>)
 800075a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PollingLoop */
  PollingLoopHandle = osThreadNew(StartPollingLoop, NULL, &PollingLoop_attributes);
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <main+0x78>)
 800075e:	2100      	movs	r1, #0
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <main+0x7c>)
 8000762:	f006 fe65 	bl	8007430 <osThreadNew>
 8000766:	4603      	mov	r3, r0
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <main+0x80>)
 800076a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800076c:	f006 fe3a 	bl	80073e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x5c>
 8000772:	bf00      	nop
 8000774:	0800a130 	.word	0x0800a130
 8000778:	08000ce9 	.word	0x08000ce9
 800077c:	2400080c 	.word	0x2400080c
 8000780:	0800a140 	.word	0x0800a140
 8000784:	08000cfd 	.word	0x08000cfd
 8000788:	24000810 	.word	0x24000810
 800078c:	0800a10c 	.word	0x0800a10c
 8000790:	08000c89 	.word	0x08000c89
 8000794:	24000808 	.word	0x24000808

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09c      	sub	sp, #112	; 0x70
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	224c      	movs	r2, #76	; 0x4c
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 fc48 	bl	800a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2220      	movs	r2, #32
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f009 fc42 	bl	800a03c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f001 ff15 	bl	80025e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b33      	ldr	r3, [pc, #204]	; (8000890 <SystemClock_Config+0xf8>)
 80007c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c6:	4a32      	ldr	r2, [pc, #200]	; (8000890 <SystemClock_Config+0xf8>)
 80007c8:	f023 0301 	bic.w	r3, r3, #1
 80007cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <SystemClock_Config+0xf8>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <SystemClock_Config+0xfc>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e0:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <SystemClock_Config+0xfc>)
 80007e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <SystemClock_Config+0xfc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f4:	bf00      	nop
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <SystemClock_Config+0xfc>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000802:	d1f8      	bne.n	80007f6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000804:	2303      	movs	r3, #3
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800080e:	2301      	movs	r3, #1
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	2302      	movs	r3, #2
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000822:	2318      	movs	r3, #24
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800082a:	2304      	movs	r3, #4
 800082c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000832:	230c      	movs	r3, #12
 8000834:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	4618      	mov	r0, r3
 8000844:	f001 ff1a 	bl	800267c <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800084e:	f000 fa71 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	233f      	movs	r3, #63	; 0x3f
 8000854:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f002 fb5a 	bl	8002f30 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000882:	f000 fa57 	bl	8000d34 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3770      	adds	r7, #112	; 0x70
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	58000400 	.word	0x58000400
 8000894:	58024800 	.word	0x58024800

08000898 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_ETH_Init+0x80>)
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <MX_ETH_Init+0x84>)
 80008a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_ETH_Init+0x88>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_ETH_Init+0x88>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_ETH_Init+0x88>)
 80008b0:	22e1      	movs	r2, #225	; 0xe1
 80008b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_ETH_Init+0x88>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_ETH_Init+0x88>)
 80008bc:	2200      	movs	r2, #0
 80008be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_ETH_Init+0x88>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_ETH_Init+0x80>)
 80008c8:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_ETH_Init+0x88>)
 80008ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_ETH_Init+0x80>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_ETH_Init+0x80>)
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_ETH_Init+0x8c>)
 80008d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_ETH_Init+0x80>)
 80008da:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_ETH_Init+0x90>)
 80008dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_ETH_Init+0x80>)
 80008e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_ETH_Init+0x80>)
 80008e8:	f000 ff48 	bl	800177c <HAL_ETH_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008f2:	f000 fa1f 	bl	8000d34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f6:	2238      	movs	r2, #56	; 0x38
 80008f8:	2100      	movs	r1, #0
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_ETH_Init+0x94>)
 80008fc:	f009 fb9e 	bl	800a03c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_ETH_Init+0x94>)
 8000902:	2221      	movs	r2, #33	; 0x21
 8000904:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_ETH_Init+0x94>)
 8000908:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800090c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_ETH_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	24000130 	.word	0x24000130
 800091c:	40028000 	.word	0x40028000
 8000920:	24000814 	.word	0x24000814
 8000924:	24000074 	.word	0x24000074
 8000928:	24000014 	.word	0x24000014
 800092c:	240000f8 	.word	0x240000f8

08000930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000936:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <MX_SPI1_Init+0xa0>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_SPI1_Init+0x9c>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000942:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_SPI1_Init+0x9c>)
 800094a:	2203      	movs	r2, #3
 800094c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_SPI1_Init+0x9c>)
 800095c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000960:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_SPI1_Init+0x9c>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000976:	2200      	movs	r2, #0
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_SPI1_Init+0x9c>)
 800097c:	2200      	movs	r2, #0
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000982:	2200      	movs	r2, #0
 8000984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000988:	2200      	movs	r2, #0
 800098a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_SPI1_Init+0x9c>)
 800098e:	2200      	movs	r2, #0
 8000990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_SPI1_Init+0x9c>)
 8000994:	2200      	movs	r2, #0
 8000996:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_SPI1_Init+0x9c>)
 800099a:	2200      	movs	r2, #0
 800099c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_SPI1_Init+0x9c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_SPI1_Init+0x9c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_SPI1_Init+0x9c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_SPI1_Init+0x9c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_SPI1_Init+0x9c>)
 80009b8:	f004 fcb4 	bl	8005324 <HAL_SPI_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_SPI1_Init+0x96>
  {
    Error_Handler();
 80009c2:	f000 f9b7 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	240001e0 	.word	0x240001e0
 80009d0:	40013000 	.word	0x40013000

080009d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <MX_USART3_UART_Init+0x94>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1c:	4811      	ldr	r0, [pc, #68]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a1e:	f005 f899 	bl	8005b54 <HAL_UART_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a28:	f000 f984 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a30:	f006 f89b 	bl	8006b6a <HAL_UARTEx_SetTxFifoThreshold>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3a:	f000 f97b 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a42:	f006 f8d0 	bl	8006be6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a4c:	f000 f972 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a52:	f006 f851 	bl	8006af8 <HAL_UARTEx_DisableFifoMode>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a5c:	f000 f96a 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	24000268 	.word	0x24000268
 8000a68:	40004800 	.word	0x40004800

08000a6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a78:	2209      	movs	r2, #9
 8000a7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab4:	f001 fc4f 	bl	8002356 <HAL_PCD_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000abe:	f000 f939 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	240002fc 	.word	0x240002fc
 8000acc:	40080000 	.word	0x40080000

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a60      	ldr	r2, [pc, #384]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b5e      	ldr	r3, [pc, #376]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b04:	4b5a      	ldr	r3, [pc, #360]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b14:	4b56      	ldr	r3, [pc, #344]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b53      	ldr	r3, [pc, #332]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a51      	ldr	r2, [pc, #324]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b4f      	ldr	r3, [pc, #316]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	4a4a      	ldr	r2, [pc, #296]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b50:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	4a42      	ldr	r2, [pc, #264]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6e:	4b40      	ldr	r3, [pc, #256]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7c:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	4a3b      	ldr	r2, [pc, #236]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8c:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a33      	ldr	r2, [pc, #204]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <MX_GPIO_Init+0x1a0>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bbe:	482d      	ldr	r0, [pc, #180]	; (8000c74 <MX_GPIO_Init+0x1a4>)
 8000bc0:	f001 fbb0 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bca:	482b      	ldr	r0, [pc, #172]	; (8000c78 <MX_GPIO_Init+0x1a8>)
 8000bcc:	f001 fbaa 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4829      	ldr	r0, [pc, #164]	; (8000c7c <MX_GPIO_Init+0x1ac>)
 8000bd6:	f001 fba5 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4824      	ldr	r0, [pc, #144]	; (8000c80 <MX_GPIO_Init+0x1b0>)
 8000bf0:	f001 f9e8 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bf4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4819      	ldr	r0, [pc, #100]	; (8000c74 <MX_GPIO_Init+0x1a4>)
 8000c0e:	f001 f9d9 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <MX_GPIO_Init+0x1a8>)
 8000c2c:	f001 f9ca 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <MX_GPIO_Init+0x1b4>)
 8000c46:	f001 f9bd 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_GPIO_Init+0x1ac>)
 8000c62:	f001 f9af 	bl	8001fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c66:	bf00      	nop
 8000c68:	3730      	adds	r7, #48	; 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	58024400 	.word	0x58024400
 8000c74:	58020400 	.word	0x58020400
 8000c78:	58020c00 	.word	0x58020c00
 8000c7c:	58021000 	.word	0x58021000
 8000c80:	58020800 	.word	0x58020800
 8000c84:	58021800 	.word	0x58021800

08000c88 <StartPollingLoop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPollingLoop */
void StartPollingLoop(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int time1Min = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
	int time10Min = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
	for(;;){

		if(HAL_GetTick() - time1Min >= 60000){
 8000c98:	f000 fc40 	bl	800151c <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d907      	bls.n	8000cba <StartPollingLoop+0x32>
		time1Min = HAL_GetTick();
 8000caa:	f000 fc37 	bl	800151c <HAL_GetTick>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60fb      	str	r3, [r7, #12]
		checkBattery();
 8000cb2:	f7ff fcb3 	bl	800061c <checkBattery>
		checkLocation();
 8000cb6:	f7ff fcf3 	bl	80006a0 <checkLocation>
		//logData(longitude, latitude, altitude);
	}

	if(HAL_GetTick() - time10Min >= 600000){
 8000cba:	f000 fc2f 	bl	800151c <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <StartPollingLoop+0x58>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d9e6      	bls.n	8000c98 <StartPollingLoop+0x10>
		time10Min = HAL_GetTick();
 8000cca:	f000 fc27 	bl	800151c <HAL_GetTick>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60bb      	str	r3, [r7, #8]
		if(descendFlag >= 10){
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <StartPollingLoop+0x5c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b09      	cmp	r3, #9
 8000cd8:	ddde      	ble.n	8000c98 <StartPollingLoop+0x10>
				cutBalloon();
 8000cda:	f7ff fc7f 	bl	80005dc <cutBalloon>
		if(HAL_GetTick() - time1Min >= 60000){
 8000cde:	e7db      	b.n	8000c98 <StartPollingLoop+0x10>
 8000ce0:	000927bf 	.word	0x000927bf
 8000ce4:	240000f0 	.word	0x240000f0

08000ce8 <BatteryCallback>:
  /* USER CODE END 5 */
}

/* BatteryCallback function */
void BatteryCallback(void *argument)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BatteryCallback */

  /* USER CODE END BatteryCallback */
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DescensionCallback>:

/* DescensionCallback function */
void DescensionCallback(void *argument)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DescensionCallback */

  /* USER CODE END DescensionCallback */
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d22:	f000 fbe7 	bl	80014f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40001000 	.word	0x40001000

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <Error_Handler+0x8>
	...

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_MspInit+0x38>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_MspInit+0x38>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_MspInit+0x38>)
 8000d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	210f      	movs	r1, #15
 8000d68:	f06f 0001 	mvn.w	r0, #1
 8000d6c:	f000 fcde 	bl	800172c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	58024400 	.word	0x58024400

08000d7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a59      	ldr	r2, [pc, #356]	; (8000f00 <HAL_ETH_MspInit+0x184>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	f040 80ab 	bne.w	8000ef6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000da0:	4b58      	ldr	r3, [pc, #352]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da6:	4a57      	ldr	r2, [pc, #348]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000db0:	4b54      	ldr	r3, [pc, #336]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dba:	623b      	str	r3, [r7, #32]
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dbe:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc4:	4a4f      	ldr	r2, [pc, #316]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dce:	4b4d      	ldr	r3, [pc, #308]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ddc:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de2:	4a48      	ldr	r2, [pc, #288]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dec:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	4a40      	ldr	r2, [pc, #256]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b3a      	ldr	r3, [pc, #232]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	4a39      	ldr	r2, [pc, #228]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a2a      	ldr	r2, [pc, #168]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <HAL_ETH_MspInit+0x188>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e72:	2332      	movs	r3, #50	; 0x32
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481e      	ldr	r0, [pc, #120]	; (8000f08 <HAL_ETH_MspInit+0x18c>)
 8000e8e:	f001 f899 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e92:	2386      	movs	r3, #134	; 0x86
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	; (8000f0c <HAL_ETH_MspInit+0x190>)
 8000eae:	f001 f889 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <HAL_ETH_MspInit+0x194>)
 8000ed0:	f001 f878 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <HAL_ETH_MspInit+0x198>)
 8000ef2:	f001 f867 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	; 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40028000 	.word	0x40028000
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020800 	.word	0x58020800
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	58020400 	.word	0x58020400
 8000f14:	58021800 	.word	0x58021800

08000f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0bc      	sub	sp, #240	; 0xf0
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	22c0      	movs	r2, #192	; 0xc0
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f009 f87f 	bl	800a03c <memset>
  if(hspi->Instance==SPI1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a38      	ldr	r2, [pc, #224]	; (8001024 <HAL_SPI_MspInit+0x10c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d168      	bne.n	800101a <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fbb5 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f68:	f7ff fee4 	bl	8000d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f72:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	4a25      	ldr	r2, [pc, #148]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	4a1e      	ldr	r2, [pc, #120]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_SPI_MspInit+0x110>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4810      	ldr	r0, [pc, #64]	; (800102c <HAL_SPI_MspInit+0x114>)
 8000fec:	f000 ffea 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001008:	2305      	movs	r3, #5
 800100a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001012:	4619      	mov	r1, r3
 8001014:	4806      	ldr	r0, [pc, #24]	; (8001030 <HAL_SPI_MspInit+0x118>)
 8001016:	f000 ffd5 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	37f0      	adds	r7, #240	; 0xf0
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40013000 	.word	0x40013000
 8001028:	58024400 	.word	0x58024400
 800102c:	58020000 	.word	0x58020000
 8001030:	58020c00 	.word	0x58020c00

08001034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0ba      	sub	sp, #232	; 0xe8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	22c0      	movs	r2, #192	; 0xc0
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f008 fff1 	bl	800a03c <memset>
  if(huart->Instance==USART3)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a27      	ldr	r2, [pc, #156]	; (80010fc <HAL_UART_MspInit+0xc8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d146      	bne.n	80010f2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001064:	f04f 0202 	mov.w	r2, #2
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fb26 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001086:	f7ff fe55 	bl	8000d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_UART_MspInit+0xcc>)
 800108c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_UART_MspInit+0xcc>)
 8001092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_MspInit+0xcc>)
 800109c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspInit+0xcc>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspInit+0xcc>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_UART_MspInit+0xcc>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e0:	2307      	movs	r3, #7
 80010e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_UART_MspInit+0xd0>)
 80010ee:	f000 ff69 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	37e8      	adds	r7, #232	; 0xe8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40004800 	.word	0x40004800
 8001100:	58024400 	.word	0x58024400
 8001104:	58020c00 	.word	0x58020c00

08001108 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0ba      	sub	sp, #232	; 0xe8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	22c0      	movs	r2, #192	; 0xc0
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f008 ff87 	bl	800a03c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a30      	ldr	r2, [pc, #192]	; (80011f4 <HAL_PCD_MspInit+0xec>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d159      	bne.n	80011ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001138:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001144:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fabb 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800115c:	f7ff fdea 	bl	8000d34 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001160:	f001 fa7c 	bl	800265c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_PCD_MspInit+0xf0>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <HAL_PCD_MspInit+0xf0>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_PCD_MspInit+0xf0>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001182:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800119c:	230a      	movs	r3, #10
 800119e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <HAL_PCD_MspInit+0xf4>)
 80011aa:	f000 ff0b 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <HAL_PCD_MspInit+0xf4>)
 80011ca:	f000 fefb 	bl	8001fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_PCD_MspInit+0xf0>)
 80011d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_PCD_MspInit+0xf0>)
 80011d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_PCD_MspInit+0xf0>)
 80011e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	37e8      	adds	r7, #232	; 0xe8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40080000 	.word	0x40080000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020000 	.word	0x58020000

08001200 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d827      	bhi.n	800125e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800120e:	2200      	movs	r2, #0
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	2036      	movs	r0, #54	; 0x36
 8001214:	f000 fa8a 	bl	800172c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001218:	2036      	movs	r0, #54	; 0x36
 800121a:	f000 faa1 	bl	8001760 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800121e:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <HAL_InitTick+0xc4>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <HAL_InitTick+0xc8>)
 8001226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800122a:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <HAL_InitTick+0xc8>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_InitTick+0xc8>)
 8001236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001242:	f107 0210 	add.w	r2, r7, #16
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f002 f9fb 	bl	8003648 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001258:	2b00      	cmp	r3, #0
 800125a:	d106      	bne.n	800126a <HAL_InitTick+0x6a>
 800125c:	e001      	b.n	8001262 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e02b      	b.n	80012ba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001262:	f002 f9c5 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 8001266:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001268:	e004      	b.n	8001274 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800126a:	f002 f9c1 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 800126e:	4603      	mov	r3, r0
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <HAL_InitTick+0xcc>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	3b01      	subs	r3, #1
 8001280:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_InitTick+0xd0>)
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <HAL_InitTick+0xd4>)
 8001286:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_InitTick+0xd0>)
 800128a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800128e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_InitTick+0xd0>)
 8001292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001294:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_InitTick+0xd0>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_InitTick+0xd0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012a2:	480b      	ldr	r0, [pc, #44]	; (80012d0 <HAL_InitTick+0xd0>)
 80012a4:	f004 f97d 	bl	80055a2 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <HAL_InitTick+0xd0>)
 80012b0:	f004 f9d8 	bl	8005664 <HAL_TIM_Base_Start_IT>
 80012b4:	4603      	mov	r3, r0
 80012b6:	e000      	b.n	80012ba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3740      	adds	r7, #64	; 0x40
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	24000008 	.word	0x24000008
 80012c8:	58024400 	.word	0x58024400
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	2400081c 	.word	0x2400081c
 80012d4:	40001000 	.word	0x40001000

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM6_DAC_IRQHandler+0x10>)
 800130a:	f004 fa23 	bl	8005754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2400081c 	.word	0x2400081c

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800131c:	4b37      	ldr	r3, [pc, #220]	; (80013fc <SystemInit+0xe4>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a36      	ldr	r2, [pc, #216]	; (80013fc <SystemInit+0xe4>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800132c:	4b34      	ldr	r3, [pc, #208]	; (8001400 <SystemInit+0xe8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	2b06      	cmp	r3, #6
 8001336:	d807      	bhi.n	8001348 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001338:	4b31      	ldr	r3, [pc, #196]	; (8001400 <SystemInit+0xe8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 030f 	bic.w	r3, r3, #15
 8001340:	4a2f      	ldr	r2, [pc, #188]	; (8001400 <SystemInit+0xe8>)
 8001342:	f043 0307 	orr.w	r3, r3, #7
 8001346:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001348:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <SystemInit+0xec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <SystemInit+0xec>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <SystemInit+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <SystemInit+0xec>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4929      	ldr	r1, [pc, #164]	; (8001404 <SystemInit+0xec>)
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <SystemInit+0xf0>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <SystemInit+0xe8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <SystemInit+0xe8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 030f 	bic.w	r3, r3, #15
 800137a:	4a21      	ldr	r2, [pc, #132]	; (8001400 <SystemInit+0xe8>)
 800137c:	f043 0307 	orr.w	r3, r3, #7
 8001380:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <SystemInit+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <SystemInit+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <SystemInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <SystemInit+0xec>)
 8001396:	4a1d      	ldr	r2, [pc, #116]	; (800140c <SystemInit+0xf4>)
 8001398:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <SystemInit+0xec>)
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <SystemInit+0xf8>)
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <SystemInit+0xec>)
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <SystemInit+0xfc>)
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <SystemInit+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <SystemInit+0xec>)
 80013ae:	4a19      	ldr	r2, [pc, #100]	; (8001414 <SystemInit+0xfc>)
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <SystemInit+0xec>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <SystemInit+0xec>)
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <SystemInit+0xfc>)
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <SystemInit+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <SystemInit+0xec>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <SystemInit+0xec>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <SystemInit+0xec>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <SystemInit+0x100>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <SystemInit+0x104>)
 80013dc:	4013      	ands	r3, r2
 80013de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e2:	d202      	bcs.n	80013ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <SystemInit+0x108>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <SystemInit+0x10c>)
 80013ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	52002000 	.word	0x52002000
 8001404:	58024400 	.word	0x58024400
 8001408:	eaf6ed7f 	.word	0xeaf6ed7f
 800140c:	02020200 	.word	0x02020200
 8001410:	01ff0000 	.word	0x01ff0000
 8001414:	01010280 	.word	0x01010280
 8001418:	5c001000 	.word	0x5c001000
 800141c:	ffff0000 	.word	0xffff0000
 8001420:	51008108 	.word	0x51008108
 8001424:	52004000 	.word	0x52004000

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800142c:	f7ff ff74 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	; (8001474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f008 fdf9 	bl	800a04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff f95b 	bl	8000714 <main>
  bx  lr
 800145e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001464:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001468:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800146c:	0800a198 	.word	0x0800a198
  ldr r2, =_sbss
 8001470:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001474:	240051bc 	.word	0x240051bc

08001478 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC3_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001482:	2003      	movs	r0, #3
 8001484:	f000 f947 	bl	8001716 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001488:	f001 ff08 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800148c:	4602      	mov	r2, r0
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_Init+0x68>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <HAL_Init+0x6c>)
 800149a:	5ccb      	ldrb	r3, [r1, r3]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_Init+0x68>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_Init+0x6c>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_Init+0x70>)
 80014be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_Init+0x74>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c6:	200f      	movs	r0, #15
 80014c8:	f7ff fe9a 	bl	8001200 <HAL_InitTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e002      	b.n	80014dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014d6:	f7ff fc33 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	58024400 	.word	0x58024400
 80014e8:	0800a150 	.word	0x0800a150
 80014ec:	24000004 	.word	0x24000004
 80014f0:	24000000 	.word	0x24000000

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2400000c 	.word	0x2400000c
 8001518:	24000868 	.word	0x24000868

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	24000868 	.word	0x24000868

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2400000c 	.word	0x2400000c

0800157c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetREVID+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0c1b      	lsrs	r3, r3, #16
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	5c001000 	.word	0x5c001000

08001594 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015a4:	4904      	ldr	r1, [pc, #16]	; (80015b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	58000400 	.word	0x58000400

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <__NVIC_SetPriorityGrouping+0x40>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x40>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00
 8001600:	05fa0000 	.word	0x05fa0000

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff4c 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800173a:	f7ff ff63 	bl	8001604 <__NVIC_GetPriorityGrouping>
 800173e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f7ff ffb3 	bl	80016b0 <NVIC_EncodePriority>
 800174a:	4602      	mov	r2, r0
 800174c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff82 	bl	800165c <__NVIC_SetPriority>
}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff56 	bl	8001620 <__NVIC_EnableIRQ>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0cf      	b.n	800192e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2223      	movs	r2, #35	; 0x23
 800179c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff faeb 	bl	8000d7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_ETH_Init+0x1bc>)
 80017a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ac:	4a62      	ldr	r2, [pc, #392]	; (8001938 <HAL_ETH_Init+0x1bc>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017b6:	4b60      	ldr	r3, [pc, #384]	; (8001938 <HAL_ETH_Init+0x1bc>)
 80017b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7a1b      	ldrb	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fee1 	bl	8001594 <HAL_SYSCFG_ETHInterfaceSelect>
 80017d2:	e003      	b.n	80017dc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017d8:	f7ff fedc 	bl	8001594 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80017dc:	4b57      	ldr	r3, [pc, #348]	; (800193c <HAL_ETH_Init+0x1c0>)
 80017de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f8:	f7ff fe90 	bl	800151c <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017fe:	e011      	b.n	8001824 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001800:	f7ff fe8c 	bl	800151c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800180e:	d909      	bls.n	8001824 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	22e0      	movs	r2, #224	; 0xe0
 800181c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e084      	b.n	800192e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1e4      	bne.n	8001800 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f886 	bl	8001948 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800183c:	f001 fea8 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 8001840:	4603      	mov	r3, r0
 8001842:	4a3f      	ldr	r2, [pc, #252]	; (8001940 <HAL_ETH_Init+0x1c4>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	0c9a      	lsrs	r2, r3, #18
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3a01      	subs	r2, #1
 8001850:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fa71 	bl	8001d3c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001862:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001866:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001876:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	22e0      	movs	r2, #224	; 0xe0
 8001892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e049      	b.n	800192e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_ETH_Init+0x1c8>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6952      	ldr	r2, [r2, #20]
 80018ae:	0051      	lsls	r1, r2, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fad9 	bl	8001e76 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fb1f 	bl	8001f08 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	3305      	adds	r3, #5
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	021a      	lsls	r2, r3, #8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	3304      	adds	r3, #4
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	3303      	adds	r3, #3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	061a      	lsls	r2, r3, #24
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	3302      	adds	r3, #2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001908:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001916:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001918:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2210      	movs	r2, #16
 8001928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	58024400 	.word	0x58024400
 800193c:	58000400 	.word	0x58000400
 8001940:	431bde83 	.word	0x431bde83
 8001944:	ffff8001 	.word	0xffff8001

08001948 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001958:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001960:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001962:	f001 fe15 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 8001966:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d908      	bls.n	8001982 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d804      	bhi.n	8001982 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e027      	b.n	80019d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d908      	bls.n	800199c <HAL_ETH_SetMDIOClockRange+0x54>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d204      	bcs.n	800199c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e01a      	b.n	80019d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d303      	bcc.n	80019ac <HAL_ETH_SetMDIOClockRange+0x64>
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d911      	bls.n	80019d0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d908      	bls.n	80019c6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_ETH_SetMDIOClockRange+0xac>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d804      	bhi.n	80019c6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e005      	b.n	80019d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e000      	b.n	80019d2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80019d0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	01312cff 	.word	0x01312cff
 80019e8:	02160ebf 	.word	0x02160ebf
 80019ec:	03938700 	.word	0x03938700
 80019f0:	05f5e0ff 	.word	0x05f5e0ff
 80019f4:	08f0d17f 	.word	0x08f0d17f

080019f8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001a0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001a12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	7b1b      	ldrb	r3, [r3, #12]
 8001a18:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	7b5b      	ldrb	r3, [r3, #13]
 8001a20:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7b9b      	ldrb	r3, [r3, #14]
 8001a28:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	7bdb      	ldrb	r3, [r3, #15]
 8001a30:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a32:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	7c12      	ldrb	r2, [r2, #16]
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	d102      	bne.n	8001a42 <ETH_SetMACConfig+0x4a>
 8001a3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a40:	e000      	b.n	8001a44 <ETH_SetMACConfig+0x4c>
 8001a42:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	7c52      	ldrb	r2, [r2, #17]
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d102      	bne.n	8001a54 <ETH_SetMACConfig+0x5c>
 8001a4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a52:	e000      	b.n	8001a56 <ETH_SetMACConfig+0x5e>
 8001a54:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	7c9b      	ldrb	r3, [r3, #18]
 8001a5c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a5e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a64:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	7f1b      	ldrb	r3, [r3, #28]
 8001a70:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7f5b      	ldrb	r3, [r3, #29]
 8001a78:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a7a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	7f92      	ldrb	r2, [r2, #30]
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	d102      	bne.n	8001a8a <ETH_SetMACConfig+0x92>
 8001a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a88:	e000      	b.n	8001a8c <ETH_SetMACConfig+0x94>
 8001a8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7fdb      	ldrb	r3, [r3, #31]
 8001a92:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a94:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a9c:	2a00      	cmp	r2, #0
 8001a9e:	d102      	bne.n	8001aa6 <ETH_SetMACConfig+0xae>
 8001aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa4:	e000      	b.n	8001aa8 <ETH_SetMACConfig+0xb0>
 8001aa6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001aa8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001aae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ab6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001ab8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <ETH_SetMACConfig+0x22c>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ae4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aec:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001af6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001af8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	d102      	bne.n	8001b0a <ETH_SetMACConfig+0x112>
 8001b04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b08:	e000      	b.n	8001b0c <ETH_SetMACConfig+0x114>
 8001b0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b0c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <ETH_SetMACConfig+0x230>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b30:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <ETH_SetMACConfig+0x234>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b54:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d101      	bne.n	8001b6a <ETH_SetMACConfig+0x172>
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	e000      	b.n	8001b6c <ETH_SetMACConfig+0x174>
 8001b6a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b6c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b72:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b7e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b94:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b9c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	f023 0103 	bic.w	r1, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001bc2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d101      	bne.n	8001be6 <ETH_SetMACConfig+0x1ee>
 8001be2:	2240      	movs	r2, #64	; 0x40
 8001be4:	e000      	b.n	8001be8 <ETH_SetMACConfig+0x1f0>
 8001be6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001be8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001bf0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001bfa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c08:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	00048083 	.word	0x00048083
 8001c28:	c0f88000 	.word	0xc0f88000
 8001c2c:	fffffef0 	.word	0xfffffef0

08001c30 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <ETH_SetDMAConfig+0xf8>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	6811      	ldr	r1, [r2, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c56:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	791b      	ldrb	r3, [r3, #4]
 8001c5c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c62:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	7b1b      	ldrb	r3, [r3, #12]
 8001c68:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <ETH_SetDMAConfig+0xfc>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	430b      	orrs	r3, r1
 8001c84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c88:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	7b5b      	ldrb	r3, [r3, #13]
 8001c8e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <ETH_SetDMAConfig+0x100>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	68f9      	ldr	r1, [r7, #12]
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cb4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	7d1b      	ldrb	r3, [r3, #20]
 8001cc0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cc2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	7f5b      	ldrb	r3, [r3, #29]
 8001cc8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <ETH_SetDMAConfig+0x104>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	68f9      	ldr	r1, [r7, #12]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	7f1b      	ldrb	r3, [r3, #28]
 8001cf2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d04:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <ETH_SetDMAConfig+0x108>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	68f9      	ldr	r1, [r7, #12]
 8001d12:	430b      	orrs	r3, r1
 8001d14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d18:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	ffff87fd 	.word	0xffff87fd
 8001d2c:	ffff2ffe 	.word	0xffff2ffe
 8001d30:	fffec000 	.word	0xfffec000
 8001d34:	ffc0efef 	.word	0xffc0efef
 8001d38:	7fc0ffff 	.word	0x7fc0ffff

08001d3c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0a4      	sub	sp, #144	; 0x90
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001d94:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001d98:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001db6:	2300      	movs	r3, #0
 8001db8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001de6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001df0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e16:	2300      	movs	r3, #0
 8001e18:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fde6 	bl	80019f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e30:	2301      	movs	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e4a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e54:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e5c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4619      	mov	r1, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fee1 	bl	8001c30 <ETH_SetDMAConfig>
}
 8001e6e:	bf00      	nop
 8001e70:	3790      	adds	r7, #144	; 0x90
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e01d      	b.n	8001ec0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68d9      	ldr	r1, [r3, #12]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	3206      	adds	r2, #6
 8001eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d9de      	bls.n	8001e84 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e023      	b.n	8001f5e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6919      	ldr	r1, [r3, #16]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	3212      	adds	r2, #18
 8001f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d9d8      	bls.n	8001f16 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fd2:	4b89      	ldr	r3, [pc, #548]	; (80021f8 <HAL_GPIO_Init+0x234>)
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fd6:	e194      	b.n	8002302 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8186 	beq.w	80022fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d005      	beq.n	8002008 <HAL_GPIO_Init+0x44>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d017      	beq.n	80020a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d123      	bne.n	80020fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	69b9      	ldr	r1, [r7, #24]
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80e0 	beq.w	80022fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x238>)
 800213e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002142:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <HAL_GPIO_Init+0x238>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_GPIO_Init+0x238>)
 800214e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215a:	4a29      	ldr	r2, [pc, #164]	; (8002200 <HAL_GPIO_Init+0x23c>)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a20      	ldr	r2, [pc, #128]	; (8002204 <HAL_GPIO_Init+0x240>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d052      	beq.n	800222c <HAL_GPIO_Init+0x268>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <HAL_GPIO_Init+0x244>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d031      	beq.n	80021f2 <HAL_GPIO_Init+0x22e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_GPIO_Init+0x248>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02b      	beq.n	80021ee <HAL_GPIO_Init+0x22a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_GPIO_Init+0x24c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d025      	beq.n	80021ea <HAL_GPIO_Init+0x226>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_GPIO_Init+0x250>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <HAL_GPIO_Init+0x222>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_GPIO_Init+0x254>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d019      	beq.n	80021e2 <HAL_GPIO_Init+0x21e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1a      	ldr	r2, [pc, #104]	; (800221c <HAL_GPIO_Init+0x258>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_GPIO_Init+0x21a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x25c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00d      	beq.n	80021da <HAL_GPIO_Init+0x216>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a18      	ldr	r2, [pc, #96]	; (8002224 <HAL_GPIO_Init+0x260>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <HAL_GPIO_Init+0x212>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_GPIO_Init+0x264>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <HAL_GPIO_Init+0x20e>
 80021ce:	2309      	movs	r3, #9
 80021d0:	e02d      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021d2:	230a      	movs	r3, #10
 80021d4:	e02b      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021d6:	2308      	movs	r3, #8
 80021d8:	e029      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021da:	2307      	movs	r3, #7
 80021dc:	e027      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021de:	2306      	movs	r3, #6
 80021e0:	e025      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021e2:	2305      	movs	r3, #5
 80021e4:	e023      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e021      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e01f      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e01d      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e01b      	b.n	800222e <HAL_GPIO_Init+0x26a>
 80021f6:	bf00      	nop
 80021f8:	58000080 	.word	0x58000080
 80021fc:	58024400 	.word	0x58024400
 8002200:	58000400 	.word	0x58000400
 8002204:	58020000 	.word	0x58020000
 8002208:	58020400 	.word	0x58020400
 800220c:	58020800 	.word	0x58020800
 8002210:	58020c00 	.word	0x58020c00
 8002214:	58021000 	.word	0x58021000
 8002218:	58021400 	.word	0x58021400
 800221c:	58021800 	.word	0x58021800
 8002220:	58021c00 	.word	0x58021c00
 8002224:	58022000 	.word	0x58022000
 8002228:	58022400 	.word	0x58022400
 800222c:	2300      	movs	r3, #0
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	f002 0203 	and.w	r2, r2, #3
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	4093      	lsls	r3, r2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223e:	4938      	ldr	r1, [pc, #224]	; (8002320 <HAL_GPIO_Init+0x35c>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	f47f ae63 	bne.w	8001fd8 <HAL_GPIO_Init+0x14>
  }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3724      	adds	r7, #36	; 0x24
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	58000400 	.word	0x58000400

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002358:	b08f      	sub	sp, #60	; 0x3c
 800235a:	af0a      	add	r7, sp, #40	; 0x28
 800235c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e116      	b.n	8002596 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fec0 	bl	8001108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fd18 	bl	8006ddc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	687e      	ldr	r6, [r7, #4]
 80023b4:	466d      	mov	r5, sp
 80023b6:	f106 0410 	add.w	r4, r6, #16
 80023ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ca:	1d33      	adds	r3, r6, #4
 80023cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	f004 fc96 	bl	8006d00 <USB_CoreInit>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0d7      	b.n	8002596 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f004 fd06 	bl	8006dfe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e04a      	b.n	800248e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	333d      	adds	r3, #61	; 0x3d
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	333c      	adds	r3, #60	; 0x3c
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	b298      	uxth	r0, r3
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3356      	adds	r3, #86	; 0x56
 8002434:	4602      	mov	r2, r0
 8002436:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3340      	adds	r3, #64	; 0x40
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3344      	adds	r3, #68	; 0x44
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3348      	adds	r3, #72	; 0x48
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	334c      	adds	r3, #76	; 0x4c
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3af      	bcc.n	80023f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e044      	b.n	8002528 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3301      	adds	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3b5      	bcc.n	800249e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	687e      	ldr	r6, [r7, #4]
 800253a:	466d      	mov	r5, sp
 800253c:	f106 0410 	add.w	r4, r6, #16
 8002540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002550:	1d33      	adds	r3, r6, #4
 8002552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002554:	6838      	ldr	r0, [r7, #0]
 8002556:	f004 fc9f 	bl	8006e98 <USB_DevInit>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e014      	b.n	8002596 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f80b 	bl	80025a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f004 fe5d 	bl	800724e <USB_DevDisconnect>

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	10000003 	.word	0x10000003

080025e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d00a      	beq.n	8002612 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d001      	beq.n	800260e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e01f      	b.n	800264e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e01d      	b.n	800264e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 0207 	bic.w	r2, r3, #7
 800261a:	490f      	ldr	r1, [pc, #60]	; (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4313      	orrs	r3, r2
 8002620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002622:	f7fe ff7b 	bl	800151c <HAL_GetTick>
 8002626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002628:	e009      	b.n	800263e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800262a:	f7fe ff77 	bl	800151c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002638:	d901      	bls.n	800263e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e007      	b.n	800264e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264a:	d1ee      	bne.n	800262a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	58024800 	.word	0x58024800

0800265c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	58024800 	.word	0x58024800

0800267c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	; 0x30
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f000 bc48 	b.w	8002f20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8088 	beq.w	80027ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269e:	4b99      	ldr	r3, [pc, #612]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026a8:	4b96      	ldr	r3, [pc, #600]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d007      	beq.n	80026c4 <HAL_RCC_OscConfig+0x48>
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	2b18      	cmp	r3, #24
 80026b8:	d111      	bne.n	80026de <HAL_RCC_OscConfig+0x62>
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d10c      	bne.n	80026de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	4b8f      	ldr	r3, [pc, #572]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d06d      	beq.n	80027ac <HAL_RCC_OscConfig+0x130>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d169      	bne.n	80027ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f000 bc21 	b.w	8002f20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x7a>
 80026e8:	4b86      	ldr	r3, [pc, #536]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a85      	ldr	r2, [pc, #532]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	e02e      	b.n	8002754 <HAL_RCC_OscConfig+0xd8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x9c>
 80026fe:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a80      	ldr	r2, [pc, #512]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b7e      	ldr	r3, [pc, #504]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7d      	ldr	r2, [pc, #500]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e01d      	b.n	8002754 <HAL_RCC_OscConfig+0xd8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0xc0>
 8002722:	4b78      	ldr	r3, [pc, #480]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b75      	ldr	r3, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a74      	ldr	r2, [pc, #464]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e00b      	b.n	8002754 <HAL_RCC_OscConfig+0xd8>
 800273c:	4b71      	ldr	r3, [pc, #452]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a70      	ldr	r2, [pc, #448]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b6e      	ldr	r3, [pc, #440]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6d      	ldr	r2, [pc, #436]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 800274e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fede 	bl	800151c <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7fe feda 	bl	800151c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e3d4      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0xe8>
 8002782:	e014      	b.n	80027ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe feca 	bl	800151c <HAL_GetTick>
 8002788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fec6 	bl	800151c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e3c0      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800279e:	4b59      	ldr	r3, [pc, #356]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x110>
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80ca 	beq.w	8002950 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027bc:	4b51      	ldr	r3, [pc, #324]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027c6:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_RCC_OscConfig+0x166>
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2b18      	cmp	r3, #24
 80027d6:	d156      	bne.n	8002886 <HAL_RCC_OscConfig+0x20a>
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d151      	bne.n	8002886 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e2:	4b48      	ldr	r3, [pc, #288]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x17e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e392      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027fa:	4b42      	ldr	r3, [pc, #264]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0219 	bic.w	r2, r3, #25
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	493f      	ldr	r1, [pc, #252]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fe86 	bl	800151c <HAL_GetTick>
 8002810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002814:	f7fe fe82 	bl	800151c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e37c      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	f7fe fea3 	bl	800157c <HAL_GetREVID>
 8002836:	4603      	mov	r3, r0
 8002838:	f241 0203 	movw	r2, #4099	; 0x1003
 800283c:	4293      	cmp	r3, r2
 800283e:	d817      	bhi.n	8002870 <HAL_RCC_OscConfig+0x1f4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d108      	bne.n	800285a <HAL_RCC_OscConfig+0x1de>
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002850:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002856:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002858:	e07a      	b.n	8002950 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	031b      	lsls	r3, r3, #12
 8002868:	4926      	ldr	r1, [pc, #152]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286e:	e06f      	b.n	8002950 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	4921      	ldr	r1, [pc, #132]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002884:	e064      	b.n	8002950 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d047      	beq.n	800291e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 0219 	bic.w	r2, r3, #25
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	491a      	ldr	r1, [pc, #104]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fe3c 	bl	800151c <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fe38 	bl	800151c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e332      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	f7fe fe59 	bl	800157c <HAL_GetREVID>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d819      	bhi.n	8002908 <HAL_RCC_OscConfig+0x28c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d108      	bne.n	80028ee <HAL_RCC_OscConfig+0x272>
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ea:	6053      	str	r3, [r2, #4]
 80028ec:	e030      	b.n	8002950 <HAL_RCC_OscConfig+0x2d4>
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	031b      	lsls	r3, r3, #12
 80028fc:	4901      	ldr	r1, [pc, #4]	; (8002904 <HAL_RCC_OscConfig+0x288>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
 8002902:	e025      	b.n	8002950 <HAL_RCC_OscConfig+0x2d4>
 8002904:	58024400 	.word	0x58024400
 8002908:	4b9a      	ldr	r3, [pc, #616]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	4997      	ldr	r1, [pc, #604]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e018      	b.n	8002950 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b95      	ldr	r3, [pc, #596]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a94      	ldr	r2, [pc, #592]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe fdf7 	bl	800151c <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe fdf3 	bl	800151c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e2ed      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002944:	4b8b      	ldr	r3, [pc, #556]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80a9 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002966:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002968:	4b82      	ldr	r3, [pc, #520]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d007      	beq.n	8002984 <HAL_RCC_OscConfig+0x308>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b18      	cmp	r3, #24
 8002978:	d13a      	bne.n	80029f0 <HAL_RCC_OscConfig+0x374>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d135      	bne.n	80029f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002984:	4b7b      	ldr	r3, [pc, #492]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_OscConfig+0x320>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e2c1      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800299c:	f7fe fdee 	bl	800157c <HAL_GetREVID>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d817      	bhi.n	80029da <HAL_RCC_OscConfig+0x35e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_OscConfig+0x348>
 80029b2:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029ba:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029c2:	e075      	b.n	8002ab0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029c4:	4b6b      	ldr	r3, [pc, #428]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	069b      	lsls	r3, r3, #26
 80029d2:	4968      	ldr	r1, [pc, #416]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d8:	e06a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029da:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	4962      	ldr	r1, [pc, #392]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ee:	e05f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d042      	beq.n	8002a7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029f8:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a5d      	ldr	r2, [pc, #372]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fd8a 	bl	800151c <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fd86 	bl	800151c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e280      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a1e:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a2a:	f7fe fda7 	bl	800157c <HAL_GetREVID>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d817      	bhi.n	8002a68 <HAL_RCC_OscConfig+0x3ec>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d108      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3d6>
 8002a40:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a48:	4a4a      	ldr	r2, [pc, #296]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a4e:	6053      	str	r3, [r2, #4]
 8002a50:	e02e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x434>
 8002a52:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	4944      	ldr	r1, [pc, #272]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	e023      	b.n	8002ab0 <HAL_RCC_OscConfig+0x434>
 8002a68:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	493f      	ldr	r1, [pc, #252]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
 8002a7c:	e018      	b.n	8002ab0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a3c      	ldr	r2, [pc, #240]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fd47 	bl	800151c <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a92:	f7fe fd43 	bl	800151c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e23d      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d036      	beq.n	8002b2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d019      	beq.n	8002af8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fd24 	bl	800151c <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fd20 	bl	800151c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e21a      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x45c>
 8002af6:	e018      	b.n	8002b2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe fd0a 	bl	800151c <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fd06 	bl	800151c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e200      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d039      	beq.n	8002baa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fce7 	bl	800151c <HAL_GetTick>
 8002b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b52:	f7fe fce3 	bl	800151c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1dd      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCC_OscConfig+0x4f8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x4d6>
 8002b70:	e01b      	b.n	8002baa <HAL_RCC_OscConfig+0x52e>
 8002b72:	bf00      	nop
 8002b74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b78:	4b9b      	ldr	r3, [pc, #620]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a9a      	ldr	r2, [pc, #616]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fcca 	bl	800151c <HAL_GetTick>
 8002b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b8c:	f7fe fcc6 	bl	800151c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e1c0      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b9e:	4b92      	ldr	r3, [pc, #584]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8081 	beq.w	8002cba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb8:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_RCC_OscConfig+0x770>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a8b      	ldr	r2, [pc, #556]	; (8002dec <HAL_RCC_OscConfig+0x770>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fcaa 	bl	800151c <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe fca6 	bl	800151c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1a0      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bde:	4b83      	ldr	r3, [pc, #524]	; (8002dec <HAL_RCC_OscConfig+0x770>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x584>
 8002bf2:	4b7d      	ldr	r3, [pc, #500]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a7c      	ldr	r2, [pc, #496]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfe:	e02d      	b.n	8002c5c <HAL_RCC_OscConfig+0x5e0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCC_OscConfig+0x5a6>
 8002c08:	4b77      	ldr	r3, [pc, #476]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a76      	ldr	r2, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
 8002c14:	4b74      	ldr	r3, [pc, #464]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a73      	ldr	r2, [pc, #460]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	f023 0304 	bic.w	r3, r3, #4
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x5e0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c8>
 8002c2a:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a6b      	ldr	r2, [pc, #428]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0x5e0>
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a67      	ldr	r2, [pc, #412]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a64      	ldr	r2, [pc, #400]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c56:	f023 0304 	bic.w	r3, r3, #4
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fc5a 	bl	800151c <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fc56 	bl	800151c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e14e      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c82:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ee      	beq.n	8002c6c <HAL_RCC_OscConfig+0x5f0>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe fc44 	bl	800151c <HAL_GetTick>
 8002c94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fc40 	bl	800151c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e138      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cae:	4b4e      	ldr	r3, [pc, #312]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ee      	bne.n	8002c98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 812d 	beq.w	8002f1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cc4:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ccc:	2b18      	cmp	r3, #24
 8002cce:	f000 80bd 	beq.w	8002e4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	f040 809e 	bne.w	8002e18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a41      	ldr	r2, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fc18 	bl	800151c <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fc14 	bl	800151c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e10e      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d02:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0e:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d12:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_RCC_OscConfig+0x774>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	430a      	orrs	r2, r1
 8002d22:	4931      	ldr	r1, [pc, #196]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	628b      	str	r3, [r1, #40]	; 0x28
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	3b01      	subs	r3, #1
 8002d38:	025b      	lsls	r3, r3, #9
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	3b01      	subs	r3, #1
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	3b01      	subs	r3, #1
 8002d52:	061b      	lsls	r3, r3, #24
 8002d54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d58:	4923      	ldr	r1, [pc, #140]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_RCC_OscConfig+0x778>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d76:	00d2      	lsls	r2, r2, #3
 8002d78:	491b      	ldr	r1, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	f023 020c 	bic.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4917      	ldr	r1, [pc, #92]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f023 0202 	bic.w	r2, r3, #2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	4912      	ldr	r1, [pc, #72]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe fb9d 	bl	800151c <HAL_GetTick>
 8002de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002de4:	e011      	b.n	8002e0a <HAL_RCC_OscConfig+0x78e>
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400
 8002dec:	58024800 	.word	0x58024800
 8002df0:	fffffc0c 	.word	0xfffffc0c
 8002df4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fb90 	bl	800151c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e08a      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0a:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x77c>
 8002e16:	e082      	b.n	8002f1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a42      	ldr	r2, [pc, #264]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fb7a 	bl	800151c <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fb76 	bl	800151c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e070      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3e:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x7b0>
 8002e4a:	e068      	b.n	8002f1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e52:	4b35      	ldr	r3, [pc, #212]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d031      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f003 0203 	and.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d12a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d122      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d11a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	0a5b      	lsrs	r3, r3, #9
 8002e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	0c1b      	lsrs	r3, r3, #16
 8002ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d108      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0e1b      	lsrs	r3, r3, #24
 8002eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e02b      	b.n	8002f20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ed2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d01f      	beq.n	8002f1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eea:	f7fe fb17 	bl	800151c <HAL_GetTick>
 8002eee:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ef0:	bf00      	nop
 8002ef2:	f7fe fb13 	bl	800151c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d0f9      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_OscConfig+0x8b0>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f0a:	00d2      	lsls	r2, r2, #3
 8002f0c:	4906      	ldr	r1, [pc, #24]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_RCC_OscConfig+0x8ac>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3730      	adds	r7, #48	; 0x30
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	ffff0007 	.word	0xffff0007

08002f30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e19c      	b.n	800327e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b8a      	ldr	r3, [pc, #552]	; (8003170 <HAL_RCC_ClockConfig+0x240>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d910      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b87      	ldr	r3, [pc, #540]	; (8003170 <HAL_RCC_ClockConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 020f 	bic.w	r2, r3, #15
 8002f5a:	4985      	ldr	r1, [pc, #532]	; (8003170 <HAL_RCC_ClockConfig+0x240>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b83      	ldr	r3, [pc, #524]	; (8003170 <HAL_RCC_ClockConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e184      	b.n	800327e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d908      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f90:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4975      	ldr	r1, [pc, #468]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d010      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	4b70      	ldr	r3, [pc, #448]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d908      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	496a      	ldr	r1, [pc, #424]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	4b64      	ldr	r3, [pc, #400]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d908      	bls.n	8002ffe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fec:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	495e      	ldr	r1, [pc, #376]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b00      	cmp	r3, #0
 8003008:	d010      	beq.n	800302c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003016:	429a      	cmp	r2, r3
 8003018:	d908      	bls.n	800302c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800301a:	4b56      	ldr	r3, [pc, #344]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4953      	ldr	r1, [pc, #332]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003028:	4313      	orrs	r3, r2
 800302a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d010      	beq.n	800305a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	429a      	cmp	r2, r3
 8003046:	d908      	bls.n	800305a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f023 020f 	bic.w	r2, r3, #15
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4947      	ldr	r1, [pc, #284]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003056:	4313      	orrs	r3, r2
 8003058:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d055      	beq.n	8003112 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003066:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4940      	ldr	r1, [pc, #256]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003074:	4313      	orrs	r3, r2
 8003076:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d107      	bne.n	8003090 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003080:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d121      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0f6      	b.n	800327e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d115      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0ea      	b.n	800327e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030b0:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0de      	b.n	800327e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c0:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0d6      	b.n	800327e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f023 0207 	bic.w	r2, r3, #7
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4925      	ldr	r1, [pc, #148]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e2:	f7fe fa1b 	bl	800151c <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ea:	f7fe fa17 	bl	800151c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0be      	b.n	800327e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	429a      	cmp	r2, r3
 8003110:	d1eb      	bne.n	80030ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	429a      	cmp	r2, r3
 800312c:	d208      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f023 020f 	bic.w	r2, r3, #15
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	490e      	ldr	r1, [pc, #56]	; (8003174 <HAL_RCC_ClockConfig+0x244>)
 800313c:	4313      	orrs	r3, r2
 800313e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_ClockConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d214      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_RCC_ClockConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 020f 	bic.w	r2, r3, #15
 8003156:	4906      	ldr	r1, [pc, #24]	; (8003170 <HAL_RCC_ClockConfig+0x240>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_RCC_ClockConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e086      	b.n	800327e <HAL_RCC_ClockConfig+0x34e>
 8003170:	52002000 	.word	0x52002000
 8003174:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d010      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003190:	429a      	cmp	r2, r3
 8003192:	d208      	bcs.n	80031a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003194:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	4939      	ldr	r1, [pc, #228]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d010      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031be:	429a      	cmp	r2, r3
 80031c0:	d208      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	492e      	ldr	r1, [pc, #184]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d010      	beq.n	8003202 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	4b28      	ldr	r3, [pc, #160]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d208      	bcs.n	8003202 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031f0:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	4922      	ldr	r1, [pc, #136]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d010      	beq.n	8003230 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800321a:	429a      	cmp	r2, r3
 800321c:	d208      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4917      	ldr	r1, [pc, #92]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 800322c:	4313      	orrs	r3, r2
 800322e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003230:	f000 f834 	bl	800329c <HAL_RCC_GetSysClockFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	4912      	ldr	r1, [pc, #72]	; (800328c <HAL_RCC_ClockConfig+0x35c>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_RCC_ClockConfig+0x358>)
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_RCC_ClockConfig+0x35c>)
 8003258:	5cd3      	ldrb	r3, [r2, r3]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x360>)
 8003266:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x364>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x368>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd ffc4 	bl	8001200 <HAL_InitTick>
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	58024400 	.word	0x58024400
 800328c:	0800a150 	.word	0x0800a150
 8003290:	24000004 	.word	0x24000004
 8003294:	24000000 	.word	0x24000000
 8003298:	24000008 	.word	0x24000008

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	; 0x24
 80032a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a2:	4bb3      	ldr	r3, [pc, #716]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032aa:	2b18      	cmp	r3, #24
 80032ac:	f200 8155 	bhi.w	800355a <HAL_RCC_GetSysClockFreq+0x2be>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	0800331d 	.word	0x0800331d
 80032bc:	0800355b 	.word	0x0800355b
 80032c0:	0800355b 	.word	0x0800355b
 80032c4:	0800355b 	.word	0x0800355b
 80032c8:	0800355b 	.word	0x0800355b
 80032cc:	0800355b 	.word	0x0800355b
 80032d0:	0800355b 	.word	0x0800355b
 80032d4:	0800355b 	.word	0x0800355b
 80032d8:	08003343 	.word	0x08003343
 80032dc:	0800355b 	.word	0x0800355b
 80032e0:	0800355b 	.word	0x0800355b
 80032e4:	0800355b 	.word	0x0800355b
 80032e8:	0800355b 	.word	0x0800355b
 80032ec:	0800355b 	.word	0x0800355b
 80032f0:	0800355b 	.word	0x0800355b
 80032f4:	0800355b 	.word	0x0800355b
 80032f8:	08003349 	.word	0x08003349
 80032fc:	0800355b 	.word	0x0800355b
 8003300:	0800355b 	.word	0x0800355b
 8003304:	0800355b 	.word	0x0800355b
 8003308:	0800355b 	.word	0x0800355b
 800330c:	0800355b 	.word	0x0800355b
 8003310:	0800355b 	.word	0x0800355b
 8003314:	0800355b 	.word	0x0800355b
 8003318:	0800334f 	.word	0x0800334f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800331c:	4b94      	ldr	r3, [pc, #592]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003328:	4b91      	ldr	r3, [pc, #580]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	4a90      	ldr	r2, [pc, #576]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800333a:	e111      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800333c:	4b8d      	ldr	r3, [pc, #564]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800333e:	61bb      	str	r3, [r7, #24]
      break;
 8003340:	e10e      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003342:	4b8d      	ldr	r3, [pc, #564]	; (8003578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003344:	61bb      	str	r3, [r7, #24]
      break;
 8003346:	e10b      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003348:	4b8c      	ldr	r3, [pc, #560]	; (800357c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800334a:	61bb      	str	r3, [r7, #24]
      break;
 800334c:	e108      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800334e:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003358:	4b85      	ldr	r3, [pc, #532]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003362:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003364:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800336e:	4b80      	ldr	r3, [pc, #512]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	08db      	lsrs	r3, r3, #3
 8003374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80e1 	beq.w	8003554 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f000 8083 	beq.w	80034a0 <HAL_RCC_GetSysClockFreq+0x204>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b02      	cmp	r3, #2
 800339e:	f200 80a1 	bhi.w	80034e4 <HAL_RCC_GetSysClockFreq+0x248>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x114>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d056      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x1c0>
 80033ae:	e099      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033b0:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02d      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033bc:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	4a6b      	ldr	r2, [pc, #428]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
 80033cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e6:	4b62      	ldr	r3, [pc, #392]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ee:	ee07 3a90 	vmov	s15, r3
 80033f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003416:	e087      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003422:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343a:	ed97 6a02 	vldr	s12, [r7, #8]
 800343e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800345a:	e065      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003588 <HAL_RCC_GetSysClockFreq+0x2ec>
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b40      	ldr	r3, [pc, #256]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003482:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800349e:	e043      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800358c <HAL_RCC_GetSysClockFreq+0x2f0>
 80034ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034e2:	e021      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003588 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003506:	ed97 6a02 	vldr	s12, [r7, #8]
 800350a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2e4>
 800350e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003526:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	0a5b      	lsrs	r3, r3, #9
 800352e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003532:	3301      	adds	r3, #1
 8003534:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003540:	edd7 6a07 	vldr	s13, [r7, #28]
 8003544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354c:	ee17 3a90 	vmov	r3, s15
 8003550:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003552:	e005      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
      break;
 8003558:	e002      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800355c:	61bb      	str	r3, [r7, #24]
      break;
 800355e:	bf00      	nop
  }

  return sysclockfreq;
 8003560:	69bb      	ldr	r3, [r7, #24]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	; 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	58024400 	.word	0x58024400
 8003574:	03d09000 	.word	0x03d09000
 8003578:	003d0900 	.word	0x003d0900
 800357c:	007a1200 	.word	0x007a1200
 8003580:	46000000 	.word	0x46000000
 8003584:	4c742400 	.word	0x4c742400
 8003588:	4a742400 	.word	0x4a742400
 800358c:	4af42400 	.word	0x4af42400

08003590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003596:	f7ff fe81 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490f      	ldr	r1, [pc, #60]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	58024400 	.word	0x58024400
 80035e4:	0800a150 	.word	0x0800a150
 80035e8:	24000004 	.word	0x24000004
 80035ec:	24000000 	.word	0x24000000

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035f4:	f7ff ffcc 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4904      	ldr	r1, [pc, #16]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	58024400 	.word	0x58024400
 8003618:	0800a150 	.word	0x0800a150

0800361c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003620:	f7ff ffb6 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4904      	ldr	r1, [pc, #16]	; (8003644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	58024400 	.word	0x58024400
 8003644:	0800a150 	.word	0x0800a150

08003648 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	223f      	movs	r2, #63	; 0x3f
 8003656:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_RCC_GetClockConfig+0x7c>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0207 	and.w	r2, r3, #7
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <HAL_RCC_GetClockConfig+0x7c>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_RCC_GetClockConfig+0x7c>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_RCC_GetClockConfig+0x7c>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_RCC_GetClockConfig+0x7c>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_GetClockConfig+0x7c>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCC_GetClockConfig+0x7c>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_GetClockConfig+0x80>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 020f 	and.w	r2, r3, #15
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	601a      	str	r2, [r3, #0]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	58024400 	.word	0x58024400
 80036c8:	52002000 	.word	0x52002000

080036cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d0:	b0ca      	sub	sp, #296	; 0x128
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80036f0:	2500      	movs	r5, #0
 80036f2:	ea54 0305 	orrs.w	r3, r4, r5
 80036f6:	d049      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003702:	d02f      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003704:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003708:	d828      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800370a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370e:	d01a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003714:	d822      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371e:	d007      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003720:	e01c      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003722:	4bb8      	ldr	r3, [pc, #736]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4ab7      	ldr	r2, [pc, #732]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800372e:	e01a      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003734:	3308      	adds	r3, #8
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fc8f 	bl	800505c <RCCEx_PLL2_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003744:	e00f      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800374a:	3328      	adds	r3, #40	; 0x28
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fd36 	bl	80051c0 <RCCEx_PLL3_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800375a:	e004      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800376e:	4ba5      	ldr	r3, [pc, #660]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377c:	4aa1      	ldr	r2, [pc, #644]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800377e:	430b      	orrs	r3, r1
 8003780:	6513      	str	r3, [r2, #80]	; 0x50
 8003782:	e003      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003788:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003798:	f04f 0900 	mov.w	r9, #0
 800379c:	ea58 0309 	orrs.w	r3, r8, r9
 80037a0:	d047      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d82a      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c9 	.word	0x080037c9
 80037b8:	080037d7 	.word	0x080037d7
 80037bc:	080037ed 	.word	0x080037ed
 80037c0:	0800380b 	.word	0x0800380b
 80037c4:	0800380b 	.word	0x0800380b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c8:	4b8e      	ldr	r3, [pc, #568]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4a8d      	ldr	r2, [pc, #564]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d4:	e01a      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037da:	3308      	adds	r3, #8
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 fc3c 	bl	800505c <RCCEx_PLL2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ea:	e00f      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f0:	3328      	adds	r3, #40	; 0x28
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 fce3 	bl	80051c0 <RCCEx_PLL3_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003800:	e004      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800380a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003814:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003818:	f023 0107 	bic.w	r1, r3, #7
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	4a78      	ldr	r2, [pc, #480]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003824:	430b      	orrs	r3, r1
 8003826:	6513      	str	r3, [r2, #80]	; 0x50
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800382e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800383e:	f04f 0b00 	mov.w	fp, #0
 8003842:	ea5a 030b 	orrs.w	r3, sl, fp
 8003846:	d04c      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003852:	d030      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003858:	d829      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800385a:	2bc0      	cmp	r3, #192	; 0xc0
 800385c:	d02d      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800385e:	2bc0      	cmp	r3, #192	; 0xc0
 8003860:	d825      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003862:	2b80      	cmp	r3, #128	; 0x80
 8003864:	d018      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003866:	2b80      	cmp	r3, #128	; 0x80
 8003868:	d821      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d007      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003872:	e01c      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003874:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a62      	ldr	r2, [pc, #392]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003880:	e01c      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003886:	3308      	adds	r3, #8
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f001 fbe6 	bl	800505c <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003896:	e011      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389c:	3328      	adds	r3, #40	; 0x28
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 fc8d 	bl	80051c0 <RCCEx_PLL3_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038c4:	4b4f      	ldr	r3, [pc, #316]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	4a4c      	ldr	r2, [pc, #304]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6513      	str	r3, [r2, #80]	; 0x50
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80038ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80038f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80038fc:	460b      	mov	r3, r1
 80038fe:	4313      	orrs	r3, r2
 8003900:	d053      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800390a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800390e:	d035      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003914:	d82e      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003916:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800391a:	d031      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800391c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003920:	d828      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003926:	d01a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392c:	d822      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003936:	d007      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003938:	e01c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393a:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003944:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003946:	e01c      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394c:	3308      	adds	r3, #8
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fb83 	bl	800505c <RCCEx_PLL2_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800395c:	e011      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003962:	3328      	adds	r3, #40	; 0x28
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fc2a 	bl	80051c0 <RCCEx_PLL3_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003972:	e006      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800397a:	e002      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800399a:	4a1a      	ldr	r2, [pc, #104]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399c:	430b      	orrs	r3, r1
 800399e:	6593      	str	r3, [r2, #88]	; 0x58
 80039a0:	e003      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80039b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80039c4:	460b      	mov	r3, r1
 80039c6:	4313      	orrs	r3, r2
 80039c8:	d056      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039d6:	d038      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039dc:	d831      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039e2:	d034      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80039e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039e8:	d82b      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ee:	d01d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80039f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039f4:	d825      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80039fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a00:	e01f      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a08:	4ba2      	ldr	r3, [pc, #648]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4aa1      	ldr	r2, [pc, #644]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a14:	e01c      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fb1c 	bl	800505c <RCCEx_PLL2_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a2a:	e011      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a30:	3328      	adds	r3, #40	; 0x28
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 fbc3 	bl	80051c0 <RCCEx_PLL3_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a48:	e002      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a58:	4b8e      	ldr	r3, [pc, #568]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a68:	4a8a      	ldr	r2, [pc, #552]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	d03a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	2b30      	cmp	r3, #48	; 0x30
 8003aa0:	d01f      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003aa2:	2b30      	cmp	r3, #48	; 0x30
 8003aa4:	d819      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d815      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d019      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d111      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab6:	4b77      	ldr	r3, [pc, #476]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	4a76      	ldr	r2, [pc, #472]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ac2:	e011      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac8:	3308      	adds	r3, #8
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fac5 	bl	800505c <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003af0:	4b68      	ldr	r3, [pc, #416]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	4a65      	ldr	r2, [pc, #404]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003b1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d051      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b38:	d035      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b3e:	d82e      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b44:	d031      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b4a:	d828      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b50:	d01a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b56:	d822      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d007      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b62:	e01c      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b64:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	4a4a      	ldr	r2, [pc, #296]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b70:	e01c      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b76:	3308      	adds	r3, #8
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 fa6e 	bl	800505c <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b86:	e011      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8c:	3328      	adds	r3, #40	; 0x28
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 fb15 	bl	80051c0 <RCCEx_PLL3_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b9c:	e006      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc2:	4a34      	ldr	r2, [pc, #208]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6513      	str	r3, [r2, #80]	; 0x50
 8003bc8:	e003      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003be8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003bec:	460b      	mov	r3, r1
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	d056      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfc:	d033      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c02:	d82c      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c08:	d02f      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c0e:	d826      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c14:	d02b      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c1a:	d820      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c20:	d012      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c26:	d81a      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d022      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c30:	d115      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c36:	3308      	adds	r3, #8
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 fa0e 	bl	800505c <RCCEx_PLL2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c46:	e015      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4c:	3328      	adds	r3, #40	; 0x28
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 fab5 	bl	80051c0 <RCCEx_PLL3_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c8a:	4a02      	ldr	r2, [pc, #8]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c90:	e006      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d055      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ccc:	d033      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd2:	d82c      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	d02f      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d826      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ce4:	d02b      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ce6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cea:	d820      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf0:	d012      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf6:	d81a      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d022      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003cfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d00:	d115      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d06:	3308      	adds	r3, #8
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 f9a6 	bl	800505c <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d16:	e015      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1c:	3328      	adds	r3, #40	; 0x28
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 fa4d 	bl	80051c0 <RCCEx_PLL3_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d34:	e006      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d36:	bf00      	nop
 8003d38:	e004      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e002      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d4c:	4ba3      	ldr	r3, [pc, #652]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d5c:	4a9f      	ldr	r2, [pc, #636]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	6593      	str	r3, [r2, #88]	; 0x58
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d037      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d96:	d00e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9c:	d816      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da6:	d111      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4b8c      	ldr	r3, [pc, #560]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a8b      	ldr	r2, [pc, #556]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dba:	3308      	adds	r3, #8
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 f94c 	bl	800505c <RCCEx_PLL2_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dca:	e004      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dde:	4b7f      	ldr	r3, [pc, #508]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a7b      	ldr	r2, [pc, #492]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6513      	str	r3, [r2, #80]	; 0x50
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d039      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d81c      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e3d 	.word	0x08003e3d
 8003e34:	08003e4b 	.word	0x08003e4b
 8003e38:	08003e69 	.word	0x08003e69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3c:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4a66      	ldr	r2, [pc, #408]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4e:	3308      	adds	r3, #8
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f902 	bl	800505c <RCCEx_PLL2_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e72:	4b5a      	ldr	r3, [pc, #360]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	f023 0103 	bic.w	r1, r3, #3
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	4a56      	ldr	r2, [pc, #344]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e86:	e003      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ea6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f000 809f 	beq.w	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4a      	ldr	r2, [pc, #296]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fb2d 	bl	800151c <HAL_GetTick>
 8003ec2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fd fb28 	bl	800151c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	; 0x64
 8003ed6:	d903      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ede:	e005      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee0:	4b3f      	ldr	r3, [pc, #252]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ed      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003eec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d179      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f00:	4053      	eors	r3, r2
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d015      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f0a:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f16:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a30      	ldr	r2, [pc, #192]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f22:	4b2e      	ldr	r3, [pc, #184]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a2d      	ldr	r2, [pc, #180]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f2e:	4a2b      	ldr	r2, [pc, #172]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f42:	d118      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd faea 	bl	800151c <HAL_GetTick>
 8003f48:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f4c:	e00d      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd fae5 	bl	800151c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f58:	1ad2      	subs	r2, r2, r3
 8003f5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d903      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0eb      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d129      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8e:	d10e      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f90:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fa0:	091a      	lsrs	r2, r3, #4
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6113      	str	r3, [r2, #16]
 8003fac:	e005      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fb8:	6113      	str	r3, [r2, #16]
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd0:	e00e      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003fda:	e009      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	58024800 	.word	0x58024800
 8003fe4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f002 0301 	and.w	r3, r2, #1
 8003ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004006:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800400a:	460b      	mov	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	f000 8089 	beq.w	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004018:	2b28      	cmp	r3, #40	; 0x28
 800401a:	d86b      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	080040fd 	.word	0x080040fd
 8004028:	080040f5 	.word	0x080040f5
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040f5 	.word	0x080040f5
 8004034:	080040f5 	.word	0x080040f5
 8004038:	080040f5 	.word	0x080040f5
 800403c:	080040f5 	.word	0x080040f5
 8004040:	080040f5 	.word	0x080040f5
 8004044:	080040c9 	.word	0x080040c9
 8004048:	080040f5 	.word	0x080040f5
 800404c:	080040f5 	.word	0x080040f5
 8004050:	080040f5 	.word	0x080040f5
 8004054:	080040f5 	.word	0x080040f5
 8004058:	080040f5 	.word	0x080040f5
 800405c:	080040f5 	.word	0x080040f5
 8004060:	080040f5 	.word	0x080040f5
 8004064:	080040df 	.word	0x080040df
 8004068:	080040f5 	.word	0x080040f5
 800406c:	080040f5 	.word	0x080040f5
 8004070:	080040f5 	.word	0x080040f5
 8004074:	080040f5 	.word	0x080040f5
 8004078:	080040f5 	.word	0x080040f5
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040f5 	.word	0x080040f5
 8004084:	080040fd 	.word	0x080040fd
 8004088:	080040f5 	.word	0x080040f5
 800408c:	080040f5 	.word	0x080040f5
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080040f5 	.word	0x080040f5
 8004098:	080040f5 	.word	0x080040f5
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	080040fd 	.word	0x080040fd
 80040a8:	080040f5 	.word	0x080040f5
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040f5 	.word	0x080040f5
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	080040fd 	.word	0x080040fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040cc:	3308      	adds	r3, #8
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 ffc3 	bl	800505c <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040dc:	e00f      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e2:	3328      	adds	r3, #40	; 0x28
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f86a 	bl	80051c0 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004106:	4bbf      	ldr	r3, [pc, #764]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004114:	4abb      	ldr	r2, [pc, #748]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004116:	430b      	orrs	r3, r1
 8004118:	6553      	str	r3, [r2, #84]	; 0x54
 800411a:	e003      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004120:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f002 0302 	and.w	r3, r2, #2
 8004130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800413a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d041      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414a:	2b05      	cmp	r3, #5
 800414c:	d824      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	080041a1 	.word	0x080041a1
 8004158:	0800416d 	.word	0x0800416d
 800415c:	08004183 	.word	0x08004183
 8004160:	080041a1 	.word	0x080041a1
 8004164:	080041a1 	.word	0x080041a1
 8004168:	080041a1 	.word	0x080041a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004170:	3308      	adds	r3, #8
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f000 ff71 	bl	800505c <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004180:	e00f      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	3328      	adds	r3, #40	; 0x28
 8004188:	2101      	movs	r1, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f818 	bl	80051c0 <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041aa:	4b96      	ldr	r3, [pc, #600]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	f023 0107 	bic.w	r1, r3, #7
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b8:	4a92      	ldr	r2, [pc, #584]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ba:	430b      	orrs	r3, r1
 80041bc:	6553      	str	r3, [r2, #84]	; 0x54
 80041be:	e003      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f002 0304 	and.w	r3, r2, #4
 80041d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4313      	orrs	r3, r2
 80041e6:	d044      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d825      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004215 	.word	0x08004215
 8004204:	0800422b 	.word	0x0800422b
 8004208:	08004249 	.word	0x08004249
 800420c:	08004249 	.word	0x08004249
 8004210:	08004249 	.word	0x08004249
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004218:	3308      	adds	r3, #8
 800421a:	2101      	movs	r1, #1
 800421c:	4618      	mov	r0, r3
 800421e:	f000 ff1d 	bl	800505c <RCCEx_PLL2_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004228:	e00f      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422e:	3328      	adds	r3, #40	; 0x28
 8004230:	2101      	movs	r1, #1
 8004232:	4618      	mov	r0, r3
 8004234:	f000 ffc4 	bl	80051c0 <RCCEx_PLL3_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004252:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	f023 0107 	bic.w	r1, r3, #7
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004262:	4a68      	ldr	r2, [pc, #416]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6593      	str	r3, [r2, #88]	; 0x58
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800426e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f002 0320 	and.w	r3, r2, #32
 800427e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004282:	2300      	movs	r3, #0
 8004284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800428c:	460b      	mov	r3, r1
 800428e:	4313      	orrs	r3, r2
 8004290:	d055      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800429e:	d033      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80042a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a4:	d82c      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d02f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d826      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042b6:	d02b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80042b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042bc:	d820      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c2:	d012      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80042c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c8:	d81a      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d022      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80042ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d2:	d115      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d8:	3308      	adds	r3, #8
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 febd 	bl	800505c <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042e8:	e015      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ee:	3328      	adds	r3, #40	; 0x28
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 ff64 	bl	80051c0 <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042fe:	e00a      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004306:	e006      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004308:	bf00      	nop
 800430a:	e004      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800430c:	bf00      	nop
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431e:	4b39      	ldr	r3, [pc, #228]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	4a35      	ldr	r2, [pc, #212]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6553      	str	r3, [r2, #84]	; 0x54
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800433a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800434a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004354:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d058      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800436a:	d033      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800436c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004370:	d82c      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d02f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d826      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800437e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004382:	d02b      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004388:	d820      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438e:	d012      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004394:	d81a      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d022      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d115      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a4:	3308      	adds	r3, #8
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fe57 	bl	800505c <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043b4:	e015      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ba:	3328      	adds	r3, #40	; 0x28
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fefe 	bl	80051c0 <RCCEx_PLL3_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043ca:	e00a      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043d2:	e006      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043d4:	bf00      	nop
 80043d6:	e004      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10e      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043fa:	4a02      	ldr	r2, [pc, #8]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004400:	e006      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800440c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800441c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004426:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d055      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004438:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800443c:	d033      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800443e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004442:	d82c      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	d02f      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800444a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444e:	d826      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004450:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004454:	d02b      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004456:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800445a:	d820      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800445c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004460:	d012      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004466:	d81a      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d022      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004470:	d115      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004476:	3308      	adds	r3, #8
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fdee 	bl	800505c <RCCEx_PLL2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004486:	e015      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448c:	3328      	adds	r3, #40	; 0x28
 800448e:	2102      	movs	r1, #2
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fe95 	bl	80051c0 <RCCEx_PLL3_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800449c:	e00a      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044a6:	bf00      	nop
 80044a8:	e004      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044bc:	4ba1      	ldr	r3, [pc, #644]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044cc:	4a9d      	ldr	r2, [pc, #628]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6593      	str	r3, [r2, #88]	; 0x58
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f002 0308 	and.w	r3, r2, #8
 80044e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d01e      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	d10c      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450e:	3328      	adds	r3, #40	; 0x28
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fe54 	bl	80051c0 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004524:	4b87      	ldr	r3, [pc, #540]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004534:	4a83      	ldr	r2, [pc, #524]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004536:	430b      	orrs	r3, r1
 8004538:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f002 0310 	and.w	r3, r2, #16
 8004546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800454a:	2300      	movs	r3, #0
 800454c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004550:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d01e      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800455e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004566:	d10c      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	3328      	adds	r3, #40	; 0x28
 800456e:	2102      	movs	r1, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fe25 	bl	80051c0 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004582:	4b70      	ldr	r3, [pc, #448]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004592:	4a6c      	ldr	r2, [pc, #432]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004594:	430b      	orrs	r3, r1
 8004596:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80045a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d03e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c4:	d022      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80045c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ca:	d81b      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d00b      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80045d6:	e015      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045dc:	3308      	adds	r3, #8
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fd3b 	bl	800505c <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045ec:	e00f      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f2:	3328      	adds	r3, #40	; 0x28
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fde2 	bl	80051c0 <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004602:	e004      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800460c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10b      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004616:	4b4b      	ldr	r3, [pc, #300]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004626:	4a47      	ldr	r2, [pc, #284]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004628:	430b      	orrs	r3, r1
 800462a:	6593      	str	r3, [r2, #88]	; 0x58
 800462c:	e003      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004642:	67bb      	str	r3, [r7, #120]	; 0x78
 8004644:	2300      	movs	r3, #0
 8004646:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004648:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800464c:	460b      	mov	r3, r1
 800464e:	4313      	orrs	r3, r2
 8004650:	d03b      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800465e:	d01f      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004664:	d818      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466a:	d003      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800466c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004670:	d007      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004672:	e011      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004674:	4b33      	ldr	r3, [pc, #204]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4a32      	ldr	r2, [pc, #200]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800467a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004680:	e00f      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004686:	3328      	adds	r3, #40	; 0x28
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fd98 	bl	80051c0 <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004696:	e004      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80046a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046aa:	4b26      	ldr	r3, [pc, #152]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046bc:	430b      	orrs	r3, r1
 80046be:	6553      	str	r3, [r2, #84]	; 0x54
 80046c0:	e003      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80046d6:	673b      	str	r3, [r7, #112]	; 0x70
 80046d8:	2300      	movs	r3, #0
 80046da:	677b      	str	r3, [r7, #116]	; 0x74
 80046dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d034      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f4:	d007      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80046f6:	e011      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4a11      	ldr	r2, [pc, #68]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004702:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004704:	e00e      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470a:	3308      	adds	r3, #8
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fca4 	bl	800505c <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10d      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473a:	4a02      	ldr	r2, [pc, #8]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800473c:	430b      	orrs	r3, r1
 800473e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004740:	e006      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004742:	bf00      	nop
 8004744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800474c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800475c:	66bb      	str	r3, [r7, #104]	; 0x68
 800475e:	2300      	movs	r3, #0
 8004760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004762:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004766:	460b      	mov	r3, r1
 8004768:	4313      	orrs	r3, r2
 800476a:	d00c      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004770:	3328      	adds	r3, #40	; 0x28
 8004772:	2102      	movs	r1, #2
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fd23 	bl	80051c0 <RCCEx_PLL3_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004792:	663b      	str	r3, [r7, #96]	; 0x60
 8004794:	2300      	movs	r3, #0
 8004796:	667b      	str	r3, [r7, #100]	; 0x64
 8004798:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d038      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ae:	d018      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80047b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b4:	d811      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ba:	d014      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c0:	d80b      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d011      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ca:	d106      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4bc3      	ldr	r3, [pc, #780]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4ac2      	ldr	r2, [pc, #776]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80047d8:	e008      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047e0:	e004      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047e2:	bf00      	nop
 80047e4:	e002      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f4:	4bb9      	ldr	r3, [pc, #740]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004804:	4ab5      	ldr	r2, [pc, #724]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004806:	430b      	orrs	r3, r1
 8004808:	6553      	str	r3, [r2, #84]	; 0x54
 800480a:	e003      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004820:	65bb      	str	r3, [r7, #88]	; 0x58
 8004822:	2300      	movs	r3, #0
 8004824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004826:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800482a:	460b      	mov	r3, r1
 800482c:	4313      	orrs	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004830:	4baa      	ldr	r3, [pc, #680]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	4aa7      	ldr	r2, [pc, #668]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004850:	653b      	str	r3, [r7, #80]	; 0x50
 8004852:	2300      	movs	r3, #0
 8004854:	657b      	str	r3, [r7, #84]	; 0x54
 8004856:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800485a:	460b      	mov	r3, r1
 800485c:	4313      	orrs	r3, r2
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004860:	4b9e      	ldr	r3, [pc, #632]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004870:	4a9a      	ldr	r2, [pc, #616]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004872:	430b      	orrs	r3, r1
 8004874:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004882:	64bb      	str	r3, [r7, #72]	; 0x48
 8004884:	2300      	movs	r3, #0
 8004886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004888:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d009      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004892:	4b92      	ldr	r3, [pc, #584]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a0:	4a8e      	ldr	r2, [pc, #568]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80048b2:	643b      	str	r3, [r7, #64]	; 0x40
 80048b4:	2300      	movs	r3, #0
 80048b6:	647b      	str	r3, [r7, #68]	; 0x44
 80048b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048c2:	4b86      	ldr	r3, [pc, #536]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	4a85      	ldr	r2, [pc, #532]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048cc:	6113      	str	r3, [r2, #16]
 80048ce:	4b83      	ldr	r3, [pc, #524]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d0:	6919      	ldr	r1, [r3, #16]
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048da:	4a80      	ldr	r2, [pc, #512]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048dc:	430b      	orrs	r3, r1
 80048de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ee:	2300      	movs	r3, #0
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048fc:	4b77      	ldr	r3, [pc, #476]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004900:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	4a74      	ldr	r2, [pc, #464]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490c:	430b      	orrs	r3, r1
 800490e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800491c:	633b      	str	r3, [r7, #48]	; 0x30
 800491e:	2300      	movs	r3, #0
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
 8004922:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800492c:	4b6b      	ldr	r3, [pc, #428]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493c:	4a67      	ldr	r2, [pc, #412]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493e:	430b      	orrs	r3, r1
 8004940:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	2100      	movs	r1, #0
 800494c:	62b9      	str	r1, [r7, #40]	; 0x28
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004954:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d011      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004962:	3308      	adds	r3, #8
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fb78 	bl	800505c <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800497e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	2100      	movs	r1, #0
 800498c:	6239      	str	r1, [r7, #32]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
 8004994:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d011      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a2:	3308      	adds	r3, #8
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fb58 	bl	800505c <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	2100      	movs	r1, #0
 80049cc:	61b9      	str	r1, [r7, #24]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049d8:	460b      	mov	r3, r1
 80049da:	4313      	orrs	r3, r2
 80049dc:	d011      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e2:	3308      	adds	r3, #8
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fb38 	bl	800505c <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6139      	str	r1, [r7, #16]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	d011      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a22:	3328      	adds	r3, #40	; 0x28
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fbca 	bl	80051c0 <RCCEx_PLL3_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	d011      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a62:	3328      	adds	r3, #40	; 0x28
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fbaa 	bl	80051c0 <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	d011      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa2:	3328      	adds	r3, #40	; 0x28
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fb8a 	bl	80051c0 <RCCEx_PLL3_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004abe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004ac2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004adc:	58024400 	.word	0x58024400

08004ae0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ae4:	f7fe fd54 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4904      	ldr	r1, [pc, #16]	; (8004b08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	58024400 	.word	0x58024400
 8004b08:	0800a150 	.word	0x0800a150

08004b0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b14:	4ba1      	ldr	r3, [pc, #644]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b1e:	4b9f      	ldr	r3, [pc, #636]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	0b1b      	lsrs	r3, r3, #12
 8004b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b2a:	4b9c      	ldr	r3, [pc, #624]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b36:	4b99      	ldr	r3, [pc, #612]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	08db      	lsrs	r3, r3, #3
 8004b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8111 	beq.w	8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	f000 8083 	beq.w	8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	f200 80a1 	bhi.w	8004cac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d056      	beq.n	8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b76:	e099      	b.n	8004cac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b78:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02d      	beq.n	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b84:	4b85      	ldr	r3, [pc, #532]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	08db      	lsrs	r3, r3, #3
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	4a84      	ldr	r2, [pc, #528]	; (8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
 8004b94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bae:	4b7b      	ldr	r3, [pc, #492]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bde:	e087      	b.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c22:	e065      	b.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c36:	4b59      	ldr	r3, [pc, #356]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c66:	e043      	b.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b48      	ldr	r3, [pc, #288]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004caa:	e021      	b.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	4b37      	ldr	r3, [pc, #220]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	0a5b      	lsrs	r3, r3, #9
 8004cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d16:	ee17 2a90 	vmov	r2, s15
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d1e:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d44:	ee17 2a90 	vmov	r2, s15
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d4c:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	0e1b      	lsrs	r3, r3, #24
 8004d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d72:	ee17 2a90 	vmov	r2, s15
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d7a:	e008      	b.n	8004d8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	609a      	str	r2, [r3, #8]
}
 8004d8e:	bf00      	nop
 8004d90:	3724      	adds	r7, #36	; 0x24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	03d09000 	.word	0x03d09000
 8004da4:	46000000 	.word	0x46000000
 8004da8:	4c742400 	.word	0x4c742400
 8004dac:	4a742400 	.word	0x4a742400
 8004db0:	4af42400 	.word	0x4af42400

08004db4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dbc:	4ba1      	ldr	r3, [pc, #644]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004dc6:	4b9f      	ldr	r3, [pc, #636]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	0d1b      	lsrs	r3, r3, #20
 8004dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dd2:	4b9c      	ldr	r3, [pc, #624]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004dde:	4b99      	ldr	r3, [pc, #612]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	08db      	lsrs	r3, r3, #3
 8004de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8111 	beq.w	8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	f000 8083 	beq.w	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	f200 80a1 	bhi.w	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d056      	beq.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e1e:	e099      	b.n	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e20:	4b88      	ldr	r3, [pc, #544]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d02d      	beq.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e2c:	4b85      	ldr	r3, [pc, #532]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	08db      	lsrs	r3, r3, #3
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	4a84      	ldr	r2, [pc, #528]	; (8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e56:	4b7b      	ldr	r3, [pc, #492]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e86:	e087      	b.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eca:	e065      	b.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ede:	4b59      	ldr	r3, [pc, #356]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f0e:	e043      	b.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b48      	ldr	r3, [pc, #288]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f36:	eddf 5a45 	vldr	s11, [pc, #276]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f52:	e021      	b.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b37      	ldr	r3, [pc, #220]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f98:	4b2a      	ldr	r3, [pc, #168]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	0a5b      	lsrs	r3, r3, #9
 8004f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fbe:	ee17 2a90 	vmov	r2, s15
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004fc6:	4b1f      	ldr	r3, [pc, #124]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd0:	ee07 3a90 	vmov	s15, r3
 8004fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fec:	ee17 2a90 	vmov	r2, s15
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ff4:	4b13      	ldr	r3, [pc, #76]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	0e1b      	lsrs	r3, r3, #24
 8004ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800500a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800500e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501a:	ee17 2a90 	vmov	r2, s15
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005022:	e008      	b.n	8005036 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	609a      	str	r2, [r3, #8]
}
 8005036:	bf00      	nop
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
 8005048:	03d09000 	.word	0x03d09000
 800504c:	46000000 	.word	0x46000000
 8005050:	4c742400 	.word	0x4c742400
 8005054:	4a742400 	.word	0x4a742400
 8005058:	4af42400 	.word	0x4af42400

0800505c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800506a:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b03      	cmp	r3, #3
 8005074:	d101      	bne.n	800507a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e099      	b.n	80051ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800507a:	4b4f      	ldr	r3, [pc, #316]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4e      	ldr	r2, [pc, #312]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005080:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005086:	f7fc fa49 	bl	800151c <HAL_GetTick>
 800508a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800508c:	e008      	b.n	80050a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800508e:	f7fc fa45 	bl	800151c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e086      	b.n	80051ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050a0:	4b45      	ldr	r3, [pc, #276]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050ac:	4b42      	ldr	r3, [pc, #264]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	493f      	ldr	r1, [pc, #252]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	628b      	str	r3, [r1, #40]	; 0x28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050f0:	4931      	ldr	r1, [pc, #196]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050f6:	4b30      	ldr	r3, [pc, #192]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	492d      	ldr	r1, [pc, #180]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005108:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f023 0220 	bic.w	r2, r3, #32
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	4928      	ldr	r1, [pc, #160]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800511a:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005120:	f023 0310 	bic.w	r3, r3, #16
 8005124:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <RCCEx_PLL2_Config+0x160>)
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	69d2      	ldr	r2, [r2, #28]
 8005132:	00d2      	lsls	r2, r2, #3
 8005134:	4920      	ldr	r1, [pc, #128]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005140:	f043 0310 	orr.w	r3, r3, #16
 8005144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800514c:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005152:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005156:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005158:	e00f      	b.n	800517a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800516a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800516c:	e005      	b.n	800517a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	4a11      	ldr	r2, [pc, #68]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005178:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a0e      	ldr	r2, [pc, #56]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 8005180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005186:	f7fc f9c9 	bl	800151c <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800518c:	e008      	b.n	80051a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800518e:	f7fc f9c5 	bl	800151c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e006      	b.n	80051ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <RCCEx_PLL2_Config+0x15c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	58024400 	.word	0x58024400
 80051bc:	ffff0007 	.word	0xffff0007

080051c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ce:	4b53      	ldr	r3, [pc, #332]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d101      	bne.n	80051de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e099      	b.n	8005312 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051de:	4b4f      	ldr	r3, [pc, #316]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a4e      	ldr	r2, [pc, #312]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80051e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ea:	f7fc f997 	bl	800151c <HAL_GetTick>
 80051ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051f0:	e008      	b.n	8005204 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051f2:	f7fc f993 	bl	800151c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e086      	b.n	8005312 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005204:	4b45      	ldr	r3, [pc, #276]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005210:	4b42      	ldr	r3, [pc, #264]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	051b      	lsls	r3, r3, #20
 800521e:	493f      	ldr	r1, [pc, #252]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	628b      	str	r3, [r1, #40]	; 0x28
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	3b01      	subs	r3, #1
 800522a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	3b01      	subs	r3, #1
 8005234:	025b      	lsls	r3, r3, #9
 8005236:	b29b      	uxth	r3, r3
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	3b01      	subs	r3, #1
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	3b01      	subs	r3, #1
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005254:	4931      	ldr	r1, [pc, #196]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 8005256:	4313      	orrs	r3, r2
 8005258:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800525a:	4b30      	ldr	r3, [pc, #192]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	492d      	ldr	r1, [pc, #180]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 8005268:	4313      	orrs	r3, r2
 800526a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800526c:	4b2b      	ldr	r3, [pc, #172]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	4928      	ldr	r1, [pc, #160]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 800527a:	4313      	orrs	r3, r2
 800527c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800527e:	4b27      	ldr	r3, [pc, #156]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	4a26      	ldr	r2, [pc, #152]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 8005284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 800528c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528e:	4b24      	ldr	r3, [pc, #144]	; (8005320 <RCCEx_PLL3_Config+0x160>)
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	69d2      	ldr	r2, [r2, #28]
 8005296:	00d2      	lsls	r2, r2, #3
 8005298:	4920      	ldr	r1, [pc, #128]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800529e:	4b1f      	ldr	r3, [pc, #124]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	4a1e      	ldr	r2, [pc, #120]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052b0:	4b1a      	ldr	r3, [pc, #104]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052bc:	e00f      	b.n	80052de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d106      	bne.n	80052d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052c4:	4b15      	ldr	r3, [pc, #84]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	4a14      	ldr	r2, [pc, #80]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052d0:	e005      	b.n	80052de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052d2:	4b12      	ldr	r3, [pc, #72]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	4a11      	ldr	r2, [pc, #68]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a0e      	ldr	r2, [pc, #56]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 80052e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ea:	f7fc f917 	bl	800151c <HAL_GetTick>
 80052ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052f0:	e008      	b.n	8005304 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052f2:	f7fc f913 	bl	800151c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e006      	b.n	8005312 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <RCCEx_PLL3_Config+0x15c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
 8005320:	ffff0007 	.word	0xffff0007

08005324 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e10f      	b.n	8005556 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a87      	ldr	r2, [pc, #540]	; (8005560 <HAL_SPI_Init+0x23c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00f      	beq.n	8005366 <HAL_SPI_Init+0x42>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a86      	ldr	r2, [pc, #536]	; (8005564 <HAL_SPI_Init+0x240>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00a      	beq.n	8005366 <HAL_SPI_Init+0x42>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a84      	ldr	r2, [pc, #528]	; (8005568 <HAL_SPI_Init+0x244>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d005      	beq.n	8005366 <HAL_SPI_Init+0x42>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b0f      	cmp	r3, #15
 8005360:	d901      	bls.n	8005366 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e0f7      	b.n	8005556 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f900 	bl	800556c <SPI_GetPacketSize>
 800536c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a7b      	ldr	r2, [pc, #492]	; (8005560 <HAL_SPI_Init+0x23c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00c      	beq.n	8005392 <HAL_SPI_Init+0x6e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a79      	ldr	r2, [pc, #484]	; (8005564 <HAL_SPI_Init+0x240>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <HAL_SPI_Init+0x6e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a78      	ldr	r2, [pc, #480]	; (8005568 <HAL_SPI_Init+0x244>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d002      	beq.n	8005392 <HAL_SPI_Init+0x6e>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b08      	cmp	r3, #8
 8005390:	d811      	bhi.n	80053b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005396:	4a72      	ldr	r2, [pc, #456]	; (8005560 <HAL_SPI_Init+0x23c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a70      	ldr	r2, [pc, #448]	; (8005564 <HAL_SPI_Init+0x240>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_SPI_Init+0x8c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6f      	ldr	r2, [pc, #444]	; (8005568 <HAL_SPI_Init+0x244>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d104      	bne.n	80053ba <HAL_SPI_Init+0x96>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d901      	bls.n	80053ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e0cd      	b.n	8005556 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fb fda2 	bl	8000f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80053f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005400:	d119      	bne.n	8005436 <HAL_SPI_Init+0x112>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540a:	d103      	bne.n	8005414 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10c      	bne.n	8005436 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005424:	d107      	bne.n	8005436 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005434:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00f      	beq.n	8005462 <HAL_SPI_Init+0x13e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b06      	cmp	r3, #6
 8005448:	d90b      	bls.n	8005462 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	e007      	b.n	8005472 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005470:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	431a      	orrs	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	ea42 0103 	orr.w	r1, r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d2:	ea42 0103 	orr.w	r1, r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d113      	bne.n	8005512 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005510:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40013000 	.word	0x40013000
 8005564:	40003800 	.word	0x40003800
 8005568:	40003c00 	.word	0x40003c00

0800556c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	3301      	adds	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	3301      	adds	r3, #1
 8005584:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	3307      	adds	r3, #7
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	fb02 f303 	mul.w	r3, r2, r3
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e049      	b.n	8005648 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f841 	bl	8005650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f000 f9ff 	bl	80059e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	d001      	beq.n	800567c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e054      	b.n	8005726 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a26      	ldr	r2, [pc, #152]	; (8005734 <HAL_TIM_Base_Start_IT+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d022      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x80>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d01d      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x80>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a22      	ldr	r2, [pc, #136]	; (8005738 <HAL_TIM_Base_Start_IT+0xd4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x80>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_TIM_Base_Start_IT+0xd8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x80>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <HAL_TIM_Base_Start_IT+0xdc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x80>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_TIM_Base_Start_IT+0xe0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x80>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <HAL_TIM_Base_Start_IT+0xe4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x80>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HAL_TIM_Base_Start_IT+0xe8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d115      	bne.n	8005710 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_TIM_Base_Start_IT+0xec>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d015      	beq.n	8005722 <HAL_TIM_Base_Start_IT+0xbe>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d011      	beq.n	8005722 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0201 	orr.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	e008      	b.n	8005722 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e000      	b.n	8005724 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005722:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40010400 	.word	0x40010400
 8005748:	40001800 	.word	0x40001800
 800574c:	40014000 	.word	0x40014000
 8005750:	00010007 	.word	0x00010007

08005754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b02      	cmp	r3, #2
 8005768:	d122      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b02      	cmp	r3, #2
 8005776:	d11b      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0202 	mvn.w	r2, #2
 8005780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f905 	bl	80059a6 <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f8f7 	bl	8005992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f908 	bl	80059ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d122      	bne.n	8005804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d11b      	bne.n	8005804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0204 	mvn.w	r2, #4
 80057d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8db 	bl	80059a6 <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f8cd 	bl	8005992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f8de 	bl	80059ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b08      	cmp	r3, #8
 8005810:	d122      	bne.n	8005858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d11b      	bne.n	8005858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0208 	mvn.w	r2, #8
 8005828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2204      	movs	r2, #4
 800582e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f8b1 	bl	80059a6 <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f8a3 	bl	8005992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f8b4 	bl	80059ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b10      	cmp	r3, #16
 8005864:	d122      	bne.n	80058ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b10      	cmp	r3, #16
 8005872:	d11b      	bne.n	80058ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0210 	mvn.w	r2, #16
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2208      	movs	r2, #8
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f887 	bl	80059a6 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f879 	bl	8005992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f88a 	bl	80059ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10e      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d107      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0201 	mvn.w	r2, #1
 80058d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fb fa1c 	bl	8000d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d10e      	bne.n	8005904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d107      	bne.n	8005904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f914 	bl	8005b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	d10e      	bne.n	8005932 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d107      	bne.n	8005932 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f907 	bl	8005b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d10e      	bne.n	800595e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d107      	bne.n	800595e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f838 	bl	80059ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b20      	cmp	r3, #32
 800596a:	d10e      	bne.n	800598a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b20      	cmp	r3, #32
 8005978:	d107      	bne.n	800598a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f06f 0220 	mvn.w	r2, #32
 8005982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8c7 	bl	8005b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a40      	ldr	r2, [pc, #256]	; (8005af8 <TIM_Base_SetConfig+0x114>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a02:	d00f      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3d      	ldr	r2, [pc, #244]	; (8005afc <TIM_Base_SetConfig+0x118>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <TIM_Base_SetConfig+0x11c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3b      	ldr	r2, [pc, #236]	; (8005b04 <TIM_Base_SetConfig+0x120>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a3a      	ldr	r2, [pc, #232]	; (8005b08 <TIM_Base_SetConfig+0x124>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d108      	bne.n	8005a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <TIM_Base_SetConfig+0x114>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01f      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a44:	d01b      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2c      	ldr	r2, [pc, #176]	; (8005afc <TIM_Base_SetConfig+0x118>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d017      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <TIM_Base_SetConfig+0x11c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2a      	ldr	r2, [pc, #168]	; (8005b04 <TIM_Base_SetConfig+0x120>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00f      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a29      	ldr	r2, [pc, #164]	; (8005b08 <TIM_Base_SetConfig+0x124>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <TIM_Base_SetConfig+0x128>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <TIM_Base_SetConfig+0x12c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <TIM_Base_SetConfig+0x130>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a10      	ldr	r2, [pc, #64]	; (8005af8 <TIM_Base_SetConfig+0x114>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00f      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <TIM_Base_SetConfig+0x124>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <TIM_Base_SetConfig+0x128>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a10      	ldr	r2, [pc, #64]	; (8005b10 <TIM_Base_SetConfig+0x12c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a0f      	ldr	r2, [pc, #60]	; (8005b14 <TIM_Base_SetConfig+0x130>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d103      	bne.n	8005ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	615a      	str	r2, [r3, #20]
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40010400 	.word	0x40010400
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	40014400 	.word	0x40014400
 8005b14:	40014800 	.word	0x40014800

08005b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e042      	b.n	8005bec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fb fa5b 	bl	8001034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2224      	movs	r2, #36	; 0x24
 8005b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f82c 	bl	8005bf4 <UART_SetConfig>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e022      	b.n	8005bec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fd88 	bl	80066c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fe0f 	bl	8006808 <UART_CheckIdleState>
 8005bea:	4603      	mov	r3, r0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf8:	b092      	sub	sp, #72	; 0x48
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4bbe      	ldr	r3, [pc, #760]	; (8005f1c <UART_SetConfig+0x328>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4ab3      	ldr	r2, [pc, #716]	; (8005f20 <UART_SetConfig+0x32c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	4baf      	ldr	r3, [pc, #700]	; (8005f24 <UART_SetConfig+0x330>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	f023 010f 	bic.w	r1, r3, #15
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4aa6      	ldr	r2, [pc, #664]	; (8005f28 <UART_SetConfig+0x334>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d177      	bne.n	8005d84 <UART_SetConfig+0x190>
 8005c94:	4ba5      	ldr	r3, [pc, #660]	; (8005f2c <UART_SetConfig+0x338>)
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c9c:	2b28      	cmp	r3, #40	; 0x28
 8005c9e:	d86d      	bhi.n	8005d7c <UART_SetConfig+0x188>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0xb4>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005d4d 	.word	0x08005d4d
 8005cac:	08005d7d 	.word	0x08005d7d
 8005cb0:	08005d7d 	.word	0x08005d7d
 8005cb4:	08005d7d 	.word	0x08005d7d
 8005cb8:	08005d7d 	.word	0x08005d7d
 8005cbc:	08005d7d 	.word	0x08005d7d
 8005cc0:	08005d7d 	.word	0x08005d7d
 8005cc4:	08005d7d 	.word	0x08005d7d
 8005cc8:	08005d55 	.word	0x08005d55
 8005ccc:	08005d7d 	.word	0x08005d7d
 8005cd0:	08005d7d 	.word	0x08005d7d
 8005cd4:	08005d7d 	.word	0x08005d7d
 8005cd8:	08005d7d 	.word	0x08005d7d
 8005cdc:	08005d7d 	.word	0x08005d7d
 8005ce0:	08005d7d 	.word	0x08005d7d
 8005ce4:	08005d7d 	.word	0x08005d7d
 8005ce8:	08005d5d 	.word	0x08005d5d
 8005cec:	08005d7d 	.word	0x08005d7d
 8005cf0:	08005d7d 	.word	0x08005d7d
 8005cf4:	08005d7d 	.word	0x08005d7d
 8005cf8:	08005d7d 	.word	0x08005d7d
 8005cfc:	08005d7d 	.word	0x08005d7d
 8005d00:	08005d7d 	.word	0x08005d7d
 8005d04:	08005d7d 	.word	0x08005d7d
 8005d08:	08005d65 	.word	0x08005d65
 8005d0c:	08005d7d 	.word	0x08005d7d
 8005d10:	08005d7d 	.word	0x08005d7d
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005d7d 	.word	0x08005d7d
 8005d1c:	08005d7d 	.word	0x08005d7d
 8005d20:	08005d7d 	.word	0x08005d7d
 8005d24:	08005d7d 	.word	0x08005d7d
 8005d28:	08005d6d 	.word	0x08005d6d
 8005d2c:	08005d7d 	.word	0x08005d7d
 8005d30:	08005d7d 	.word	0x08005d7d
 8005d34:	08005d7d 	.word	0x08005d7d
 8005d38:	08005d7d 	.word	0x08005d7d
 8005d3c:	08005d7d 	.word	0x08005d7d
 8005d40:	08005d7d 	.word	0x08005d7d
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d52:	e222      	b.n	800619a <UART_SetConfig+0x5a6>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5a:	e21e      	b.n	800619a <UART_SetConfig+0x5a6>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d62:	e21a      	b.n	800619a <UART_SetConfig+0x5a6>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6a:	e216      	b.n	800619a <UART_SetConfig+0x5a6>
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d72:	e212      	b.n	800619a <UART_SetConfig+0x5a6>
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e20e      	b.n	800619a <UART_SetConfig+0x5a6>
 8005d7c:	2380      	movs	r3, #128	; 0x80
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e20a      	b.n	800619a <UART_SetConfig+0x5a6>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a69      	ldr	r2, [pc, #420]	; (8005f30 <UART_SetConfig+0x33c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d130      	bne.n	8005df0 <UART_SetConfig+0x1fc>
 8005d8e:	4b67      	ldr	r3, [pc, #412]	; (8005f2c <UART_SetConfig+0x338>)
 8005d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d826      	bhi.n	8005de8 <UART_SetConfig+0x1f4>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <UART_SetConfig+0x1ac>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005db9 	.word	0x08005db9
 8005da4:	08005dc1 	.word	0x08005dc1
 8005da8:	08005dc9 	.word	0x08005dc9
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005de1 	.word	0x08005de1
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dbe:	e1ec      	b.n	800619a <UART_SetConfig+0x5a6>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc6:	e1e8      	b.n	800619a <UART_SetConfig+0x5a6>
 8005dc8:	2308      	movs	r3, #8
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dce:	e1e4      	b.n	800619a <UART_SetConfig+0x5a6>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd6:	e1e0      	b.n	800619a <UART_SetConfig+0x5a6>
 8005dd8:	2320      	movs	r3, #32
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dde:	e1dc      	b.n	800619a <UART_SetConfig+0x5a6>
 8005de0:	2340      	movs	r3, #64	; 0x40
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e1d8      	b.n	800619a <UART_SetConfig+0x5a6>
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e1d4      	b.n	800619a <UART_SetConfig+0x5a6>
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a4f      	ldr	r2, [pc, #316]	; (8005f34 <UART_SetConfig+0x340>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d130      	bne.n	8005e5c <UART_SetConfig+0x268>
 8005dfa:	4b4c      	ldr	r3, [pc, #304]	; (8005f2c <UART_SetConfig+0x338>)
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	d826      	bhi.n	8005e54 <UART_SetConfig+0x260>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <UART_SetConfig+0x218>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e25 	.word	0x08005e25
 8005e10:	08005e2d 	.word	0x08005e2d
 8005e14:	08005e35 	.word	0x08005e35
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e45 	.word	0x08005e45
 8005e20:	08005e4d 	.word	0x08005e4d
 8005e24:	2300      	movs	r3, #0
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2a:	e1b6      	b.n	800619a <UART_SetConfig+0x5a6>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e32:	e1b2      	b.n	800619a <UART_SetConfig+0x5a6>
 8005e34:	2308      	movs	r3, #8
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3a:	e1ae      	b.n	800619a <UART_SetConfig+0x5a6>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e42:	e1aa      	b.n	800619a <UART_SetConfig+0x5a6>
 8005e44:	2320      	movs	r3, #32
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4a:	e1a6      	b.n	800619a <UART_SetConfig+0x5a6>
 8005e4c:	2340      	movs	r3, #64	; 0x40
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e52:	e1a2      	b.n	800619a <UART_SetConfig+0x5a6>
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e19e      	b.n	800619a <UART_SetConfig+0x5a6>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a35      	ldr	r2, [pc, #212]	; (8005f38 <UART_SetConfig+0x344>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d130      	bne.n	8005ec8 <UART_SetConfig+0x2d4>
 8005e66:	4b31      	ldr	r3, [pc, #196]	; (8005f2c <UART_SetConfig+0x338>)
 8005e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	2b05      	cmp	r3, #5
 8005e70:	d826      	bhi.n	8005ec0 <UART_SetConfig+0x2cc>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <UART_SetConfig+0x284>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e91 	.word	0x08005e91
 8005e7c:	08005e99 	.word	0x08005e99
 8005e80:	08005ea1 	.word	0x08005ea1
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005eb1 	.word	0x08005eb1
 8005e8c:	08005eb9 	.word	0x08005eb9
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e96:	e180      	b.n	800619a <UART_SetConfig+0x5a6>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9e:	e17c      	b.n	800619a <UART_SetConfig+0x5a6>
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea6:	e178      	b.n	800619a <UART_SetConfig+0x5a6>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eae:	e174      	b.n	800619a <UART_SetConfig+0x5a6>
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb6:	e170      	b.n	800619a <UART_SetConfig+0x5a6>
 8005eb8:	2340      	movs	r3, #64	; 0x40
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ebe:	e16c      	b.n	800619a <UART_SetConfig+0x5a6>
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e168      	b.n	800619a <UART_SetConfig+0x5a6>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1b      	ldr	r2, [pc, #108]	; (8005f3c <UART_SetConfig+0x348>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d142      	bne.n	8005f58 <UART_SetConfig+0x364>
 8005ed2:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <UART_SetConfig+0x338>)
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b05      	cmp	r3, #5
 8005edc:	d838      	bhi.n	8005f50 <UART_SetConfig+0x35c>
 8005ede:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <UART_SetConfig+0x2f0>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005efd 	.word	0x08005efd
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	08005f0d 	.word	0x08005f0d
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f41 	.word	0x08005f41
 8005ef8:	08005f49 	.word	0x08005f49
 8005efc:	2300      	movs	r3, #0
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e14a      	b.n	800619a <UART_SetConfig+0x5a6>
 8005f04:	2304      	movs	r3, #4
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e146      	b.n	800619a <UART_SetConfig+0x5a6>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f12:	e142      	b.n	800619a <UART_SetConfig+0x5a6>
 8005f14:	2310      	movs	r3, #16
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e13e      	b.n	800619a <UART_SetConfig+0x5a6>
 8005f1c:	cfff69f3 	.word	0xcfff69f3
 8005f20:	58000c00 	.word	0x58000c00
 8005f24:	11fff4ff 	.word	0x11fff4ff
 8005f28:	40011000 	.word	0x40011000
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	40004400 	.word	0x40004400
 8005f34:	40004800 	.word	0x40004800
 8005f38:	40004c00 	.word	0x40004c00
 8005f3c:	40005000 	.word	0x40005000
 8005f40:	2320      	movs	r3, #32
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e128      	b.n	800619a <UART_SetConfig+0x5a6>
 8005f48:	2340      	movs	r3, #64	; 0x40
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4e:	e124      	b.n	800619a <UART_SetConfig+0x5a6>
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f56:	e120      	b.n	800619a <UART_SetConfig+0x5a6>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4acb      	ldr	r2, [pc, #812]	; (800628c <UART_SetConfig+0x698>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d176      	bne.n	8006050 <UART_SetConfig+0x45c>
 8005f62:	4bcb      	ldr	r3, [pc, #812]	; (8006290 <UART_SetConfig+0x69c>)
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f6a:	2b28      	cmp	r3, #40	; 0x28
 8005f6c:	d86c      	bhi.n	8006048 <UART_SetConfig+0x454>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <UART_SetConfig+0x380>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08006019 	.word	0x08006019
 8005f78:	08006049 	.word	0x08006049
 8005f7c:	08006049 	.word	0x08006049
 8005f80:	08006049 	.word	0x08006049
 8005f84:	08006049 	.word	0x08006049
 8005f88:	08006049 	.word	0x08006049
 8005f8c:	08006049 	.word	0x08006049
 8005f90:	08006049 	.word	0x08006049
 8005f94:	08006021 	.word	0x08006021
 8005f98:	08006049 	.word	0x08006049
 8005f9c:	08006049 	.word	0x08006049
 8005fa0:	08006049 	.word	0x08006049
 8005fa4:	08006049 	.word	0x08006049
 8005fa8:	08006049 	.word	0x08006049
 8005fac:	08006049 	.word	0x08006049
 8005fb0:	08006049 	.word	0x08006049
 8005fb4:	08006029 	.word	0x08006029
 8005fb8:	08006049 	.word	0x08006049
 8005fbc:	08006049 	.word	0x08006049
 8005fc0:	08006049 	.word	0x08006049
 8005fc4:	08006049 	.word	0x08006049
 8005fc8:	08006049 	.word	0x08006049
 8005fcc:	08006049 	.word	0x08006049
 8005fd0:	08006049 	.word	0x08006049
 8005fd4:	08006031 	.word	0x08006031
 8005fd8:	08006049 	.word	0x08006049
 8005fdc:	08006049 	.word	0x08006049
 8005fe0:	08006049 	.word	0x08006049
 8005fe4:	08006049 	.word	0x08006049
 8005fe8:	08006049 	.word	0x08006049
 8005fec:	08006049 	.word	0x08006049
 8005ff0:	08006049 	.word	0x08006049
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	08006049 	.word	0x08006049
 8005ffc:	08006049 	.word	0x08006049
 8006000:	08006049 	.word	0x08006049
 8006004:	08006049 	.word	0x08006049
 8006008:	08006049 	.word	0x08006049
 800600c:	08006049 	.word	0x08006049
 8006010:	08006049 	.word	0x08006049
 8006014:	08006041 	.word	0x08006041
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601e:	e0bc      	b.n	800619a <UART_SetConfig+0x5a6>
 8006020:	2304      	movs	r3, #4
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006026:	e0b8      	b.n	800619a <UART_SetConfig+0x5a6>
 8006028:	2308      	movs	r3, #8
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e0b4      	b.n	800619a <UART_SetConfig+0x5a6>
 8006030:	2310      	movs	r3, #16
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e0b0      	b.n	800619a <UART_SetConfig+0x5a6>
 8006038:	2320      	movs	r3, #32
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e0ac      	b.n	800619a <UART_SetConfig+0x5a6>
 8006040:	2340      	movs	r3, #64	; 0x40
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e0a8      	b.n	800619a <UART_SetConfig+0x5a6>
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e0a4      	b.n	800619a <UART_SetConfig+0x5a6>
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a8f      	ldr	r2, [pc, #572]	; (8006294 <UART_SetConfig+0x6a0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d130      	bne.n	80060bc <UART_SetConfig+0x4c8>
 800605a:	4b8d      	ldr	r3, [pc, #564]	; (8006290 <UART_SetConfig+0x69c>)
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	2b05      	cmp	r3, #5
 8006064:	d826      	bhi.n	80060b4 <UART_SetConfig+0x4c0>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <UART_SetConfig+0x478>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08006085 	.word	0x08006085
 8006070:	0800608d 	.word	0x0800608d
 8006074:	08006095 	.word	0x08006095
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060ad 	.word	0x080060ad
 8006084:	2300      	movs	r3, #0
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e086      	b.n	800619a <UART_SetConfig+0x5a6>
 800608c:	2304      	movs	r3, #4
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e082      	b.n	800619a <UART_SetConfig+0x5a6>
 8006094:	2308      	movs	r3, #8
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e07e      	b.n	800619a <UART_SetConfig+0x5a6>
 800609c:	2310      	movs	r3, #16
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e07a      	b.n	800619a <UART_SetConfig+0x5a6>
 80060a4:	2320      	movs	r3, #32
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e076      	b.n	800619a <UART_SetConfig+0x5a6>
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e072      	b.n	800619a <UART_SetConfig+0x5a6>
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e06e      	b.n	800619a <UART_SetConfig+0x5a6>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a75      	ldr	r2, [pc, #468]	; (8006298 <UART_SetConfig+0x6a4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d130      	bne.n	8006128 <UART_SetConfig+0x534>
 80060c6:	4b72      	ldr	r3, [pc, #456]	; (8006290 <UART_SetConfig+0x69c>)
 80060c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d826      	bhi.n	8006120 <UART_SetConfig+0x52c>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x4e4>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060f1 	.word	0x080060f1
 80060dc:	080060f9 	.word	0x080060f9
 80060e0:	08006101 	.word	0x08006101
 80060e4:	08006109 	.word	0x08006109
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006119 	.word	0x08006119
 80060f0:	2300      	movs	r3, #0
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e050      	b.n	800619a <UART_SetConfig+0x5a6>
 80060f8:	2304      	movs	r3, #4
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fe:	e04c      	b.n	800619a <UART_SetConfig+0x5a6>
 8006100:	2308      	movs	r3, #8
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006106:	e048      	b.n	800619a <UART_SetConfig+0x5a6>
 8006108:	2310      	movs	r3, #16
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610e:	e044      	b.n	800619a <UART_SetConfig+0x5a6>
 8006110:	2320      	movs	r3, #32
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006116:	e040      	b.n	800619a <UART_SetConfig+0x5a6>
 8006118:	2340      	movs	r3, #64	; 0x40
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611e:	e03c      	b.n	800619a <UART_SetConfig+0x5a6>
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e038      	b.n	800619a <UART_SetConfig+0x5a6>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a5b      	ldr	r2, [pc, #364]	; (800629c <UART_SetConfig+0x6a8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d130      	bne.n	8006194 <UART_SetConfig+0x5a0>
 8006132:	4b57      	ldr	r3, [pc, #348]	; (8006290 <UART_SetConfig+0x69c>)
 8006134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b05      	cmp	r3, #5
 800613c:	d826      	bhi.n	800618c <UART_SetConfig+0x598>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0x550>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	0800615d 	.word	0x0800615d
 8006148:	08006165 	.word	0x08006165
 800614c:	0800616d 	.word	0x0800616d
 8006150:	08006175 	.word	0x08006175
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006185 	.word	0x08006185
 800615c:	2302      	movs	r3, #2
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006162:	e01a      	b.n	800619a <UART_SetConfig+0x5a6>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616a:	e016      	b.n	800619a <UART_SetConfig+0x5a6>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006172:	e012      	b.n	800619a <UART_SetConfig+0x5a6>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617a:	e00e      	b.n	800619a <UART_SetConfig+0x5a6>
 800617c:	2320      	movs	r3, #32
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006182:	e00a      	b.n	800619a <UART_SetConfig+0x5a6>
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618a:	e006      	b.n	800619a <UART_SetConfig+0x5a6>
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006192:	e002      	b.n	800619a <UART_SetConfig+0x5a6>
 8006194:	2380      	movs	r3, #128	; 0x80
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a3f      	ldr	r2, [pc, #252]	; (800629c <UART_SetConfig+0x6a8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	f040 80f8 	bne.w	8006396 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	dc46      	bgt.n	800623c <UART_SetConfig+0x648>
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	f2c0 8082 	blt.w	80062b8 <UART_SetConfig+0x6c4>
 80061b4:	3b02      	subs	r3, #2
 80061b6:	2b1e      	cmp	r3, #30
 80061b8:	d87e      	bhi.n	80062b8 <UART_SetConfig+0x6c4>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x5cc>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	08006243 	.word	0x08006243
 80061c4:	080062b9 	.word	0x080062b9
 80061c8:	0800624b 	.word	0x0800624b
 80061cc:	080062b9 	.word	0x080062b9
 80061d0:	080062b9 	.word	0x080062b9
 80061d4:	080062b9 	.word	0x080062b9
 80061d8:	0800625b 	.word	0x0800625b
 80061dc:	080062b9 	.word	0x080062b9
 80061e0:	080062b9 	.word	0x080062b9
 80061e4:	080062b9 	.word	0x080062b9
 80061e8:	080062b9 	.word	0x080062b9
 80061ec:	080062b9 	.word	0x080062b9
 80061f0:	080062b9 	.word	0x080062b9
 80061f4:	080062b9 	.word	0x080062b9
 80061f8:	0800626b 	.word	0x0800626b
 80061fc:	080062b9 	.word	0x080062b9
 8006200:	080062b9 	.word	0x080062b9
 8006204:	080062b9 	.word	0x080062b9
 8006208:	080062b9 	.word	0x080062b9
 800620c:	080062b9 	.word	0x080062b9
 8006210:	080062b9 	.word	0x080062b9
 8006214:	080062b9 	.word	0x080062b9
 8006218:	080062b9 	.word	0x080062b9
 800621c:	080062b9 	.word	0x080062b9
 8006220:	080062b9 	.word	0x080062b9
 8006224:	080062b9 	.word	0x080062b9
 8006228:	080062b9 	.word	0x080062b9
 800622c:	080062b9 	.word	0x080062b9
 8006230:	080062b9 	.word	0x080062b9
 8006234:	080062b9 	.word	0x080062b9
 8006238:	080062ab 	.word	0x080062ab
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d037      	beq.n	80062b0 <UART_SetConfig+0x6bc>
 8006240:	e03a      	b.n	80062b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006242:	f7fe fc4d 	bl	8004ae0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006246:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006248:	e03c      	b.n	80062c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800624a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe fc5c 	bl	8004b0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006258:	e034      	b.n	80062c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800625a:	f107 0318 	add.w	r3, r7, #24
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fda8 	bl	8004db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006268:	e02c      	b.n	80062c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <UART_SetConfig+0x69c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d016      	beq.n	80062a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <UART_SetConfig+0x69c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	08db      	lsrs	r3, r3, #3
 800627c:	f003 0303 	and.w	r3, r3, #3
 8006280:	4a07      	ldr	r2, [pc, #28]	; (80062a0 <UART_SetConfig+0x6ac>)
 8006282:	fa22 f303 	lsr.w	r3, r2, r3
 8006286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006288:	e01c      	b.n	80062c4 <UART_SetConfig+0x6d0>
 800628a:	bf00      	nop
 800628c:	40011400 	.word	0x40011400
 8006290:	58024400 	.word	0x58024400
 8006294:	40007800 	.word	0x40007800
 8006298:	40007c00 	.word	0x40007c00
 800629c:	58000c00 	.word	0x58000c00
 80062a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80062a4:	4b9d      	ldr	r3, [pc, #628]	; (800651c <UART_SetConfig+0x928>)
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a8:	e00c      	b.n	80062c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062aa:	4b9d      	ldr	r3, [pc, #628]	; (8006520 <UART_SetConfig+0x92c>)
 80062ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ae:	e009      	b.n	80062c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b6:	e005      	b.n	80062c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 81de 	beq.w	8006688 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	4a94      	ldr	r2, [pc, #592]	; (8006524 <UART_SetConfig+0x930>)
 80062d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062da:	fbb3 f3f2 	udiv	r3, r3, r2
 80062de:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	4413      	add	r3, r2
 80062ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d305      	bcc.n	80062fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d903      	bls.n	8006304 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006302:	e1c1      	b.n	8006688 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	2200      	movs	r2, #0
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	60fa      	str	r2, [r7, #12]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	4a84      	ldr	r2, [pc, #528]	; (8006524 <UART_SetConfig+0x930>)
 8006312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006316:	b29b      	uxth	r3, r3
 8006318:	2200      	movs	r2, #0
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006322:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006326:	f7f9 ffdb 	bl	80002e0 <__aeabi_uldivmod>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4610      	mov	r0, r2
 8006330:	4619      	mov	r1, r3
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	020b      	lsls	r3, r1, #8
 800633c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006340:	0202      	lsls	r2, r0, #8
 8006342:	6979      	ldr	r1, [r7, #20]
 8006344:	6849      	ldr	r1, [r1, #4]
 8006346:	0849      	lsrs	r1, r1, #1
 8006348:	2000      	movs	r0, #0
 800634a:	460c      	mov	r4, r1
 800634c:	4605      	mov	r5, r0
 800634e:	eb12 0804 	adds.w	r8, r2, r4
 8006352:	eb43 0905 	adc.w	r9, r3, r5
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	469a      	mov	sl, r3
 800635e:	4693      	mov	fp, r2
 8006360:	4652      	mov	r2, sl
 8006362:	465b      	mov	r3, fp
 8006364:	4640      	mov	r0, r8
 8006366:	4649      	mov	r1, r9
 8006368:	f7f9 ffba 	bl	80002e0 <__aeabi_uldivmod>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4613      	mov	r3, r2
 8006372:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800637a:	d308      	bcc.n	800638e <UART_SetConfig+0x79a>
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006382:	d204      	bcs.n	800638e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638a:	60da      	str	r2, [r3, #12]
 800638c:	e17c      	b.n	8006688 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006394:	e178      	b.n	8006688 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639e:	f040 80c5 	bne.w	800652c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80063a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	dc48      	bgt.n	800643c <UART_SetConfig+0x848>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	db7b      	blt.n	80064a6 <UART_SetConfig+0x8b2>
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d879      	bhi.n	80064a6 <UART_SetConfig+0x8b2>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <UART_SetConfig+0x7c4>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	08006443 	.word	0x08006443
 80063bc:	0800644b 	.word	0x0800644b
 80063c0:	080064a7 	.word	0x080064a7
 80063c4:	080064a7 	.word	0x080064a7
 80063c8:	08006453 	.word	0x08006453
 80063cc:	080064a7 	.word	0x080064a7
 80063d0:	080064a7 	.word	0x080064a7
 80063d4:	080064a7 	.word	0x080064a7
 80063d8:	08006463 	.word	0x08006463
 80063dc:	080064a7 	.word	0x080064a7
 80063e0:	080064a7 	.word	0x080064a7
 80063e4:	080064a7 	.word	0x080064a7
 80063e8:	080064a7 	.word	0x080064a7
 80063ec:	080064a7 	.word	0x080064a7
 80063f0:	080064a7 	.word	0x080064a7
 80063f4:	080064a7 	.word	0x080064a7
 80063f8:	08006473 	.word	0x08006473
 80063fc:	080064a7 	.word	0x080064a7
 8006400:	080064a7 	.word	0x080064a7
 8006404:	080064a7 	.word	0x080064a7
 8006408:	080064a7 	.word	0x080064a7
 800640c:	080064a7 	.word	0x080064a7
 8006410:	080064a7 	.word	0x080064a7
 8006414:	080064a7 	.word	0x080064a7
 8006418:	080064a7 	.word	0x080064a7
 800641c:	080064a7 	.word	0x080064a7
 8006420:	080064a7 	.word	0x080064a7
 8006424:	080064a7 	.word	0x080064a7
 8006428:	080064a7 	.word	0x080064a7
 800642c:	080064a7 	.word	0x080064a7
 8006430:	080064a7 	.word	0x080064a7
 8006434:	080064a7 	.word	0x080064a7
 8006438:	08006499 	.word	0x08006499
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d02e      	beq.n	800649e <UART_SetConfig+0x8aa>
 8006440:	e031      	b.n	80064a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006442:	f7fd f8d5 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 8006446:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006448:	e033      	b.n	80064b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800644a:	f7fd f8e7 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 800644e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006450:	e02f      	b.n	80064b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fb58 	bl	8004b0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006460:	e027      	b.n	80064b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006462:	f107 0318 	add.w	r3, r7, #24
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fca4 	bl	8004db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006470:	e01f      	b.n	80064b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006472:	4b2d      	ldr	r3, [pc, #180]	; (8006528 <UART_SetConfig+0x934>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800647e:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <UART_SetConfig+0x934>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	08db      	lsrs	r3, r3, #3
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	4a24      	ldr	r2, [pc, #144]	; (800651c <UART_SetConfig+0x928>)
 800648a:	fa22 f303 	lsr.w	r3, r2, r3
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006490:	e00f      	b.n	80064b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <UART_SetConfig+0x928>)
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006496:	e00c      	b.n	80064b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <UART_SetConfig+0x92c>)
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800649c:	e009      	b.n	80064b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800649e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064a4:	e005      	b.n	80064b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80064b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80e7 	beq.w	8006688 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	4a19      	ldr	r2, [pc, #100]	; (8006524 <UART_SetConfig+0x930>)
 80064c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c4:	461a      	mov	r2, r3
 80064c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064cc:	005a      	lsls	r2, r3, #1
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	441a      	add	r2, r3
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	fbb2 f3f3 	udiv	r3, r2, r3
 80064de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	2b0f      	cmp	r3, #15
 80064e4:	d916      	bls.n	8006514 <UART_SetConfig+0x920>
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ec:	d212      	bcs.n	8006514 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f023 030f 	bic.w	r3, r3, #15
 80064f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	b29a      	uxth	r2, r3
 8006504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006506:	4313      	orrs	r3, r2
 8006508:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	e0b9      	b.n	8006688 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800651a:	e0b5      	b.n	8006688 <UART_SetConfig+0xa94>
 800651c:	03d09000 	.word	0x03d09000
 8006520:	003d0900 	.word	0x003d0900
 8006524:	0800a160 	.word	0x0800a160
 8006528:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800652c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006530:	2b20      	cmp	r3, #32
 8006532:	dc49      	bgt.n	80065c8 <UART_SetConfig+0x9d4>
 8006534:	2b00      	cmp	r3, #0
 8006536:	db7c      	blt.n	8006632 <UART_SetConfig+0xa3e>
 8006538:	2b20      	cmp	r3, #32
 800653a:	d87a      	bhi.n	8006632 <UART_SetConfig+0xa3e>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0x950>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	080065cf 	.word	0x080065cf
 8006548:	080065d7 	.word	0x080065d7
 800654c:	08006633 	.word	0x08006633
 8006550:	08006633 	.word	0x08006633
 8006554:	080065df 	.word	0x080065df
 8006558:	08006633 	.word	0x08006633
 800655c:	08006633 	.word	0x08006633
 8006560:	08006633 	.word	0x08006633
 8006564:	080065ef 	.word	0x080065ef
 8006568:	08006633 	.word	0x08006633
 800656c:	08006633 	.word	0x08006633
 8006570:	08006633 	.word	0x08006633
 8006574:	08006633 	.word	0x08006633
 8006578:	08006633 	.word	0x08006633
 800657c:	08006633 	.word	0x08006633
 8006580:	08006633 	.word	0x08006633
 8006584:	080065ff 	.word	0x080065ff
 8006588:	08006633 	.word	0x08006633
 800658c:	08006633 	.word	0x08006633
 8006590:	08006633 	.word	0x08006633
 8006594:	08006633 	.word	0x08006633
 8006598:	08006633 	.word	0x08006633
 800659c:	08006633 	.word	0x08006633
 80065a0:	08006633 	.word	0x08006633
 80065a4:	08006633 	.word	0x08006633
 80065a8:	08006633 	.word	0x08006633
 80065ac:	08006633 	.word	0x08006633
 80065b0:	08006633 	.word	0x08006633
 80065b4:	08006633 	.word	0x08006633
 80065b8:	08006633 	.word	0x08006633
 80065bc:	08006633 	.word	0x08006633
 80065c0:	08006633 	.word	0x08006633
 80065c4:	08006625 	.word	0x08006625
 80065c8:	2b40      	cmp	r3, #64	; 0x40
 80065ca:	d02e      	beq.n	800662a <UART_SetConfig+0xa36>
 80065cc:	e031      	b.n	8006632 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ce:	f7fd f80f 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 80065d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065d4:	e033      	b.n	800663e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d6:	f7fd f821 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 80065da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065dc:	e02f      	b.n	800663e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fa92 	bl	8004b0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ec:	e027      	b.n	800663e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ee:	f107 0318 	add.w	r3, r7, #24
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe fbde 	bl	8004db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065fc:	e01f      	b.n	800663e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065fe:	4b2d      	ldr	r3, [pc, #180]	; (80066b4 <UART_SetConfig+0xac0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800660a:	4b2a      	ldr	r3, [pc, #168]	; (80066b4 <UART_SetConfig+0xac0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	08db      	lsrs	r3, r3, #3
 8006610:	f003 0303 	and.w	r3, r3, #3
 8006614:	4a28      	ldr	r2, [pc, #160]	; (80066b8 <UART_SetConfig+0xac4>)
 8006616:	fa22 f303 	lsr.w	r3, r2, r3
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800661c:	e00f      	b.n	800663e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800661e:	4b26      	ldr	r3, [pc, #152]	; (80066b8 <UART_SetConfig+0xac4>)
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006622:	e00c      	b.n	800663e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006624:	4b25      	ldr	r3, [pc, #148]	; (80066bc <UART_SetConfig+0xac8>)
 8006626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006628:	e009      	b.n	800663e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006630:	e005      	b.n	800663e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800663c:	bf00      	nop
    }

    if (pclk != 0U)
 800663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d021      	beq.n	8006688 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <UART_SetConfig+0xacc>)
 800664a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800664e:	461a      	mov	r2, r3
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	fbb3 f2f2 	udiv	r2, r3, r2
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	441a      	add	r2, r3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	2b0f      	cmp	r3, #15
 800666c:	d909      	bls.n	8006682 <UART_SetConfig+0xa8e>
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d205      	bcs.n	8006682 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	b29a      	uxth	r2, r3
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60da      	str	r2, [r3, #12]
 8006680:	e002      	b.n	8006688 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2201      	movs	r2, #1
 800668c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2201      	movs	r2, #1
 8006694:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2200      	movs	r2, #0
 800669c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2200      	movs	r2, #0
 80066a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80066a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3748      	adds	r7, #72	; 0x48
 80066ac:	46bd      	mov	sp, r7
 80066ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066b2:	bf00      	nop
 80066b4:	58024400 	.word	0x58024400
 80066b8:	03d09000 	.word	0x03d09000
 80066bc:	003d0900 	.word	0x003d0900
 80066c0:	0800a160 	.word	0x0800a160

080066c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01a      	beq.n	80067da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c2:	d10a      	bne.n	80067da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  }
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b098      	sub	sp, #96	; 0x60
 800680c:	af02      	add	r7, sp, #8
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006818:	f7fa fe80 	bl	800151c <HAL_GetTick>
 800681c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b08      	cmp	r3, #8
 800682a:	d12f      	bne.n	800688c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800682c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006834:	2200      	movs	r2, #0
 8006836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f88e 	bl	800695c <UART_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d022      	beq.n	800688c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800685a:	653b      	str	r3, [r7, #80]	; 0x50
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006864:	647b      	str	r3, [r7, #68]	; 0x44
 8006866:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800686a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e063      	b.n	8006954 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d149      	bne.n	800692e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800689a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a2:	2200      	movs	r2, #0
 80068a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f857 	bl	800695c <UART_WaitOnFlagUntilTimeout>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d03c      	beq.n	800692e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	623b      	str	r3, [r7, #32]
   return(result);
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d2:	633b      	str	r3, [r7, #48]	; 0x30
 80068d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e6      	bne.n	80068b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f023 0301 	bic.w	r3, r3, #1
 80068fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006906:	61fa      	str	r2, [r7, #28]
 8006908:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	69b9      	ldr	r1, [r7, #24]
 800690c:	69fa      	ldr	r2, [r7, #28]
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	617b      	str	r3, [r7, #20]
   return(result);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e5      	bne.n	80068e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e012      	b.n	8006954 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3758      	adds	r7, #88	; 0x58
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	4613      	mov	r3, r2
 800696a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696c:	e049      	b.n	8006a02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006974:	d045      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006976:	f7fa fdd1 	bl	800151c <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	429a      	cmp	r2, r3
 8006984:	d302      	bcc.n	800698c <UART_WaitOnFlagUntilTimeout+0x30>
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e048      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d031      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d110      	bne.n	80069ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2208      	movs	r2, #8
 80069b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f839 	bl	8006a2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2208      	movs	r2, #8
 80069be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e029      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069dc:	d111      	bne.n	8006a02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f81f 	bl	8006a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e00f      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	bf0c      	ite	eq
 8006a12:	2301      	moveq	r3, #1
 8006a14:	2300      	movne	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d0a6      	beq.n	800696e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b095      	sub	sp, #84	; 0x54
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a52:	643b      	str	r3, [r7, #64]	; 0x40
 8006a54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e6      	bne.n	8006a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a76:	69fa      	ldr	r2, [r7, #28]
 8006a78:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <UART_EndRxTransfer+0xc8>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3308      	adds	r3, #8
 8006a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d118      	bne.n	8006ad4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f023 0310 	bic.w	r3, r3, #16
 8006ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ae8:	bf00      	nop
 8006aea:	3754      	adds	r7, #84	; 0x54
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	effffffe 	.word	0xeffffffe

08006af8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_UARTEx_DisableFifoMode+0x16>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e027      	b.n	8006b5e <HAL_UARTEx_DisableFifoMode+0x66>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0201 	bic.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e02d      	b.n	8006bde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2224      	movs	r2, #36	; 0x24
 8006b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f850 	bl	8006c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e02d      	b.n	8006c5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	; 0x24
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f812 	bl	8006c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d108      	bne.n	8006c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c84:	e031      	b.n	8006cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c86:	2310      	movs	r3, #16
 8006c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c8a:	2310      	movs	r3, #16
 8006c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	0e5b      	lsrs	r3, r3, #25
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	0f5b      	lsrs	r3, r3, #29
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	7b3a      	ldrb	r2, [r7, #12]
 8006cb2:	4911      	ldr	r1, [pc, #68]	; (8006cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8006cb4:	5c8a      	ldrb	r2, [r1, r2]
 8006cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cba:	7b3a      	ldrb	r2, [r7, #12]
 8006cbc:	490f      	ldr	r1, [pc, #60]	; (8006cfc <UARTEx_SetNbDataToProcess+0x98>)
 8006cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	7b7a      	ldrb	r2, [r7, #13]
 8006cd0:	4909      	ldr	r1, [pc, #36]	; (8006cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8006cd2:	5c8a      	ldrb	r2, [r1, r2]
 8006cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cd8:	7b7a      	ldrb	r2, [r7, #13]
 8006cda:	4908      	ldr	r1, [pc, #32]	; (8006cfc <UARTEx_SetNbDataToProcess+0x98>)
 8006cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	0800a178 	.word	0x0800a178
 8006cfc:	0800a180 	.word	0x0800a180

08006d00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d00:	b084      	sub	sp, #16
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	f107 001c 	add.w	r0, r7, #28
 8006d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d120      	bne.n	8006d5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <USB_CoreInit+0xd4>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d105      	bne.n	8006d4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 faac 	bl	80072ac <USB_CoreReset>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
 8006d58:	e01a      	b.n	8006d90 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 faa0 	bl	80072ac <USB_CoreReset>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
 8006d82:	e005      	b.n	8006d90 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d116      	bne.n	8006dc4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006da4:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <USB_CoreInit+0xd8>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f043 0206 	orr.w	r2, r3, #6
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f043 0220 	orr.w	r2, r3, #32
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dd0:	b004      	add	sp, #16
 8006dd2:	4770      	bx	lr
 8006dd4:	ffbdffbf 	.word	0xffbdffbf
 8006dd8:	03ee0000 	.word	0x03ee0000

08006ddc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f023 0201 	bic.w	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d115      	bne.n	8006e4c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	f7fa fb81 	bl	8001534 <HAL_Delay>
      ms++;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fa29 	bl	8007290 <USB_GetMode>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d01e      	beq.n	8006e82 <USB_SetCurrentMode+0x84>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b31      	cmp	r3, #49	; 0x31
 8006e48:	d9f0      	bls.n	8006e2c <USB_SetCurrentMode+0x2e>
 8006e4a:	e01a      	b.n	8006e82 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d115      	bne.n	8006e7e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f7fa fb68 	bl	8001534 <HAL_Delay>
      ms++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa10 	bl	8007290 <USB_GetMode>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <USB_SetCurrentMode+0x84>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b31      	cmp	r3, #49	; 0x31
 8006e7a:	d9f0      	bls.n	8006e5e <USB_SetCurrentMode+0x60>
 8006e7c:	e001      	b.n	8006e82 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e005      	b.n	8006e8e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b32      	cmp	r3, #50	; 0x32
 8006e86:	d101      	bne.n	8006e8c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e98:	b084      	sub	sp, #16
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	e009      	b.n	8006ecc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3340      	adds	r3, #64	; 0x40
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2b0e      	cmp	r3, #14
 8006ed0:	d9f2      	bls.n	8006eb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d11c      	bne.n	8006f12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee6:	f043 0302 	orr.w	r3, r3, #2
 8006eea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e005      	b.n	8006f1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f24:	461a      	mov	r2, r3
 8006f26:	2300      	movs	r3, #0
 8006f28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f30:	4619      	mov	r1, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f38:	461a      	mov	r2, r3
 8006f3a:	680b      	ldr	r3, [r1, #0]
 8006f3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d10c      	bne.n	8006f5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f965 	bl	800721c <USB_SetDevSpeed>
 8006f52:	e008      	b.n	8006f66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f54:	2101      	movs	r1, #1
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f960 	bl	800721c <USB_SetDevSpeed>
 8006f5c:	e003      	b.n	8006f66 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f5e:	2103      	movs	r1, #3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f95b 	bl	800721c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f66:	2110      	movs	r1, #16
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f8f3 	bl	8007154 <USB_FlushTxFifo>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f91f 	bl	80071bc <USB_FlushRxFifo>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2300      	movs	r3, #0
 8006f92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	e043      	b.n	800703a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc8:	d118      	bne.n	8006ffc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	e013      	b.n	800700e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	e008      	b.n	800700e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	461a      	mov	r2, r3
 800700a:	2300      	movs	r3, #0
 800700c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701a:	461a      	mov	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	461a      	mov	r2, r3
 800702e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007032:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	3301      	adds	r3, #1
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	429a      	cmp	r2, r3
 8007040:	d3b7      	bcc.n	8006fb2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	e043      	b.n	80070d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800705e:	d118      	bne.n	8007092 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	461a      	mov	r2, r3
 8007074:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e013      	b.n	80070a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	461a      	mov	r2, r3
 800708a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	e008      	b.n	80070a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	461a      	mov	r2, r3
 80070a0:	2300      	movs	r3, #0
 80070a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b0:	461a      	mov	r2, r3
 80070b2:	2300      	movs	r3, #0
 80070b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3301      	adds	r3, #1
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d3b7      	bcc.n	8007048 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d105      	bne.n	800710c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f043 0210 	orr.w	r2, r3, #16
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	4b0e      	ldr	r3, [pc, #56]	; (800714c <USB_DevInit+0x2b4>)
 8007112:	4313      	orrs	r3, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f043 0208 	orr.w	r2, r3, #8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d105      	bne.n	800713c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <USB_DevInit+0x2b8>)
 8007136:	4313      	orrs	r3, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007148:	b004      	add	sp, #16
 800714a:	4770      	bx	lr
 800714c:	803c3800 	.word	0x803c3800
 8007150:	40000004 	.word	0x40000004

08007154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <USB_FlushTxFifo+0x64>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e01b      	b.n	80071ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	daf2      	bge.n	8007162 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	019b      	lsls	r3, r3, #6
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4a08      	ldr	r2, [pc, #32]	; (80071b8 <USB_FlushTxFifo+0x64>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e006      	b.n	80071ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d0f0      	beq.n	800718c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	00030d40 	.word	0x00030d40

080071bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a11      	ldr	r2, [pc, #68]	; (8007218 <USB_FlushRxFifo+0x5c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e018      	b.n	800720c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	daf2      	bge.n	80071c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2210      	movs	r2, #16
 80071ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a08      	ldr	r2, [pc, #32]	; (8007218 <USB_FlushRxFifo+0x5c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e006      	b.n	800720c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	2b10      	cmp	r3, #16
 8007208:	d0f0      	beq.n	80071ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	00030d40 	.word	0x00030d40

0800721c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800723c:	4313      	orrs	r3, r2
 800723e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007268:	f023 0303 	bic.w	r3, r3, #3
 800726c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800727c:	f043 0302 	orr.w	r3, r3, #2
 8007280:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	f003 0301 	and.w	r3, r3, #1
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4a13      	ldr	r2, [pc, #76]	; (8007310 <USB_CoreReset+0x64>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d901      	bls.n	80072ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e01b      	b.n	8007302 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	daf2      	bge.n	80072b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f043 0201 	orr.w	r2, r3, #1
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4a09      	ldr	r2, [pc, #36]	; (8007310 <USB_CoreReset+0x64>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d901      	bls.n	80072f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e006      	b.n	8007302 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d0f0      	beq.n	80072e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	00030d40 	.word	0x00030d40

08007314 <__NVIC_SetPriority>:
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007324:	2b00      	cmp	r3, #0
 8007326:	db0a      	blt.n	800733e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	490c      	ldr	r1, [pc, #48]	; (8007360 <__NVIC_SetPriority+0x4c>)
 800732e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007332:	0112      	lsls	r2, r2, #4
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	440b      	add	r3, r1
 8007338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800733c:	e00a      	b.n	8007354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	b2da      	uxtb	r2, r3
 8007342:	4908      	ldr	r1, [pc, #32]	; (8007364 <__NVIC_SetPriority+0x50>)
 8007344:	88fb      	ldrh	r3, [r7, #6]
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	3b04      	subs	r3, #4
 800734c:	0112      	lsls	r2, r2, #4
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	440b      	add	r3, r1
 8007352:	761a      	strb	r2, [r3, #24]
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	e000e100 	.word	0xe000e100
 8007364:	e000ed00 	.word	0xe000ed00

08007368 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <SysTick_Handler+0x1c>)
 800736e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007370:	f001 fd40 	bl	8008df4 <xTaskGetSchedulerState>
 8007374:	4603      	mov	r3, r0
 8007376:	2b01      	cmp	r3, #1
 8007378:	d001      	beq.n	800737e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800737a:	f002 fbe5 	bl	8009b48 <xPortSysTickHandler>
  }
}
 800737e:	bf00      	nop
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	e000e010 	.word	0xe000e010

08007388 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800738c:	2100      	movs	r1, #0
 800738e:	f06f 0004 	mvn.w	r0, #4
 8007392:	f7ff ffbf 	bl	8007314 <__NVIC_SetPriority>
#endif
}
 8007396:	bf00      	nop
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073a2:	f3ef 8305 	mrs	r3, IPSR
 80073a6:	603b      	str	r3, [r7, #0]
  return(result);
 80073a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073ae:	f06f 0305 	mvn.w	r3, #5
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	e00c      	b.n	80073d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073b6:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <osKernelInitialize+0x44>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d105      	bne.n	80073ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073be:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <osKernelInitialize+0x44>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	607b      	str	r3, [r7, #4]
 80073c8:	e002      	b.n	80073d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295
 80073ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073d0:	687b      	ldr	r3, [r7, #4]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	2400086c 	.word	0x2400086c

080073e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ea:	f3ef 8305 	mrs	r3, IPSR
 80073ee:	603b      	str	r3, [r7, #0]
  return(result);
 80073f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80073f6:	f06f 0305 	mvn.w	r3, #5
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	e010      	b.n	8007420 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073fe:	4b0b      	ldr	r3, [pc, #44]	; (800742c <osKernelStart+0x48>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d109      	bne.n	800741a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007406:	f7ff ffbf 	bl	8007388 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800740a:	4b08      	ldr	r3, [pc, #32]	; (800742c <osKernelStart+0x48>)
 800740c:	2202      	movs	r2, #2
 800740e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007410:	f001 f8a8 	bl	8008564 <vTaskStartScheduler>
      stat = osOK;
 8007414:	2300      	movs	r3, #0
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	e002      	b.n	8007420 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800741a:	f04f 33ff 	mov.w	r3, #4294967295
 800741e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007420:	687b      	ldr	r3, [r7, #4]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	2400086c 	.word	0x2400086c

08007430 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b08e      	sub	sp, #56	; 0x38
 8007434:	af04      	add	r7, sp, #16
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007440:	f3ef 8305 	mrs	r3, IPSR
 8007444:	617b      	str	r3, [r7, #20]
  return(result);
 8007446:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007448:	2b00      	cmp	r3, #0
 800744a:	d17e      	bne.n	800754a <osThreadNew+0x11a>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d07b      	beq.n	800754a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007452:	2380      	movs	r3, #128	; 0x80
 8007454:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007456:	2318      	movs	r3, #24
 8007458:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800745e:	f04f 33ff 	mov.w	r3, #4294967295
 8007462:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d045      	beq.n	80074f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <osThreadNew+0x48>
        name = attr->name;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d008      	beq.n	800749e <osThreadNew+0x6e>
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b38      	cmp	r3, #56	; 0x38
 8007490:	d805      	bhi.n	800749e <osThreadNew+0x6e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <osThreadNew+0x72>
        return (NULL);
 800749e:	2300      	movs	r3, #0
 80074a0:	e054      	b.n	800754c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	089b      	lsrs	r3, r3, #2
 80074b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <osThreadNew+0xa8>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	2b5b      	cmp	r3, #91	; 0x5b
 80074c0:	d90a      	bls.n	80074d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d006      	beq.n	80074d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <osThreadNew+0xa8>
        mem = 1;
 80074d2:	2301      	movs	r3, #1
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	e010      	b.n	80074fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10c      	bne.n	80074fa <osThreadNew+0xca>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d108      	bne.n	80074fa <osThreadNew+0xca>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <osThreadNew+0xca>
          mem = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61bb      	str	r3, [r7, #24]
 80074f4:	e001      	b.n	80074fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d110      	bne.n	8007522 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007508:	9202      	str	r2, [sp, #8]
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	6a3a      	ldr	r2, [r7, #32]
 8007514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fe82 	bl	8008220 <xTaskCreateStatic>
 800751c:	4603      	mov	r3, r0
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	e013      	b.n	800754a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d110      	bne.n	800754a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	b29a      	uxth	r2, r3
 800752c:	f107 0310 	add.w	r3, r7, #16
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 fecd 	bl	80082da <xTaskCreate>
 8007540:	4603      	mov	r3, r0
 8007542:	2b01      	cmp	r3, #1
 8007544:	d001      	beq.n	800754a <osThreadNew+0x11a>
            hTask = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800754a:	693b      	ldr	r3, [r7, #16]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3728      	adds	r7, #40	; 0x28
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f002 f911 	bl	8009784 <pvTimerGetTimerID>
 8007562:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <TimerCallback+0x22>
    callb->func (callb->arg);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	6852      	ldr	r2, [r2, #4]
 8007572:	4610      	mov	r0, r2
 8007574:	4798      	blx	r3
  }
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007580:	b580      	push	{r7, lr}
 8007582:	b08c      	sub	sp, #48	; 0x30
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	460b      	mov	r3, r1
 800758e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007594:	f3ef 8305 	mrs	r3, IPSR
 8007598:	613b      	str	r3, [r7, #16]
  return(result);
 800759a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800759c:	2b00      	cmp	r3, #0
 800759e:	d163      	bne.n	8007668 <osTimerNew+0xe8>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d060      	beq.n	8007668 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80075a6:	2008      	movs	r0, #8
 80075a8:	f002 fb5e 	bl	8009c68 <pvPortMalloc>
 80075ac:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d059      	beq.n	8007668 <osTimerNew+0xe8>
      callb->func = func;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <osTimerNew+0x4c>
        reload = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	e001      	b.n	80075d0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80075cc:	2301      	movs	r3, #1
 80075ce:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80075d0:	f04f 33ff 	mov.w	r3, #4294967295
 80075d4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01c      	beq.n	800761a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <osTimerNew+0x6e>
          name = attr->name;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d006      	beq.n	8007604 <osTimerNew+0x84>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	2b2b      	cmp	r3, #43	; 0x2b
 80075fc:	d902      	bls.n	8007604 <osTimerNew+0x84>
          mem = 1;
 80075fe:	2301      	movs	r3, #1
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	e00c      	b.n	800761e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d108      	bne.n	800761e <osTimerNew+0x9e>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <osTimerNew+0x9e>
            mem = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e001      	b.n	800761e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d10c      	bne.n	800763e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	4b12      	ldr	r3, [pc, #72]	; (8007674 <osTimerNew+0xf4>)
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	2101      	movs	r1, #1
 8007634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007636:	f001 fd26 	bl	8009086 <xTimerCreateStatic>
 800763a:	6238      	str	r0, [r7, #32]
 800763c:	e00b      	b.n	8007656 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d108      	bne.n	8007656 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <osTimerNew+0xf4>)
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	2101      	movs	r1, #1
 800764e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007650:	f001 fcf8 	bl	8009044 <xTimerCreate>
 8007654:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d105      	bne.n	8007668 <osTimerNew+0xe8>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <osTimerNew+0xe8>
        vPortFree (callb);
 8007662:	6978      	ldr	r0, [r7, #20]
 8007664:	f002 fbcc 	bl	8009e00 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007668:	6a3b      	ldr	r3, [r7, #32]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3728      	adds	r7, #40	; 0x28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	08007555 	.word	0x08007555

08007678 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007688:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4a06      	ldr	r2, [pc, #24]	; (80076a8 <vApplicationGetIdleTaskMemory+0x30>)
 800768e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2280      	movs	r2, #128	; 0x80
 8007694:	601a      	str	r2, [r3, #0]
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	24000870 	.word	0x24000870
 80076a8:	240008cc 	.word	0x240008cc

080076ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4a07      	ldr	r2, [pc, #28]	; (80076d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80076bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	4a06      	ldr	r2, [pc, #24]	; (80076dc <vApplicationGetTimerTaskMemory+0x30>)
 80076c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076ca:	601a      	str	r2, [r3, #0]
}
 80076cc:	bf00      	nop
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	24000acc 	.word	0x24000acc
 80076dc:	24000b28 	.word	0x24000b28

080076e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f103 0208 	add.w	r2, r3, #8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f04f 32ff 	mov.w	r2, #4294967295
 80076f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f103 0208 	add.w	r2, r3, #8
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f103 0208 	add.w	r2, r3, #8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d103      	bne.n	80077a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	e00c      	b.n	80077bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3308      	adds	r3, #8
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	e002      	b.n	80077b0 <vListInsert+0x2e>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d2f6      	bcs.n	80077aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]
}
 80077e8:	bf00      	nop
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6892      	ldr	r2, [r2, #8]
 800780a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6852      	ldr	r2, [r2, #4]
 8007814:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d103      	bne.n	8007828 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	1e5a      	subs	r2, r3, #1
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007872:	f002 f8d7 	bl	8009a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007882:	fb01 f303 	mul.w	r3, r1, r3
 8007886:	441a      	add	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a2:	3b01      	subs	r3, #1
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078a8:	fb01 f303 	mul.w	r3, r1, r3
 80078ac:	441a      	add	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	22ff      	movs	r2, #255	; 0xff
 80078be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d114      	bne.n	80078f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01a      	beq.n	8007906 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3310      	adds	r3, #16
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 f8cf 	bl	8008a78 <xTaskRemoveFromEventList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d012      	beq.n	8007906 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078e0:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <xQueueGenericReset+0xcc>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	e009      	b.n	8007906 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3310      	adds	r3, #16
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fef2 	bl	80076e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3324      	adds	r3, #36	; 0x24
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff feed 	bl	80076e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007906:	f002 f8bd 	bl	8009a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800790a:	2301      	movs	r3, #1
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08e      	sub	sp, #56	; 0x38
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <xQueueGenericCreateStatic+0x52>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <xQueueGenericCreateStatic+0x56>
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <xQueueGenericCreateStatic+0x58>
 800796e:	2300      	movs	r3, #0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	623b      	str	r3, [r7, #32]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <xQueueGenericCreateStatic+0x7e>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <xQueueGenericCreateStatic+0x82>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <xQueueGenericCreateStatic+0x84>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	61fb      	str	r3, [r7, #28]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079b6:	2350      	movs	r3, #80	; 0x50
 80079b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b50      	cmp	r3, #80	; 0x50
 80079be:	d00a      	beq.n	80079d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	61bb      	str	r3, [r7, #24]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00d      	beq.n	80079fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	4613      	mov	r3, r2
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f805 	bl	8007a08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3730      	adds	r7, #48	; 0x30
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d103      	bne.n	8007a24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	e002      	b.n	8007a2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a36:	2101      	movs	r1, #1
 8007a38:	69b8      	ldr	r0, [r7, #24]
 8007a3a:	f7ff ff05 	bl	8007848 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08e      	sub	sp, #56	; 0x38
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10a      	bne.n	8007a82 <xQueueGenericSend+0x32>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d103      	bne.n	8007a90 <xQueueGenericSend+0x40>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <xQueueGenericSend+0x44>
 8007a90:	2301      	movs	r3, #1
 8007a92:	e000      	b.n	8007a96 <xQueueGenericSend+0x46>
 8007a94:	2300      	movs	r3, #0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10a      	bne.n	8007ab0 <xQueueGenericSend+0x60>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d103      	bne.n	8007abe <xQueueGenericSend+0x6e>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <xQueueGenericSend+0x72>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e000      	b.n	8007ac4 <xQueueGenericSend+0x74>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <xQueueGenericSend+0x8e>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	623b      	str	r3, [r7, #32]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ade:	f001 f989 	bl	8008df4 <xTaskGetSchedulerState>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <xQueueGenericSend+0x9e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <xQueueGenericSend+0xa2>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e000      	b.n	8007af4 <xQueueGenericSend+0xa4>
 8007af2:	2300      	movs	r3, #0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10a      	bne.n	8007b0e <xQueueGenericSend+0xbe>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	61fb      	str	r3, [r7, #28]
}
 8007b0a:	bf00      	nop
 8007b0c:	e7fe      	b.n	8007b0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b0e:	f001 ff89 	bl	8009a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d302      	bcc.n	8007b24 <xQueueGenericSend+0xd4>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d129      	bne.n	8007b78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b2a:	f000 fa0b 	bl	8007f44 <prvCopyDataToQueue>
 8007b2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d010      	beq.n	8007b5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	3324      	adds	r3, #36	; 0x24
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 ff9b 	bl	8008a78 <xTaskRemoveFromEventList>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d013      	beq.n	8007b70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b48:	4b3f      	ldr	r3, [pc, #252]	; (8007c48 <xQueueGenericSend+0x1f8>)
 8007b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	e00a      	b.n	8007b70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b60:	4b39      	ldr	r3, [pc, #228]	; (8007c48 <xQueueGenericSend+0x1f8>)
 8007b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b70:	f001 ff88 	bl	8009a84 <vPortExitCritical>
				return pdPASS;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e063      	b.n	8007c40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b7e:	f001 ff81 	bl	8009a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e05c      	b.n	8007c40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 ffd5 	bl	8008b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b96:	2301      	movs	r3, #1
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b9a:	f001 ff73 	bl	8009a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b9e:	f000 fd47 	bl	8008630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ba2:	f001 ff3f 	bl	8009a24 <vPortEnterCritical>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bac:	b25b      	sxtb	r3, r3
 8007bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb2:	d103      	bne.n	8007bbc <xQueueGenericSend+0x16c>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc8:	d103      	bne.n	8007bd2 <xQueueGenericSend+0x182>
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bd2:	f001 ff57 	bl	8009a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bd6:	1d3a      	adds	r2, r7, #4
 8007bd8:	f107 0314 	add.w	r3, r7, #20
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 ffc4 	bl	8008b6c <xTaskCheckForTimeOut>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d124      	bne.n	8007c34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bec:	f000 faa2 	bl	8008134 <prvIsQueueFull>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d018      	beq.n	8007c28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	3310      	adds	r3, #16
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 feea 	bl	80089d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c06:	f000 fa2d 	bl	8008064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c0a:	f000 fd1f 	bl	800864c <xTaskResumeAll>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f47f af7c 	bne.w	8007b0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c16:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <xQueueGenericSend+0x1f8>)
 8007c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	e772      	b.n	8007b0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c2a:	f000 fa1b 	bl	8008064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c2e:	f000 fd0d 	bl	800864c <xTaskResumeAll>
 8007c32:	e76c      	b.n	8007b0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c36:	f000 fa15 	bl	8008064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c3a:	f000 fd07 	bl	800864c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3738      	adds	r7, #56	; 0x38
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b090      	sub	sp, #64	; 0x40
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d103      	bne.n	8007c88 <xQueueGenericSendFromISR+0x3c>
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <xQueueGenericSendFromISR+0x40>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e000      	b.n	8007c8e <xQueueGenericSendFromISR+0x42>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d103      	bne.n	8007cb6 <xQueueGenericSendFromISR+0x6a>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d101      	bne.n	8007cba <xQueueGenericSendFromISR+0x6e>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <xQueueGenericSendFromISR+0x70>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	623b      	str	r3, [r7, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cd6:	f001 ff87 	bl	8009be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cda:	f3ef 8211 	mrs	r2, BASEPRI
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	61fa      	str	r2, [r7, #28]
 8007cf0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <xQueueGenericSendFromISR+0xbc>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d12f      	bne.n	8007d68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d1e:	f000 f911 	bl	8007f44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d112      	bne.n	8007d52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d016      	beq.n	8007d62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	3324      	adds	r3, #36	; 0x24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fe9d 	bl	8008a78 <xTaskRemoveFromEventList>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00e      	beq.n	8007d62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00b      	beq.n	8007d62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e007      	b.n	8007d62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d56:	3301      	adds	r3, #1
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	b25a      	sxtb	r2, r3
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d62:	2301      	movs	r3, #1
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d66:	e001      	b.n	8007d6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3740      	adds	r7, #64	; 0x40
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08c      	sub	sp, #48	; 0x30
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <xQueueReceive+0x30>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	623b      	str	r3, [r7, #32]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d103      	bne.n	8007dc2 <xQueueReceive+0x3e>
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <xQueueReceive+0x42>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e000      	b.n	8007dc8 <xQueueReceive+0x44>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <xQueueReceive+0x5e>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	61fb      	str	r3, [r7, #28]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007de2:	f001 f807 	bl	8008df4 <xTaskGetSchedulerState>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <xQueueReceive+0x6e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <xQueueReceive+0x72>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueReceive+0x74>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10a      	bne.n	8007e12 <xQueueReceive+0x8e>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	61bb      	str	r3, [r7, #24]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e12:	f001 fe07 	bl	8009a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01f      	beq.n	8007e62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e26:	f000 f8f7 	bl	8008018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	1e5a      	subs	r2, r3, #1
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00f      	beq.n	8007e5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	3310      	adds	r3, #16
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fe1a 	bl	8008a78 <xTaskRemoveFromEventList>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d007      	beq.n	8007e5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e4a:	4b3d      	ldr	r3, [pc, #244]	; (8007f40 <xQueueReceive+0x1bc>)
 8007e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e5a:	f001 fe13 	bl	8009a84 <vPortExitCritical>
				return pdPASS;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e069      	b.n	8007f36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e68:	f001 fe0c 	bl	8009a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	e062      	b.n	8007f36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e76:	f107 0310 	add.w	r3, r7, #16
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fe60 	bl	8008b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e84:	f001 fdfe 	bl	8009a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e88:	f000 fbd2 	bl	8008630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e8c:	f001 fdca 	bl	8009a24 <vPortEnterCritical>
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e96:	b25b      	sxtb	r3, r3
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d103      	bne.n	8007ea6 <xQueueReceive+0x122>
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eac:	b25b      	sxtb	r3, r3
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d103      	bne.n	8007ebc <xQueueReceive+0x138>
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ebc:	f001 fde2 	bl	8009a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ec0:	1d3a      	adds	r2, r7, #4
 8007ec2:	f107 0310 	add.w	r3, r7, #16
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fe4f 	bl	8008b6c <xTaskCheckForTimeOut>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d123      	bne.n	8007f1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed6:	f000 f917 	bl	8008108 <prvIsQueueEmpty>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d017      	beq.n	8007f10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	3324      	adds	r3, #36	; 0x24
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fd75 	bl	80089d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef0:	f000 f8b8 	bl	8008064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ef4:	f000 fbaa 	bl	800864c <xTaskResumeAll>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d189      	bne.n	8007e12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <xQueueReceive+0x1bc>)
 8007f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	e780      	b.n	8007e12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f12:	f000 f8a7 	bl	8008064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f16:	f000 fb99 	bl	800864c <xTaskResumeAll>
 8007f1a:	e77a      	b.n	8007e12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f1e:	f000 f8a1 	bl	8008064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f22:	f000 fb93 	bl	800864c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f28:	f000 f8ee 	bl	8008108 <prvIsQueueEmpty>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f43f af6f 	beq.w	8007e12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3730      	adds	r7, #48	; 0x30
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	e000ed04 	.word	0xe000ed04

08007f44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10d      	bne.n	8007f7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d14d      	bne.n	8008006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ff5e 	bl	8008e30 <xTaskPriorityDisinherit>
 8007f74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	609a      	str	r2, [r3, #8]
 8007f7c:	e043      	b.n	8008006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d119      	bne.n	8007fb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6858      	ldr	r0, [r3, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	f002 f880 	bl	800a094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d32b      	bcc.n	8008006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	e026      	b.n	8008006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68d8      	ldr	r0, [r3, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	f002 f866 	bl	800a094 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d207      	bcs.n	8007ff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	425b      	negs	r3, r3
 8007fee:	441a      	add	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d105      	bne.n	8008006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	3b01      	subs	r3, #1
 8008004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800800e:	697b      	ldr	r3, [r7, #20]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d018      	beq.n	800805c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	441a      	add	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	d303      	bcc.n	800804c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68d9      	ldr	r1, [r3, #12]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	461a      	mov	r2, r3
 8008056:	6838      	ldr	r0, [r7, #0]
 8008058:	f002 f81c 	bl	800a094 <memcpy>
	}
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800806c:	f001 fcda 	bl	8009a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008078:	e011      	b.n	800809e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d012      	beq.n	80080a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3324      	adds	r3, #36	; 0x24
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fcf6 	bl	8008a78 <xTaskRemoveFromEventList>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008092:	f000 fdcd 	bl	8008c30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	3b01      	subs	r3, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800809e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dce9      	bgt.n	800807a <prvUnlockQueue+0x16>
 80080a6:	e000      	b.n	80080aa <prvUnlockQueue+0x46>
					break;
 80080a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	22ff      	movs	r2, #255	; 0xff
 80080ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080b2:	f001 fce7 	bl	8009a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080b6:	f001 fcb5 	bl	8009a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080c2:	e011      	b.n	80080e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d012      	beq.n	80080f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3310      	adds	r3, #16
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fcd1 	bl	8008a78 <xTaskRemoveFromEventList>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080dc:	f000 fda8 	bl	8008c30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dce9      	bgt.n	80080c4 <prvUnlockQueue+0x60>
 80080f0:	e000      	b.n	80080f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	22ff      	movs	r2, #255	; 0xff
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080fc:	f001 fcc2 	bl	8009a84 <vPortExitCritical>
}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008110:	f001 fc88 	bl	8009a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e001      	b.n	8008126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008126:	f001 fcad 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 800812a:	68fb      	ldr	r3, [r7, #12]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800813c:	f001 fc72 	bl	8009a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008148:	429a      	cmp	r2, r3
 800814a:	d102      	bne.n	8008152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	e001      	b.n	8008156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008156:	f001 fc95 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 800815a:	68fb      	ldr	r3, [r7, #12]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	e014      	b.n	800819e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008174:	4a0f      	ldr	r2, [pc, #60]	; (80081b4 <vQueueAddToRegistry+0x50>)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008180:	490c      	ldr	r1, [pc, #48]	; (80081b4 <vQueueAddToRegistry+0x50>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800818a:	4a0a      	ldr	r2, [pc, #40]	; (80081b4 <vQueueAddToRegistry+0x50>)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	4413      	add	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008196:	e006      	b.n	80081a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b07      	cmp	r3, #7
 80081a2:	d9e7      	bls.n	8008174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	24000f28 	.word	0x24000f28

080081b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081c8:	f001 fc2c 	bl	8009a24 <vPortEnterCritical>
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081d2:	b25b      	sxtb	r3, r3
 80081d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d8:	d103      	bne.n	80081e2 <vQueueWaitForMessageRestricted+0x2a>
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e8:	b25b      	sxtb	r3, r3
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d103      	bne.n	80081f8 <vQueueWaitForMessageRestricted+0x40>
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081f8:	f001 fc44 	bl	8009a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	3324      	adds	r3, #36	; 0x24
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fc07 	bl	8008a20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008212:	6978      	ldr	r0, [r7, #20]
 8008214:	f7ff ff26 	bl	8008064 <prvUnlockQueue>
	}
 8008218:	bf00      	nop
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08e      	sub	sp, #56	; 0x38
 8008224:	af04      	add	r7, sp, #16
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	623b      	str	r3, [r7, #32]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <xTaskCreateStatic+0x46>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	61fb      	str	r3, [r7, #28]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008266:	235c      	movs	r3, #92	; 0x5c
 8008268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b5c      	cmp	r3, #92	; 0x5c
 800826e:	d00a      	beq.n	8008286 <xTaskCreateStatic+0x66>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61bb      	str	r3, [r7, #24]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008286:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01e      	beq.n	80082cc <xTaskCreateStatic+0xac>
 800828e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01b      	beq.n	80082cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800829c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	2202      	movs	r2, #2
 80082a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082a6:	2300      	movs	r3, #0
 80082a8:	9303      	str	r3, [sp, #12]
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	9302      	str	r3, [sp, #8]
 80082ae:	f107 0314 	add.w	r3, r7, #20
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	68b9      	ldr	r1, [r7, #8]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 f850 	bl	8008364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082c6:	f000 f8dd 	bl	8008484 <prvAddNewTaskToReadyList>
 80082ca:	e001      	b.n	80082d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082d0:	697b      	ldr	r3, [r7, #20]
	}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3728      	adds	r7, #40	; 0x28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b08c      	sub	sp, #48	; 0x30
 80082de:	af04      	add	r7, sp, #16
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fcba 	bl	8009c68 <pvPortMalloc>
 80082f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00e      	beq.n	800831a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082fc:	205c      	movs	r0, #92	; 0x5c
 80082fe:	f001 fcb3 	bl	8009c68 <pvPortMalloc>
 8008302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
 8008310:	e005      	b.n	800831e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008312:	6978      	ldr	r0, [r7, #20]
 8008314:	f001 fd74 	bl	8009e00 <vPortFree>
 8008318:	e001      	b.n	800831e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d017      	beq.n	8008354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800832c:	88fa      	ldrh	r2, [r7, #6]
 800832e:	2300      	movs	r3, #0
 8008330:	9303      	str	r3, [sp, #12]
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	9302      	str	r3, [sp, #8]
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 f80e 	bl	8008364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008348:	69f8      	ldr	r0, [r7, #28]
 800834a:	f000 f89b 	bl	8008484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800834e:	2301      	movs	r3, #1
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	e002      	b.n	800835a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008354:	f04f 33ff 	mov.w	r3, #4294967295
 8008358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800835a:	69bb      	ldr	r3, [r7, #24]
	}
 800835c:	4618      	mov	r0, r3
 800835e:	3720      	adds	r7, #32
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	461a      	mov	r2, r3
 800837c:	21a5      	movs	r1, #165	; 0xa5
 800837e:	f001 fe5d 	bl	800a03c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800838c:	440b      	add	r3, r1
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	f023 0307 	bic.w	r3, r3, #7
 800839a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	617b      	str	r3, [r7, #20]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01f      	beq.n	8008402 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
 80083c6:	e012      	b.n	80083ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	7819      	ldrb	r1, [r3, #0]
 80083d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	4413      	add	r3, r2
 80083d6:	3334      	adds	r3, #52	; 0x34
 80083d8:	460a      	mov	r2, r1
 80083da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4413      	add	r3, r2
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	3301      	adds	r3, #1
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	2b0f      	cmp	r3, #15
 80083f2:	d9e9      	bls.n	80083c8 <prvInitialiseNewTask+0x64>
 80083f4:	e000      	b.n	80083f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80083f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008400:	e003      	b.n	800840a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2b37      	cmp	r3, #55	; 0x37
 800840e:	d901      	bls.n	8008414 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008410:	2337      	movs	r3, #55	; 0x37
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800841e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	2200      	movs	r2, #0
 8008424:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	3304      	adds	r3, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff f978 	bl	8007720 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	3318      	adds	r3, #24
 8008434:	4618      	mov	r0, r3
 8008436:	f7ff f973 	bl	8007720 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800844e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	2200      	movs	r2, #0
 8008454:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	68f9      	ldr	r1, [r7, #12]
 8008462:	69b8      	ldr	r0, [r7, #24]
 8008464:	f001 f9ae 	bl	80097c4 <pxPortInitialiseStack>
 8008468:	4602      	mov	r2, r0
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800847a:	bf00      	nop
 800847c:	3720      	adds	r7, #32
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800848c:	f001 faca 	bl	8009a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008490:	4b2d      	ldr	r3, [pc, #180]	; (8008548 <prvAddNewTaskToReadyList+0xc4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3301      	adds	r3, #1
 8008496:	4a2c      	ldr	r2, [pc, #176]	; (8008548 <prvAddNewTaskToReadyList+0xc4>)
 8008498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800849a:	4b2c      	ldr	r3, [pc, #176]	; (800854c <prvAddNewTaskToReadyList+0xc8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084a2:	4a2a      	ldr	r2, [pc, #168]	; (800854c <prvAddNewTaskToReadyList+0xc8>)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084a8:	4b27      	ldr	r3, [pc, #156]	; (8008548 <prvAddNewTaskToReadyList+0xc4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d110      	bne.n	80084d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084b0:	f000 fbe2 	bl	8008c78 <prvInitialiseTaskLists>
 80084b4:	e00d      	b.n	80084d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084b6:	4b26      	ldr	r3, [pc, #152]	; (8008550 <prvAddNewTaskToReadyList+0xcc>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084be:	4b23      	ldr	r3, [pc, #140]	; (800854c <prvAddNewTaskToReadyList+0xc8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d802      	bhi.n	80084d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084cc:	4a1f      	ldr	r2, [pc, #124]	; (800854c <prvAddNewTaskToReadyList+0xc8>)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084d2:	4b20      	ldr	r3, [pc, #128]	; (8008554 <prvAddNewTaskToReadyList+0xd0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3301      	adds	r3, #1
 80084d8:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <prvAddNewTaskToReadyList+0xd0>)
 80084da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084dc:	4b1d      	ldr	r3, [pc, #116]	; (8008554 <prvAddNewTaskToReadyList+0xd0>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <prvAddNewTaskToReadyList+0xd4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d903      	bls.n	80084f8 <prvAddNewTaskToReadyList+0x74>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	4a18      	ldr	r2, [pc, #96]	; (8008558 <prvAddNewTaskToReadyList+0xd4>)
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4a15      	ldr	r2, [pc, #84]	; (800855c <prvAddNewTaskToReadyList+0xd8>)
 8008506:	441a      	add	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3304      	adds	r3, #4
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f7ff f913 	bl	800773a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008514:	f001 fab6 	bl	8009a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <prvAddNewTaskToReadyList+0xcc>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00e      	beq.n	800853e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008520:	4b0a      	ldr	r3, [pc, #40]	; (800854c <prvAddNewTaskToReadyList+0xc8>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	429a      	cmp	r2, r3
 800852c:	d207      	bcs.n	800853e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800852e:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <prvAddNewTaskToReadyList+0xdc>)
 8008530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	2400143c 	.word	0x2400143c
 800854c:	24000f68 	.word	0x24000f68
 8008550:	24001448 	.word	0x24001448
 8008554:	24001458 	.word	0x24001458
 8008558:	24001444 	.word	0x24001444
 800855c:	24000f6c 	.word	0x24000f6c
 8008560:	e000ed04 	.word	0xe000ed04

08008564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08a      	sub	sp, #40	; 0x28
 8008568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008572:	463a      	mov	r2, r7
 8008574:	1d39      	adds	r1, r7, #4
 8008576:	f107 0308 	add.w	r3, r7, #8
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff f87c 	bl	8007678 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	9202      	str	r2, [sp, #8]
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	2300      	movs	r3, #0
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	2300      	movs	r3, #0
 8008590:	460a      	mov	r2, r1
 8008592:	4921      	ldr	r1, [pc, #132]	; (8008618 <vTaskStartScheduler+0xb4>)
 8008594:	4821      	ldr	r0, [pc, #132]	; (800861c <vTaskStartScheduler+0xb8>)
 8008596:	f7ff fe43 	bl	8008220 <xTaskCreateStatic>
 800859a:	4603      	mov	r3, r0
 800859c:	4a20      	ldr	r2, [pc, #128]	; (8008620 <vTaskStartScheduler+0xbc>)
 800859e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085a0:	4b1f      	ldr	r3, [pc, #124]	; (8008620 <vTaskStartScheduler+0xbc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085a8:	2301      	movs	r3, #1
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	e001      	b.n	80085b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d102      	bne.n	80085be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085b8:	f000 fcfc 	bl	8008fb4 <xTimerCreateTimerTask>
 80085bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d116      	bne.n	80085f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	613b      	str	r3, [r7, #16]
}
 80085d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085d8:	4b12      	ldr	r3, [pc, #72]	; (8008624 <vTaskStartScheduler+0xc0>)
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085e0:	4b11      	ldr	r3, [pc, #68]	; (8008628 <vTaskStartScheduler+0xc4>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085e6:	4b11      	ldr	r3, [pc, #68]	; (800862c <vTaskStartScheduler+0xc8>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085ec:	f001 f978 	bl	80098e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085f0:	e00e      	b.n	8008610 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f8:	d10a      	bne.n	8008610 <vTaskStartScheduler+0xac>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	60fb      	str	r3, [r7, #12]
}
 800860c:	bf00      	nop
 800860e:	e7fe      	b.n	800860e <vTaskStartScheduler+0xaa>
}
 8008610:	bf00      	nop
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	0800a0f4 	.word	0x0800a0f4
 800861c:	08008c49 	.word	0x08008c49
 8008620:	24001460 	.word	0x24001460
 8008624:	2400145c 	.word	0x2400145c
 8008628:	24001448 	.word	0x24001448
 800862c:	24001440 	.word	0x24001440

08008630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008634:	4b04      	ldr	r3, [pc, #16]	; (8008648 <vTaskSuspendAll+0x18>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	4a03      	ldr	r2, [pc, #12]	; (8008648 <vTaskSuspendAll+0x18>)
 800863c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800863e:	bf00      	nop
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	24001464 	.word	0x24001464

0800864c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008656:	2300      	movs	r3, #0
 8008658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800865a:	4b42      	ldr	r3, [pc, #264]	; (8008764 <xTaskResumeAll+0x118>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <xTaskResumeAll+0x2c>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	603b      	str	r3, [r7, #0]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008678:	f001 f9d4 	bl	8009a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800867c:	4b39      	ldr	r3, [pc, #228]	; (8008764 <xTaskResumeAll+0x118>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3b01      	subs	r3, #1
 8008682:	4a38      	ldr	r2, [pc, #224]	; (8008764 <xTaskResumeAll+0x118>)
 8008684:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008686:	4b37      	ldr	r3, [pc, #220]	; (8008764 <xTaskResumeAll+0x118>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d162      	bne.n	8008754 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800868e:	4b36      	ldr	r3, [pc, #216]	; (8008768 <xTaskResumeAll+0x11c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d05e      	beq.n	8008754 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008696:	e02f      	b.n	80086f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008698:	4b34      	ldr	r3, [pc, #208]	; (800876c <xTaskResumeAll+0x120>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3318      	adds	r3, #24
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff f8a5 	bl	80077f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff f8a0 	bl	80077f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b8:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <xTaskResumeAll+0x124>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d903      	bls.n	80086c8 <xTaskResumeAll+0x7c>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	4a2a      	ldr	r2, [pc, #168]	; (8008770 <xTaskResumeAll+0x124>)
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4a27      	ldr	r2, [pc, #156]	; (8008774 <xTaskResumeAll+0x128>)
 80086d6:	441a      	add	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f7ff f82b 	bl	800773a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e8:	4b23      	ldr	r3, [pc, #140]	; (8008778 <xTaskResumeAll+0x12c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d302      	bcc.n	80086f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086f2:	4b22      	ldr	r3, [pc, #136]	; (800877c <xTaskResumeAll+0x130>)
 80086f4:	2201      	movs	r2, #1
 80086f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086f8:	4b1c      	ldr	r3, [pc, #112]	; (800876c <xTaskResumeAll+0x120>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1cb      	bne.n	8008698 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008706:	f000 fb55 	bl	8008db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800870a:	4b1d      	ldr	r3, [pc, #116]	; (8008780 <xTaskResumeAll+0x134>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d010      	beq.n	8008738 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008716:	f000 f847 	bl	80087a8 <xTaskIncrementTick>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008720:	4b16      	ldr	r3, [pc, #88]	; (800877c <xTaskResumeAll+0x130>)
 8008722:	2201      	movs	r2, #1
 8008724:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3b01      	subs	r3, #1
 800872a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f1      	bne.n	8008716 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008732:	4b13      	ldr	r3, [pc, #76]	; (8008780 <xTaskResumeAll+0x134>)
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008738:	4b10      	ldr	r3, [pc, #64]	; (800877c <xTaskResumeAll+0x130>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d009      	beq.n	8008754 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008740:	2301      	movs	r3, #1
 8008742:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008744:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <xTaskResumeAll+0x138>)
 8008746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008754:	f001 f996 	bl	8009a84 <vPortExitCritical>

	return xAlreadyYielded;
 8008758:	68bb      	ldr	r3, [r7, #8]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	24001464 	.word	0x24001464
 8008768:	2400143c 	.word	0x2400143c
 800876c:	240013fc 	.word	0x240013fc
 8008770:	24001444 	.word	0x24001444
 8008774:	24000f6c 	.word	0x24000f6c
 8008778:	24000f68 	.word	0x24000f68
 800877c:	24001450 	.word	0x24001450
 8008780:	2400144c 	.word	0x2400144c
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800878e:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <xTaskGetTickCount+0x1c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008794:	687b      	ldr	r3, [r7, #4]
}
 8008796:	4618      	mov	r0, r3
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	24001440 	.word	0x24001440

080087a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b2:	4b4f      	ldr	r3, [pc, #316]	; (80088f0 <xTaskIncrementTick+0x148>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f040 808f 	bne.w	80088da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087bc:	4b4d      	ldr	r3, [pc, #308]	; (80088f4 <xTaskIncrementTick+0x14c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3301      	adds	r3, #1
 80087c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087c4:	4a4b      	ldr	r2, [pc, #300]	; (80088f4 <xTaskIncrementTick+0x14c>)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d120      	bne.n	8008812 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087d0:	4b49      	ldr	r3, [pc, #292]	; (80088f8 <xTaskIncrementTick+0x150>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	603b      	str	r3, [r7, #0]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <xTaskIncrementTick+0x46>
 80087f0:	4b41      	ldr	r3, [pc, #260]	; (80088f8 <xTaskIncrementTick+0x150>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	4b41      	ldr	r3, [pc, #260]	; (80088fc <xTaskIncrementTick+0x154>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a3f      	ldr	r2, [pc, #252]	; (80088f8 <xTaskIncrementTick+0x150>)
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	4a3f      	ldr	r2, [pc, #252]	; (80088fc <xTaskIncrementTick+0x154>)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	4b3e      	ldr	r3, [pc, #248]	; (8008900 <xTaskIncrementTick+0x158>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3301      	adds	r3, #1
 800880a:	4a3d      	ldr	r2, [pc, #244]	; (8008900 <xTaskIncrementTick+0x158>)
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	f000 fad1 	bl	8008db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008812:	4b3c      	ldr	r3, [pc, #240]	; (8008904 <xTaskIncrementTick+0x15c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	429a      	cmp	r2, r3
 800881a:	d349      	bcc.n	80088b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800881c:	4b36      	ldr	r3, [pc, #216]	; (80088f8 <xTaskIncrementTick+0x150>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d104      	bne.n	8008830 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008826:	4b37      	ldr	r3, [pc, #220]	; (8008904 <xTaskIncrementTick+0x15c>)
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	601a      	str	r2, [r3, #0]
					break;
 800882e:	e03f      	b.n	80088b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008830:	4b31      	ldr	r3, [pc, #196]	; (80088f8 <xTaskIncrementTick+0x150>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d203      	bcs.n	8008850 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008848:	4a2e      	ldr	r2, [pc, #184]	; (8008904 <xTaskIncrementTick+0x15c>)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800884e:	e02f      	b.n	80088b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	3304      	adds	r3, #4
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe ffcd 	bl	80077f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d004      	beq.n	800886c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	3318      	adds	r3, #24
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe ffc4 	bl	80077f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008870:	4b25      	ldr	r3, [pc, #148]	; (8008908 <xTaskIncrementTick+0x160>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	429a      	cmp	r2, r3
 8008876:	d903      	bls.n	8008880 <xTaskIncrementTick+0xd8>
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	4a22      	ldr	r2, [pc, #136]	; (8008908 <xTaskIncrementTick+0x160>)
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4a1f      	ldr	r2, [pc, #124]	; (800890c <xTaskIncrementTick+0x164>)
 800888e:	441a      	add	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	3304      	adds	r3, #4
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f7fe ff4f 	bl	800773a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a0:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <xTaskIncrementTick+0x168>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d3b8      	bcc.n	800881c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088aa:	2301      	movs	r3, #1
 80088ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ae:	e7b5      	b.n	800881c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088b0:	4b17      	ldr	r3, [pc, #92]	; (8008910 <xTaskIncrementTick+0x168>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b6:	4915      	ldr	r1, [pc, #84]	; (800890c <xTaskIncrementTick+0x164>)
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d901      	bls.n	80088cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80088c8:	2301      	movs	r3, #1
 80088ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088cc:	4b11      	ldr	r3, [pc, #68]	; (8008914 <xTaskIncrementTick+0x16c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d007      	beq.n	80088e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80088d4:	2301      	movs	r3, #1
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	e004      	b.n	80088e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088da:	4b0f      	ldr	r3, [pc, #60]	; (8008918 <xTaskIncrementTick+0x170>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3301      	adds	r3, #1
 80088e0:	4a0d      	ldr	r2, [pc, #52]	; (8008918 <xTaskIncrementTick+0x170>)
 80088e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088e4:	697b      	ldr	r3, [r7, #20]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	24001464 	.word	0x24001464
 80088f4:	24001440 	.word	0x24001440
 80088f8:	240013f4 	.word	0x240013f4
 80088fc:	240013f8 	.word	0x240013f8
 8008900:	24001454 	.word	0x24001454
 8008904:	2400145c 	.word	0x2400145c
 8008908:	24001444 	.word	0x24001444
 800890c:	24000f6c 	.word	0x24000f6c
 8008910:	24000f68 	.word	0x24000f68
 8008914:	24001450 	.word	0x24001450
 8008918:	2400144c 	.word	0x2400144c

0800891c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008922:	4b28      	ldr	r3, [pc, #160]	; (80089c4 <vTaskSwitchContext+0xa8>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800892a:	4b27      	ldr	r3, [pc, #156]	; (80089c8 <vTaskSwitchContext+0xac>)
 800892c:	2201      	movs	r2, #1
 800892e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008930:	e041      	b.n	80089b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008932:	4b25      	ldr	r3, [pc, #148]	; (80089c8 <vTaskSwitchContext+0xac>)
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008938:	4b24      	ldr	r3, [pc, #144]	; (80089cc <vTaskSwitchContext+0xb0>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	e010      	b.n	8008962 <vTaskSwitchContext+0x46>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <vTaskSwitchContext+0x40>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	607b      	str	r3, [r7, #4]
}
 8008958:	bf00      	nop
 800895a:	e7fe      	b.n	800895a <vTaskSwitchContext+0x3e>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3b01      	subs	r3, #1
 8008960:	60fb      	str	r3, [r7, #12]
 8008962:	491b      	ldr	r1, [pc, #108]	; (80089d0 <vTaskSwitchContext+0xb4>)
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0e4      	beq.n	8008940 <vTaskSwitchContext+0x24>
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	4613      	mov	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4a13      	ldr	r2, [pc, #76]	; (80089d0 <vTaskSwitchContext+0xb4>)
 8008982:	4413      	add	r3, r2
 8008984:	60bb      	str	r3, [r7, #8]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	605a      	str	r2, [r3, #4]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	3308      	adds	r3, #8
 8008998:	429a      	cmp	r2, r3
 800899a:	d104      	bne.n	80089a6 <vTaskSwitchContext+0x8a>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	605a      	str	r2, [r3, #4]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <vTaskSwitchContext+0xb8>)
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	4a06      	ldr	r2, [pc, #24]	; (80089cc <vTaskSwitchContext+0xb0>)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6013      	str	r3, [r2, #0]
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	24001464 	.word	0x24001464
 80089c8:	24001450 	.word	0x24001450
 80089cc:	24001444 	.word	0x24001444
 80089d0:	24000f6c 	.word	0x24000f6c
 80089d4:	24000f68 	.word	0x24000f68

080089d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	60fb      	str	r3, [r7, #12]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089fe:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <vTaskPlaceOnEventList+0x44>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3318      	adds	r3, #24
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fe febb 	bl	8007782 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	6838      	ldr	r0, [r7, #0]
 8008a10:	f000 fa7c 	bl	8008f0c <prvAddCurrentTaskToDelayedList>
}
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	24000f68 	.word	0x24000f68

08008a20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	617b      	str	r3, [r7, #20]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a48:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3318      	adds	r3, #24
 8008a4e:	4619      	mov	r1, r3
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7fe fe72 	bl	800773a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	68b8      	ldr	r0, [r7, #8]
 8008a66:	f000 fa51 	bl	8008f0c <prvAddCurrentTaskToDelayedList>
	}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	24000f68 	.word	0x24000f68

08008a78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10a      	bne.n	8008aa4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	60fb      	str	r3, [r7, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	3318      	adds	r3, #24
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fe fea3 	bl	80077f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aae:	4b1e      	ldr	r3, [pc, #120]	; (8008b28 <xTaskRemoveFromEventList+0xb0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d11d      	bne.n	8008af2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fe9a 	bl	80077f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac4:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <xTaskRemoveFromEventList+0xb4>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d903      	bls.n	8008ad4 <xTaskRemoveFromEventList+0x5c>
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	4a16      	ldr	r2, [pc, #88]	; (8008b2c <xTaskRemoveFromEventList+0xb4>)
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad8:	4613      	mov	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4a13      	ldr	r2, [pc, #76]	; (8008b30 <xTaskRemoveFromEventList+0xb8>)
 8008ae2:	441a      	add	r2, r3
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f7fe fe25 	bl	800773a <vListInsertEnd>
 8008af0:	e005      	b.n	8008afe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	3318      	adds	r3, #24
 8008af6:	4619      	mov	r1, r3
 8008af8:	480e      	ldr	r0, [pc, #56]	; (8008b34 <xTaskRemoveFromEventList+0xbc>)
 8008afa:	f7fe fe1e 	bl	800773a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b02:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <xTaskRemoveFromEventList+0xc0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d905      	bls.n	8008b18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <xTaskRemoveFromEventList+0xc4>)
 8008b12:	2201      	movs	r2, #1
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	e001      	b.n	8008b1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b1c:	697b      	ldr	r3, [r7, #20]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	24001464 	.word	0x24001464
 8008b2c:	24001444 	.word	0x24001444
 8008b30:	24000f6c 	.word	0x24000f6c
 8008b34:	240013fc 	.word	0x240013fc
 8008b38:	24000f68 	.word	0x24000f68
 8008b3c:	24001450 	.word	0x24001450

08008b40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b48:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <vTaskInternalSetTimeOutState+0x24>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b50:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <vTaskInternalSetTimeOutState+0x28>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	605a      	str	r2, [r3, #4]
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	24001454 	.word	0x24001454
 8008b68:	24001440 	.word	0x24001440

08008b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	613b      	str	r3, [r7, #16]
}
 8008b8e:	bf00      	nop
 8008b90:	e7fe      	b.n	8008b90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10a      	bne.n	8008bae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	60fb      	str	r3, [r7, #12]
}
 8008baa:	bf00      	nop
 8008bac:	e7fe      	b.n	8008bac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008bae:	f000 ff39 	bl	8009a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bb2:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <xTaskCheckForTimeOut+0xbc>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bca:	d102      	bne.n	8008bd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	e023      	b.n	8008c1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <xTaskCheckForTimeOut+0xc0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d007      	beq.n	8008bee <xTaskCheckForTimeOut+0x82>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d302      	bcc.n	8008bee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008be8:	2301      	movs	r3, #1
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e015      	b.n	8008c1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d20b      	bcs.n	8008c10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	1ad2      	subs	r2, r2, r3
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff ff9b 	bl	8008b40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e004      	b.n	8008c1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c16:	2301      	movs	r3, #1
 8008c18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c1a:	f000 ff33 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3720      	adds	r7, #32
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	24001440 	.word	0x24001440
 8008c2c:	24001454 	.word	0x24001454

08008c30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c34:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <vTaskMissedYield+0x14>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
}
 8008c3a:	bf00      	nop
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	24001450 	.word	0x24001450

08008c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c50:	f000 f852 	bl	8008cf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <prvIdleTask+0x28>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d9f9      	bls.n	8008c50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <prvIdleTask+0x2c>)
 8008c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c6c:	e7f0      	b.n	8008c50 <prvIdleTask+0x8>
 8008c6e:	bf00      	nop
 8008c70:	24000f6c 	.word	0x24000f6c
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c7e:	2300      	movs	r3, #0
 8008c80:	607b      	str	r3, [r7, #4]
 8008c82:	e00c      	b.n	8008c9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4a12      	ldr	r2, [pc, #72]	; (8008cd8 <prvInitialiseTaskLists+0x60>)
 8008c90:	4413      	add	r3, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fd24 	bl	80076e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	607b      	str	r3, [r7, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b37      	cmp	r3, #55	; 0x37
 8008ca2:	d9ef      	bls.n	8008c84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ca4:	480d      	ldr	r0, [pc, #52]	; (8008cdc <prvInitialiseTaskLists+0x64>)
 8008ca6:	f7fe fd1b 	bl	80076e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008caa:	480d      	ldr	r0, [pc, #52]	; (8008ce0 <prvInitialiseTaskLists+0x68>)
 8008cac:	f7fe fd18 	bl	80076e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cb0:	480c      	ldr	r0, [pc, #48]	; (8008ce4 <prvInitialiseTaskLists+0x6c>)
 8008cb2:	f7fe fd15 	bl	80076e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cb6:	480c      	ldr	r0, [pc, #48]	; (8008ce8 <prvInitialiseTaskLists+0x70>)
 8008cb8:	f7fe fd12 	bl	80076e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cbc:	480b      	ldr	r0, [pc, #44]	; (8008cec <prvInitialiseTaskLists+0x74>)
 8008cbe:	f7fe fd0f 	bl	80076e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cc2:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <prvInitialiseTaskLists+0x78>)
 8008cc4:	4a05      	ldr	r2, [pc, #20]	; (8008cdc <prvInitialiseTaskLists+0x64>)
 8008cc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <prvInitialiseTaskLists+0x7c>)
 8008cca:	4a05      	ldr	r2, [pc, #20]	; (8008ce0 <prvInitialiseTaskLists+0x68>)
 8008ccc:	601a      	str	r2, [r3, #0]
}
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	24000f6c 	.word	0x24000f6c
 8008cdc:	240013cc 	.word	0x240013cc
 8008ce0:	240013e0 	.word	0x240013e0
 8008ce4:	240013fc 	.word	0x240013fc
 8008ce8:	24001410 	.word	0x24001410
 8008cec:	24001428 	.word	0x24001428
 8008cf0:	240013f4 	.word	0x240013f4
 8008cf4:	240013f8 	.word	0x240013f8

08008cf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cfe:	e019      	b.n	8008d34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d00:	f000 fe90 	bl	8009a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d04:	4b10      	ldr	r3, [pc, #64]	; (8008d48 <prvCheckTasksWaitingTermination+0x50>)
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe fd6f 	bl	80077f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d16:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <prvCheckTasksWaitingTermination+0x54>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	4a0b      	ldr	r2, [pc, #44]	; (8008d4c <prvCheckTasksWaitingTermination+0x54>)
 8008d1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <prvCheckTasksWaitingTermination+0x58>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	4a0a      	ldr	r2, [pc, #40]	; (8008d50 <prvCheckTasksWaitingTermination+0x58>)
 8008d28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d2a:	f000 feab 	bl	8009a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f810 	bl	8008d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <prvCheckTasksWaitingTermination+0x58>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e1      	bne.n	8008d00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	24001410 	.word	0x24001410
 8008d4c:	2400143c 	.word	0x2400143c
 8008d50:	24001424 	.word	0x24001424

08008d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d108      	bne.n	8008d78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 f848 	bl	8009e00 <vPortFree>
				vPortFree( pxTCB );
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 f845 	bl	8009e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d76:	e018      	b.n	8008daa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d103      	bne.n	8008d8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f83c 	bl	8009e00 <vPortFree>
	}
 8008d88:	e00f      	b.n	8008daa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d00a      	beq.n	8008daa <prvDeleteTCB+0x56>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	60fb      	str	r3, [r7, #12]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <prvDeleteTCB+0x54>
	}
 8008daa:	bf00      	nop
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <prvResetNextTaskUnblockTime+0x38>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <prvResetNextTaskUnblockTime+0x3c>)
 8008dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008dcc:	e008      	b.n	8008de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dce:	4b07      	ldr	r3, [pc, #28]	; (8008dec <prvResetNextTaskUnblockTime+0x38>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4a04      	ldr	r2, [pc, #16]	; (8008df0 <prvResetNextTaskUnblockTime+0x3c>)
 8008dde:	6013      	str	r3, [r2, #0]
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	240013f4 	.word	0x240013f4
 8008df0:	2400145c 	.word	0x2400145c

08008df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dfa:	4b0b      	ldr	r3, [pc, #44]	; (8008e28 <xTaskGetSchedulerState+0x34>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d102      	bne.n	8008e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e02:	2301      	movs	r3, #1
 8008e04:	607b      	str	r3, [r7, #4]
 8008e06:	e008      	b.n	8008e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <xTaskGetSchedulerState+0x38>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d102      	bne.n	8008e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e10:	2302      	movs	r3, #2
 8008e12:	607b      	str	r3, [r7, #4]
 8008e14:	e001      	b.n	8008e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e1a:	687b      	ldr	r3, [r7, #4]
	}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	24001448 	.word	0x24001448
 8008e2c:	24001464 	.word	0x24001464

08008e30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d056      	beq.n	8008ef4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e46:	4b2e      	ldr	r3, [pc, #184]	; (8008f00 <xTaskPriorityDisinherit+0xd0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d00a      	beq.n	8008e66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	60fb      	str	r3, [r7, #12]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	60bb      	str	r3, [r7, #8]
}
 8008e80:	bf00      	nop
 8008e82:	e7fe      	b.n	8008e82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e88:	1e5a      	subs	r2, r3, #1
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d02c      	beq.n	8008ef4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d128      	bne.n	8008ef4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fca4 	bl	80077f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec4:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <xTaskPriorityDisinherit+0xd4>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d903      	bls.n	8008ed4 <xTaskPriorityDisinherit+0xa4>
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	4a0c      	ldr	r2, [pc, #48]	; (8008f04 <xTaskPriorityDisinherit+0xd4>)
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed8:	4613      	mov	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <xTaskPriorityDisinherit+0xd8>)
 8008ee2:	441a      	add	r2, r3
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fe fc25 	bl	800773a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ef4:	697b      	ldr	r3, [r7, #20]
	}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	24000f68 	.word	0x24000f68
 8008f04:	24001444 	.word	0x24001444
 8008f08:	24000f6c 	.word	0x24000f6c

08008f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f16:	4b21      	ldr	r3, [pc, #132]	; (8008f9c <prvAddCurrentTaskToDelayedList+0x90>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f1c:	4b20      	ldr	r3, [pc, #128]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3304      	adds	r3, #4
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fc66 	bl	80077f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2e:	d10a      	bne.n	8008f46 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d007      	beq.n	8008f46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f36:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4819      	ldr	r0, [pc, #100]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f40:	f7fe fbfb 	bl	800773a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f44:	e026      	b.n	8008f94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f4e:	4b14      	ldr	r3, [pc, #80]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d209      	bcs.n	8008f72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f5e:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f7fe fc09 	bl	8007782 <vListInsert>
}
 8008f70:	e010      	b.n	8008f94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f72:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4610      	mov	r0, r2
 8008f80:	f7fe fbff 	bl	8007782 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f84:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d202      	bcs.n	8008f94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f8e:	4a08      	ldr	r2, [pc, #32]	; (8008fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	6013      	str	r3, [r2, #0]
}
 8008f94:	bf00      	nop
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	24001440 	.word	0x24001440
 8008fa0:	24000f68 	.word	0x24000f68
 8008fa4:	24001428 	.word	0x24001428
 8008fa8:	240013f8 	.word	0x240013f8
 8008fac:	240013f4 	.word	0x240013f4
 8008fb0:	2400145c 	.word	0x2400145c

08008fb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08a      	sub	sp, #40	; 0x28
 8008fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fbe:	f000 fba1 	bl	8009704 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xTimerCreateTimerTask+0x80>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d021      	beq.n	800900e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fd2:	1d3a      	adds	r2, r7, #4
 8008fd4:	f107 0108 	add.w	r1, r7, #8
 8008fd8:	f107 030c 	add.w	r3, r7, #12
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fb65 	bl	80076ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	9202      	str	r2, [sp, #8]
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	2302      	movs	r3, #2
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	460a      	mov	r2, r1
 8008ff4:	4910      	ldr	r1, [pc, #64]	; (8009038 <xTimerCreateTimerTask+0x84>)
 8008ff6:	4811      	ldr	r0, [pc, #68]	; (800903c <xTimerCreateTimerTask+0x88>)
 8008ff8:	f7ff f912 	bl	8008220 <xTaskCreateStatic>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	4a10      	ldr	r2, [pc, #64]	; (8009040 <xTimerCreateTimerTask+0x8c>)
 8009000:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009002:	4b0f      	ldr	r3, [pc, #60]	; (8009040 <xTimerCreateTimerTask+0x8c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800900a:	2301      	movs	r3, #1
 800900c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	613b      	str	r3, [r7, #16]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800902a:	697b      	ldr	r3, [r7, #20]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	24001498 	.word	0x24001498
 8009038:	0800a0fc 	.word	0x0800a0fc
 800903c:	080092ad 	.word	0x080092ad
 8009040:	2400149c 	.word	0x2400149c

08009044 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009052:	202c      	movs	r0, #44	; 0x2c
 8009054:	f000 fe08 	bl	8009c68 <pvPortMalloc>
 8009058:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00d      	beq.n	800907c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	68b9      	ldr	r1, [r7, #8]
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f843 	bl	8009102 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800907c:	697b      	ldr	r3, [r7, #20]
	}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009086:	b580      	push	{r7, lr}
 8009088:	b08a      	sub	sp, #40	; 0x28
 800908a:	af02      	add	r7, sp, #8
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009094:	232c      	movs	r3, #44	; 0x2c
 8009096:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	2b2c      	cmp	r3, #44	; 0x2c
 800909c:	d00a      	beq.n	80090b4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	61bb      	str	r3, [r7, #24]
}
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80090b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10a      	bne.n	80090d2 <xTimerCreateStatic+0x4c>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	617b      	str	r3, [r7, #20]
}
 80090ce:	bf00      	nop
 80090d0:	e7fe      	b.n	80090d0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00d      	beq.n	80090f8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 f805 	bl	8009102 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80090f8:	69fb      	ldr	r3, [r7, #28]
	}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3720      	adds	r7, #32
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	607a      	str	r2, [r7, #4]
 800910e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10a      	bne.n	800912c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	617b      	str	r3, [r7, #20]
}
 8009128:	bf00      	nop
 800912a:	e7fe      	b.n	800912a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01e      	beq.n	8009170 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009132:	f000 fae7 	bl	8009704 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	6a3a      	ldr	r2, [r7, #32]
 800914c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	3304      	adds	r3, #4
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fae4 	bl	8007720 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d008      	beq.n	8009170 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009164:	f043 0304 	orr.w	r3, r3, #4
 8009168:	b2da      	uxtb	r2, r3
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009170:	bf00      	nop
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08a      	sub	sp, #40	; 0x28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009186:	2300      	movs	r3, #0
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	623b      	str	r3, [r7, #32]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091a6:	4b1a      	ldr	r3, [pc, #104]	; (8009210 <xTimerGenericCommand+0x98>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d02a      	beq.n	8009204 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2b05      	cmp	r3, #5
 80091be:	dc18      	bgt.n	80091f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091c0:	f7ff fe18 	bl	8008df4 <xTaskGetSchedulerState>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d109      	bne.n	80091de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091ca:	4b11      	ldr	r3, [pc, #68]	; (8009210 <xTimerGenericCommand+0x98>)
 80091cc:	6818      	ldr	r0, [r3, #0]
 80091ce:	f107 0110 	add.w	r1, r7, #16
 80091d2:	2300      	movs	r3, #0
 80091d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d6:	f7fe fc3b 	bl	8007a50 <xQueueGenericSend>
 80091da:	6278      	str	r0, [r7, #36]	; 0x24
 80091dc:	e012      	b.n	8009204 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091de:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <xTimerGenericCommand+0x98>)
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	f107 0110 	add.w	r1, r7, #16
 80091e6:	2300      	movs	r3, #0
 80091e8:	2200      	movs	r2, #0
 80091ea:	f7fe fc31 	bl	8007a50 <xQueueGenericSend>
 80091ee:	6278      	str	r0, [r7, #36]	; 0x24
 80091f0:	e008      	b.n	8009204 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <xTimerGenericCommand+0x98>)
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	f107 0110 	add.w	r1, r7, #16
 80091fa:	2300      	movs	r3, #0
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	f7fe fd25 	bl	8007c4c <xQueueGenericSendFromISR>
 8009202:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009206:	4618      	mov	r0, r3
 8009208:	3728      	adds	r7, #40	; 0x28
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	24001498 	.word	0x24001498

08009214 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af02      	add	r7, sp, #8
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800921e:	4b22      	ldr	r3, [pc, #136]	; (80092a8 <prvProcessExpiredTimer+0x94>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	3304      	adds	r3, #4
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fae1 	bl	80077f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	d022      	beq.n	8009286 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	699a      	ldr	r2, [r3, #24]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	18d1      	adds	r1, r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	6978      	ldr	r0, [r7, #20]
 800924e:	f000 f8d1 	bl	80093f4 <prvInsertTimerInActiveList>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01f      	beq.n	8009298 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009258:	2300      	movs	r3, #0
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	2300      	movs	r3, #0
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	2100      	movs	r1, #0
 8009262:	6978      	ldr	r0, [r7, #20]
 8009264:	f7ff ff88 	bl	8009178 <xTimerGenericCommand>
 8009268:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d113      	bne.n	8009298 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60fb      	str	r3, [r7, #12]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800928c:	f023 0301 	bic.w	r3, r3, #1
 8009290:	b2da      	uxtb	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	6978      	ldr	r0, [r7, #20]
 800929e:	4798      	blx	r3
}
 80092a0:	bf00      	nop
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	24001490 	.word	0x24001490

080092ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092b4:	f107 0308 	add.w	r3, r7, #8
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 f857 	bl	800936c <prvGetNextExpireTime>
 80092be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4619      	mov	r1, r3
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f803 	bl	80092d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092ca:	f000 f8d5 	bl	8009478 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092ce:	e7f1      	b.n	80092b4 <prvTimerTask+0x8>

080092d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092da:	f7ff f9a9 	bl	8008630 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092de:	f107 0308 	add.w	r3, r7, #8
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f866 	bl	80093b4 <prvSampleTimeNow>
 80092e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d130      	bne.n	8009352 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10a      	bne.n	800930c <prvProcessTimerOrBlockTask+0x3c>
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d806      	bhi.n	800930c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092fe:	f7ff f9a5 	bl	800864c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff ff85 	bl	8009214 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800930a:	e024      	b.n	8009356 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d008      	beq.n	8009324 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009312:	4b13      	ldr	r3, [pc, #76]	; (8009360 <prvProcessTimerOrBlockTask+0x90>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <prvProcessTimerOrBlockTask+0x50>
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <prvProcessTimerOrBlockTask+0x52>
 8009320:	2300      	movs	r3, #0
 8009322:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009324:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <prvProcessTimerOrBlockTask+0x94>)
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	4619      	mov	r1, r3
 8009332:	f7fe ff41 	bl	80081b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009336:	f7ff f989 	bl	800864c <xTaskResumeAll>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009340:	4b09      	ldr	r3, [pc, #36]	; (8009368 <prvProcessTimerOrBlockTask+0x98>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
}
 8009350:	e001      	b.n	8009356 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009352:	f7ff f97b 	bl	800864c <xTaskResumeAll>
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	24001494 	.word	0x24001494
 8009364:	24001498 	.word	0x24001498
 8009368:	e000ed04 	.word	0xe000ed04

0800936c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009374:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <prvGetNextExpireTime+0x44>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <prvGetNextExpireTime+0x16>
 800937e:	2201      	movs	r2, #1
 8009380:	e000      	b.n	8009384 <prvGetNextExpireTime+0x18>
 8009382:	2200      	movs	r2, #0
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d105      	bne.n	800939c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009390:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <prvGetNextExpireTime+0x44>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	e001      	b.n	80093a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093a0:	68fb      	ldr	r3, [r7, #12]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	24001490 	.word	0x24001490

080093b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093bc:	f7ff f9e4 	bl	8008788 <xTaskGetTickCount>
 80093c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093c2:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <prvSampleTimeNow+0x3c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d205      	bcs.n	80093d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093cc:	f000 f936 	bl	800963c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e002      	b.n	80093de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093de:	4a04      	ldr	r2, [pc, #16]	; (80093f0 <prvSampleTimeNow+0x3c>)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093e4:	68fb      	ldr	r3, [r7, #12]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	240014a0 	.word	0x240014a0

080093f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
 8009400:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009402:	2300      	movs	r3, #0
 8009404:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	429a      	cmp	r2, r3
 8009418:	d812      	bhi.n	8009440 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	429a      	cmp	r2, r3
 8009426:	d302      	bcc.n	800942e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009428:	2301      	movs	r3, #1
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	e01b      	b.n	8009466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800942e:	4b10      	ldr	r3, [pc, #64]	; (8009470 <prvInsertTimerInActiveList+0x7c>)
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	3304      	adds	r3, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7fe f9a2 	bl	8007782 <vListInsert>
 800943e:	e012      	b.n	8009466 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d206      	bcs.n	8009456 <prvInsertTimerInActiveList+0x62>
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d302      	bcc.n	8009456 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009450:	2301      	movs	r3, #1
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	e007      	b.n	8009466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009456:	4b07      	ldr	r3, [pc, #28]	; (8009474 <prvInsertTimerInActiveList+0x80>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3304      	adds	r3, #4
 800945e:	4619      	mov	r1, r3
 8009460:	4610      	mov	r0, r2
 8009462:	f7fe f98e 	bl	8007782 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009466:	697b      	ldr	r3, [r7, #20]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3718      	adds	r7, #24
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	24001494 	.word	0x24001494
 8009474:	24001490 	.word	0x24001490

08009478 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08e      	sub	sp, #56	; 0x38
 800947c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800947e:	e0ca      	b.n	8009616 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	da18      	bge.n	80094b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009486:	1d3b      	adds	r3, r7, #4
 8009488:	3304      	adds	r3, #4
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10a      	bne.n	80094a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	61fb      	str	r3, [r7, #28]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ae:	6850      	ldr	r0, [r2, #4]
 80094b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b2:	6892      	ldr	r2, [r2, #8]
 80094b4:	4611      	mov	r1, r2
 80094b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f2c0 80ab 	blt.w	8009616 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	3304      	adds	r3, #4
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe f98f 	bl	80077f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094d6:	463b      	mov	r3, r7
 80094d8:	4618      	mov	r0, r3
 80094da:	f7ff ff6b 	bl	80093b4 <prvSampleTimeNow>
 80094de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b09      	cmp	r3, #9
 80094e4:	f200 8096 	bhi.w	8009614 <prvProcessReceivedCommands+0x19c>
 80094e8:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <prvProcessReceivedCommands+0x78>)
 80094ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ee:	bf00      	nop
 80094f0:	08009519 	.word	0x08009519
 80094f4:	08009519 	.word	0x08009519
 80094f8:	08009519 	.word	0x08009519
 80094fc:	0800958d 	.word	0x0800958d
 8009500:	080095a1 	.word	0x080095a1
 8009504:	080095eb 	.word	0x080095eb
 8009508:	08009519 	.word	0x08009519
 800950c:	08009519 	.word	0x08009519
 8009510:	0800958d 	.word	0x0800958d
 8009514:	080095a1 	.word	0x080095a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	b2da      	uxtb	r2, r3
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	18d1      	adds	r1, r2, r3
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009538:	f7ff ff5c 	bl	80093f4 <prvInsertTimerInActiveList>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d069      	beq.n	8009616 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009548:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009550:	f003 0304 	and.w	r3, r3, #4
 8009554:	2b00      	cmp	r3, #0
 8009556:	d05e      	beq.n	8009616 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	441a      	add	r2, r3
 8009560:	2300      	movs	r3, #0
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	2300      	movs	r3, #0
 8009566:	2100      	movs	r1, #0
 8009568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800956a:	f7ff fe05 	bl	8009178 <xTimerGenericCommand>
 800956e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d14f      	bne.n	8009616 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	61bb      	str	r3, [r7, #24]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009592:	f023 0301 	bic.w	r3, r3, #1
 8009596:	b2da      	uxtb	r2, r3
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800959e:	e03a      	b.n	8009616 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095a6:	f043 0301 	orr.w	r3, r3, #1
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10a      	bne.n	80095d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	617b      	str	r3, [r7, #20]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	699a      	ldr	r2, [r3, #24]
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	18d1      	adds	r1, r2, r3
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e4:	f7ff ff06 	bl	80093f4 <prvInsertTimerInActiveList>
					break;
 80095e8:	e015      	b.n	8009616 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d103      	bne.n	8009600 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095fa:	f000 fc01 	bl	8009e00 <vPortFree>
 80095fe:	e00a      	b.n	8009616 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009606:	f023 0301 	bic.w	r3, r3, #1
 800960a:	b2da      	uxtb	r2, r3
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009612:	e000      	b.n	8009616 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009614:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009616:	4b08      	ldr	r3, [pc, #32]	; (8009638 <prvProcessReceivedCommands+0x1c0>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	1d39      	adds	r1, r7, #4
 800961c:	2200      	movs	r2, #0
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fbb0 	bl	8007d84 <xQueueReceive>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	f47f af2a 	bne.w	8009480 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	3730      	adds	r7, #48	; 0x30
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	24001498 	.word	0x24001498

0800963c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009642:	e048      	b.n	80096d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009644:	4b2d      	ldr	r3, [pc, #180]	; (80096fc <prvSwitchTimerLists+0xc0>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800964e:	4b2b      	ldr	r3, [pc, #172]	; (80096fc <prvSwitchTimerLists+0xc0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3304      	adds	r3, #4
 800965c:	4618      	mov	r0, r3
 800965e:	f7fe f8c9 	bl	80077f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d02e      	beq.n	80096d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	4413      	add	r3, r2
 8009680:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	429a      	cmp	r2, r3
 8009688:	d90e      	bls.n	80096a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009696:	4b19      	ldr	r3, [pc, #100]	; (80096fc <prvSwitchTimerLists+0xc0>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3304      	adds	r3, #4
 800969e:	4619      	mov	r1, r3
 80096a0:	4610      	mov	r0, r2
 80096a2:	f7fe f86e 	bl	8007782 <vListInsert>
 80096a6:	e016      	b.n	80096d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096a8:	2300      	movs	r3, #0
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	2300      	movs	r3, #0
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	2100      	movs	r1, #0
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff fd60 	bl	8009178 <xTimerGenericCommand>
 80096b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	603b      	str	r3, [r7, #0]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096d6:	4b09      	ldr	r3, [pc, #36]	; (80096fc <prvSwitchTimerLists+0xc0>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1b1      	bne.n	8009644 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096e0:	4b06      	ldr	r3, [pc, #24]	; (80096fc <prvSwitchTimerLists+0xc0>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096e6:	4b06      	ldr	r3, [pc, #24]	; (8009700 <prvSwitchTimerLists+0xc4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a04      	ldr	r2, [pc, #16]	; (80096fc <prvSwitchTimerLists+0xc0>)
 80096ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096ee:	4a04      	ldr	r2, [pc, #16]	; (8009700 <prvSwitchTimerLists+0xc4>)
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	6013      	str	r3, [r2, #0]
}
 80096f4:	bf00      	nop
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	24001490 	.word	0x24001490
 8009700:	24001494 	.word	0x24001494

08009704 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800970a:	f000 f98b 	bl	8009a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800970e:	4b15      	ldr	r3, [pc, #84]	; (8009764 <prvCheckForValidListAndQueue+0x60>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d120      	bne.n	8009758 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009716:	4814      	ldr	r0, [pc, #80]	; (8009768 <prvCheckForValidListAndQueue+0x64>)
 8009718:	f7fd ffe2 	bl	80076e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800971c:	4813      	ldr	r0, [pc, #76]	; (800976c <prvCheckForValidListAndQueue+0x68>)
 800971e:	f7fd ffdf 	bl	80076e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009722:	4b13      	ldr	r3, [pc, #76]	; (8009770 <prvCheckForValidListAndQueue+0x6c>)
 8009724:	4a10      	ldr	r2, [pc, #64]	; (8009768 <prvCheckForValidListAndQueue+0x64>)
 8009726:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009728:	4b12      	ldr	r3, [pc, #72]	; (8009774 <prvCheckForValidListAndQueue+0x70>)
 800972a:	4a10      	ldr	r2, [pc, #64]	; (800976c <prvCheckForValidListAndQueue+0x68>)
 800972c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800972e:	2300      	movs	r3, #0
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	4b11      	ldr	r3, [pc, #68]	; (8009778 <prvCheckForValidListAndQueue+0x74>)
 8009734:	4a11      	ldr	r2, [pc, #68]	; (800977c <prvCheckForValidListAndQueue+0x78>)
 8009736:	2110      	movs	r1, #16
 8009738:	200a      	movs	r0, #10
 800973a:	f7fe f8ed 	bl	8007918 <xQueueGenericCreateStatic>
 800973e:	4603      	mov	r3, r0
 8009740:	4a08      	ldr	r2, [pc, #32]	; (8009764 <prvCheckForValidListAndQueue+0x60>)
 8009742:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009744:	4b07      	ldr	r3, [pc, #28]	; (8009764 <prvCheckForValidListAndQueue+0x60>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800974c:	4b05      	ldr	r3, [pc, #20]	; (8009764 <prvCheckForValidListAndQueue+0x60>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	490b      	ldr	r1, [pc, #44]	; (8009780 <prvCheckForValidListAndQueue+0x7c>)
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fd06 	bl	8008164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009758:	f000 f994 	bl	8009a84 <vPortExitCritical>
}
 800975c:	bf00      	nop
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	24001498 	.word	0x24001498
 8009768:	24001468 	.word	0x24001468
 800976c:	2400147c 	.word	0x2400147c
 8009770:	24001490 	.word	0x24001490
 8009774:	24001494 	.word	0x24001494
 8009778:	24001544 	.word	0x24001544
 800977c:	240014a4 	.word	0x240014a4
 8009780:	0800a104 	.word	0x0800a104

08009784 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10a      	bne.n	80097ac <pvTimerGetTimerID+0x28>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	60fb      	str	r3, [r7, #12]
}
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80097ac:	f000 f93a 	bl	8009a24 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80097b6:	f000 f965 	bl	8009a84 <vPortExitCritical>

	return pvReturn;
 80097ba:	693b      	ldr	r3, [r7, #16]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3b04      	subs	r3, #4
 80097d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3b04      	subs	r3, #4
 80097e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f023 0201 	bic.w	r2, r3, #1
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3b04      	subs	r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097f4:	4a0c      	ldr	r2, [pc, #48]	; (8009828 <pxPortInitialiseStack+0x64>)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3b14      	subs	r3, #20
 80097fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3b04      	subs	r3, #4
 800980a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f06f 0202 	mvn.w	r2, #2
 8009812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3b20      	subs	r3, #32
 8009818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800981a:	68fb      	ldr	r3, [r7, #12]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	0800982d 	.word	0x0800982d

0800982c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009836:	4b12      	ldr	r3, [pc, #72]	; (8009880 <prvTaskExitError+0x54>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d00a      	beq.n	8009856 <prvTaskExitError+0x2a>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	60fb      	str	r3, [r7, #12]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <prvTaskExitError+0x28>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	60bb      	str	r3, [r7, #8]
}
 8009868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800986a:	bf00      	nop
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0fc      	beq.n	800986c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009872:	bf00      	nop
 8009874:	bf00      	nop
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	24000010 	.word	0x24000010
	...

08009890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009890:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <pxCurrentTCBConst2>)
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	6808      	ldr	r0, [r1, #0]
 8009896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989a:	f380 8809 	msr	PSP, r0
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f380 8811 	msr	BASEPRI, r0
 80098aa:	4770      	bx	lr
 80098ac:	f3af 8000 	nop.w

080098b0 <pxCurrentTCBConst2>:
 80098b0:	24000f68 	.word	0x24000f68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop

080098b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098b8:	4808      	ldr	r0, [pc, #32]	; (80098dc <prvPortStartFirstTask+0x24>)
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	f380 8808 	msr	MSP, r0
 80098c2:	f04f 0000 	mov.w	r0, #0
 80098c6:	f380 8814 	msr	CONTROL, r0
 80098ca:	b662      	cpsie	i
 80098cc:	b661      	cpsie	f
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	df00      	svc	0
 80098d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098da:	bf00      	nop
 80098dc:	e000ed08 	.word	0xe000ed08

080098e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098e6:	4b46      	ldr	r3, [pc, #280]	; (8009a00 <xPortStartScheduler+0x120>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a46      	ldr	r2, [pc, #280]	; (8009a04 <xPortStartScheduler+0x124>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d10a      	bne.n	8009906 <xPortStartScheduler+0x26>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	613b      	str	r3, [r7, #16]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009906:	4b3e      	ldr	r3, [pc, #248]	; (8009a00 <xPortStartScheduler+0x120>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a3f      	ldr	r2, [pc, #252]	; (8009a08 <xPortStartScheduler+0x128>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d10a      	bne.n	8009926 <xPortStartScheduler+0x46>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	60fb      	str	r3, [r7, #12]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009926:	4b39      	ldr	r3, [pc, #228]	; (8009a0c <xPortStartScheduler+0x12c>)
 8009928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	22ff      	movs	r2, #255	; 0xff
 8009936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009948:	b2da      	uxtb	r2, r3
 800994a:	4b31      	ldr	r3, [pc, #196]	; (8009a10 <xPortStartScheduler+0x130>)
 800994c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800994e:	4b31      	ldr	r3, [pc, #196]	; (8009a14 <xPortStartScheduler+0x134>)
 8009950:	2207      	movs	r2, #7
 8009952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009954:	e009      	b.n	800996a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009956:	4b2f      	ldr	r3, [pc, #188]	; (8009a14 <xPortStartScheduler+0x134>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3b01      	subs	r3, #1
 800995c:	4a2d      	ldr	r2, [pc, #180]	; (8009a14 <xPortStartScheduler+0x134>)
 800995e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	b2db      	uxtb	r3, r3
 8009968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d0ef      	beq.n	8009956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009976:	4b27      	ldr	r3, [pc, #156]	; (8009a14 <xPortStartScheduler+0x134>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1c3 0307 	rsb	r3, r3, #7
 800997e:	2b04      	cmp	r3, #4
 8009980:	d00a      	beq.n	8009998 <xPortStartScheduler+0xb8>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	60bb      	str	r3, [r7, #8]
}
 8009994:	bf00      	nop
 8009996:	e7fe      	b.n	8009996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009998:	4b1e      	ldr	r3, [pc, #120]	; (8009a14 <xPortStartScheduler+0x134>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	021b      	lsls	r3, r3, #8
 800999e:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <xPortStartScheduler+0x134>)
 80099a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099a2:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <xPortStartScheduler+0x134>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099aa:	4a1a      	ldr	r2, [pc, #104]	; (8009a14 <xPortStartScheduler+0x134>)
 80099ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099b6:	4b18      	ldr	r3, [pc, #96]	; (8009a18 <xPortStartScheduler+0x138>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a17      	ldr	r2, [pc, #92]	; (8009a18 <xPortStartScheduler+0x138>)
 80099bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099c2:	4b15      	ldr	r3, [pc, #84]	; (8009a18 <xPortStartScheduler+0x138>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a14      	ldr	r2, [pc, #80]	; (8009a18 <xPortStartScheduler+0x138>)
 80099c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099ce:	f000 f8dd 	bl	8009b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099d2:	4b12      	ldr	r3, [pc, #72]	; (8009a1c <xPortStartScheduler+0x13c>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099d8:	f000 f8fc 	bl	8009bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099dc:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <xPortStartScheduler+0x140>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a0f      	ldr	r2, [pc, #60]	; (8009a20 <xPortStartScheduler+0x140>)
 80099e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099e8:	f7ff ff66 	bl	80098b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099ec:	f7fe ff96 	bl	800891c <vTaskSwitchContext>
	prvTaskExitError();
 80099f0:	f7ff ff1c 	bl	800982c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	e000ed00 	.word	0xe000ed00
 8009a04:	410fc271 	.word	0x410fc271
 8009a08:	410fc270 	.word	0x410fc270
 8009a0c:	e000e400 	.word	0xe000e400
 8009a10:	24001594 	.word	0x24001594
 8009a14:	24001598 	.word	0x24001598
 8009a18:	e000ed20 	.word	0xe000ed20
 8009a1c:	24000010 	.word	0x24000010
 8009a20:	e000ef34 	.word	0xe000ef34

08009a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	607b      	str	r3, [r7, #4]
}
 8009a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a3e:	4b0f      	ldr	r3, [pc, #60]	; (8009a7c <vPortEnterCritical+0x58>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	4a0d      	ldr	r2, [pc, #52]	; (8009a7c <vPortEnterCritical+0x58>)
 8009a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a48:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <vPortEnterCritical+0x58>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d10f      	bne.n	8009a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a50:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <vPortEnterCritical+0x5c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	603b      	str	r3, [r7, #0]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <vPortEnterCritical+0x4a>
	}
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	24000010 	.word	0x24000010
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a8a:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <vPortExitCritical+0x50>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10a      	bne.n	8009aa8 <vPortExitCritical+0x24>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	607b      	str	r3, [r7, #4]
}
 8009aa4:	bf00      	nop
 8009aa6:	e7fe      	b.n	8009aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <vPortExitCritical+0x50>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	4a09      	ldr	r2, [pc, #36]	; (8009ad4 <vPortExitCritical+0x50>)
 8009ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ab2:	4b08      	ldr	r3, [pc, #32]	; (8009ad4 <vPortExitCritical+0x50>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d105      	bne.n	8009ac6 <vPortExitCritical+0x42>
 8009aba:	2300      	movs	r3, #0
 8009abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	f383 8811 	msr	BASEPRI, r3
}
 8009ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	24000010 	.word	0x24000010
	...

08009ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ae0:	f3ef 8009 	mrs	r0, PSP
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <pxCurrentTCBConst>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	f01e 0f10 	tst.w	lr, #16
 8009af0:	bf08      	it	eq
 8009af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	6010      	str	r0, [r2, #0]
 8009afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b04:	f380 8811 	msr	BASEPRI, r0
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f7fe ff04 	bl	800891c <vTaskSwitchContext>
 8009b14:	f04f 0000 	mov.w	r0, #0
 8009b18:	f380 8811 	msr	BASEPRI, r0
 8009b1c:	bc09      	pop	{r0, r3}
 8009b1e:	6819      	ldr	r1, [r3, #0]
 8009b20:	6808      	ldr	r0, [r1, #0]
 8009b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b26:	f01e 0f10 	tst.w	lr, #16
 8009b2a:	bf08      	it	eq
 8009b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b30:	f380 8809 	msr	PSP, r0
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	f3af 8000 	nop.w

08009b40 <pxCurrentTCBConst>:
 8009b40:	24000f68 	.word	0x24000f68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop

08009b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	607b      	str	r3, [r7, #4]
}
 8009b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b62:	f7fe fe21 	bl	80087a8 <xTaskIncrementTick>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b6c:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <xPortSysTickHandler+0x40>)
 8009b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	f383 8811 	msr	BASEPRI, r3
}
 8009b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	e000ed04 	.word	0xe000ed04

08009b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <vPortSetupTimerInterrupt+0x34>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b96:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <vPortSetupTimerInterrupt+0x38>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <vPortSetupTimerInterrupt+0x3c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a0a      	ldr	r2, [pc, #40]	; (8009bcc <vPortSetupTimerInterrupt+0x40>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	099b      	lsrs	r3, r3, #6
 8009ba8:	4a09      	ldr	r2, [pc, #36]	; (8009bd0 <vPortSetupTimerInterrupt+0x44>)
 8009baa:	3b01      	subs	r3, #1
 8009bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bae:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <vPortSetupTimerInterrupt+0x34>)
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	601a      	str	r2, [r3, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	e000e010 	.word	0xe000e010
 8009bc4:	e000e018 	.word	0xe000e018
 8009bc8:	24000000 	.word	0x24000000
 8009bcc:	10624dd3 	.word	0x10624dd3
 8009bd0:	e000e014 	.word	0xe000e014

08009bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009be4 <vPortEnableVFP+0x10>
 8009bd8:	6801      	ldr	r1, [r0, #0]
 8009bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009bde:	6001      	str	r1, [r0, #0]
 8009be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009be2:	bf00      	nop
 8009be4:	e000ed88 	.word	0xe000ed88

08009be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bee:	f3ef 8305 	mrs	r3, IPSR
 8009bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b0f      	cmp	r3, #15
 8009bf8:	d914      	bls.n	8009c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bfa:	4a17      	ldr	r2, [pc, #92]	; (8009c58 <vPortValidateInterruptPriority+0x70>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4413      	add	r3, r2
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c04:	4b15      	ldr	r3, [pc, #84]	; (8009c5c <vPortValidateInterruptPriority+0x74>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	7afa      	ldrb	r2, [r7, #11]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d20a      	bcs.n	8009c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	607b      	str	r3, [r7, #4]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c24:	4b0e      	ldr	r3, [pc, #56]	; (8009c60 <vPortValidateInterruptPriority+0x78>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c2c:	4b0d      	ldr	r3, [pc, #52]	; (8009c64 <vPortValidateInterruptPriority+0x7c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d90a      	bls.n	8009c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	603b      	str	r3, [r7, #0]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <vPortValidateInterruptPriority+0x60>
	}
 8009c4a:	bf00      	nop
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	e000e3f0 	.word	0xe000e3f0
 8009c5c:	24001594 	.word	0x24001594
 8009c60:	e000ed0c 	.word	0xe000ed0c
 8009c64:	24001598 	.word	0x24001598

08009c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08a      	sub	sp, #40	; 0x28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c70:	2300      	movs	r3, #0
 8009c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c74:	f7fe fcdc 	bl	8008630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c78:	4b5b      	ldr	r3, [pc, #364]	; (8009de8 <pvPortMalloc+0x180>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c80:	f000 f920 	bl	8009ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c84:	4b59      	ldr	r3, [pc, #356]	; (8009dec <pvPortMalloc+0x184>)
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f040 8093 	bne.w	8009db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d01d      	beq.n	8009cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c98:	2208      	movs	r2, #8
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d014      	beq.n	8009cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f023 0307 	bic.w	r3, r3, #7
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	617b      	str	r3, [r7, #20]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d06e      	beq.n	8009db8 <pvPortMalloc+0x150>
 8009cda:	4b45      	ldr	r3, [pc, #276]	; (8009df0 <pvPortMalloc+0x188>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d869      	bhi.n	8009db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ce4:	4b43      	ldr	r3, [pc, #268]	; (8009df4 <pvPortMalloc+0x18c>)
 8009ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ce8:	4b42      	ldr	r3, [pc, #264]	; (8009df4 <pvPortMalloc+0x18c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cee:	e004      	b.n	8009cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d903      	bls.n	8009d0c <pvPortMalloc+0xa4>
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1f1      	bne.n	8009cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d0c:	4b36      	ldr	r3, [pc, #216]	; (8009de8 <pvPortMalloc+0x180>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d050      	beq.n	8009db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	4413      	add	r3, r2
 8009d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	2308      	movs	r3, #8
 8009d32:	005b      	lsls	r3, r3, #1
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d91f      	bls.n	8009d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <pvPortMalloc+0xf8>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	613b      	str	r3, [r7, #16]
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	1ad2      	subs	r2, r2, r3
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d72:	69b8      	ldr	r0, [r7, #24]
 8009d74:	f000 f908 	bl	8009f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d78:	4b1d      	ldr	r3, [pc, #116]	; (8009df0 <pvPortMalloc+0x188>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	4a1b      	ldr	r2, [pc, #108]	; (8009df0 <pvPortMalloc+0x188>)
 8009d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d86:	4b1a      	ldr	r3, [pc, #104]	; (8009df0 <pvPortMalloc+0x188>)
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	4b1b      	ldr	r3, [pc, #108]	; (8009df8 <pvPortMalloc+0x190>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d203      	bcs.n	8009d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d92:	4b17      	ldr	r3, [pc, #92]	; (8009df0 <pvPortMalloc+0x188>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a18      	ldr	r2, [pc, #96]	; (8009df8 <pvPortMalloc+0x190>)
 8009d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	4b13      	ldr	r3, [pc, #76]	; (8009dec <pvPortMalloc+0x184>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	431a      	orrs	r2, r3
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009dae:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <pvPortMalloc+0x194>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	3301      	adds	r3, #1
 8009db4:	4a11      	ldr	r2, [pc, #68]	; (8009dfc <pvPortMalloc+0x194>)
 8009db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009db8:	f7fe fc48 	bl	800864c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	f003 0307 	and.w	r3, r3, #7
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <pvPortMalloc+0x174>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	60fb      	str	r3, [r7, #12]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <pvPortMalloc+0x172>
	return pvReturn;
 8009ddc:	69fb      	ldr	r3, [r7, #28]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3728      	adds	r7, #40	; 0x28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	240051a4 	.word	0x240051a4
 8009dec:	240051b8 	.word	0x240051b8
 8009df0:	240051a8 	.word	0x240051a8
 8009df4:	2400519c 	.word	0x2400519c
 8009df8:	240051ac 	.word	0x240051ac
 8009dfc:	240051b0 	.word	0x240051b0

08009e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d04d      	beq.n	8009eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e12:	2308      	movs	r3, #8
 8009e14:	425b      	negs	r3, r3
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4413      	add	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	4b24      	ldr	r3, [pc, #144]	; (8009eb8 <vPortFree+0xb8>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4013      	ands	r3, r2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <vPortFree+0x44>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	60fb      	str	r3, [r7, #12]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00a      	beq.n	8009e62 <vPortFree+0x62>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	60bb      	str	r3, [r7, #8]
}
 8009e5e:	bf00      	nop
 8009e60:	e7fe      	b.n	8009e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <vPortFree+0xb8>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d01e      	beq.n	8009eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d11a      	bne.n	8009eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b0e      	ldr	r3, [pc, #56]	; (8009eb8 <vPortFree+0xb8>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	43db      	mvns	r3, r3
 8009e82:	401a      	ands	r2, r3
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e88:	f7fe fbd2 	bl	8008630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <vPortFree+0xbc>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4413      	add	r3, r2
 8009e96:	4a09      	ldr	r2, [pc, #36]	; (8009ebc <vPortFree+0xbc>)
 8009e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e9a:	6938      	ldr	r0, [r7, #16]
 8009e9c:	f000 f874 	bl	8009f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ea0:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <vPortFree+0xc0>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	4a06      	ldr	r2, [pc, #24]	; (8009ec0 <vPortFree+0xc0>)
 8009ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009eaa:	f7fe fbcf 	bl	800864c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009eae:	bf00      	nop
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	240051b8 	.word	0x240051b8
 8009ebc:	240051a8 	.word	0x240051a8
 8009ec0:	240051b4 	.word	0x240051b4

08009ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ed0:	4b27      	ldr	r3, [pc, #156]	; (8009f70 <prvHeapInit+0xac>)
 8009ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00c      	beq.n	8009ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3307      	adds	r3, #7
 8009ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	4a1f      	ldr	r2, [pc, #124]	; (8009f70 <prvHeapInit+0xac>)
 8009ef4:	4413      	add	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009efc:	4a1d      	ldr	r2, [pc, #116]	; (8009f74 <prvHeapInit+0xb0>)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f02:	4b1c      	ldr	r3, [pc, #112]	; (8009f74 <prvHeapInit+0xb0>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f10:	2208      	movs	r2, #8
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0307 	bic.w	r3, r3, #7
 8009f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4a15      	ldr	r2, [pc, #84]	; (8009f78 <prvHeapInit+0xb4>)
 8009f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f26:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <prvHeapInit+0xb4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f2e:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <prvHeapInit+0xb4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	1ad2      	subs	r2, r2, r3
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f44:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <prvHeapInit+0xb4>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <prvHeapInit+0xb8>)
 8009f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4a09      	ldr	r2, [pc, #36]	; (8009f80 <prvHeapInit+0xbc>)
 8009f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f5c:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <prvHeapInit+0xc0>)
 8009f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f62:	601a      	str	r2, [r3, #0]
}
 8009f64:	bf00      	nop
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	2400159c 	.word	0x2400159c
 8009f74:	2400519c 	.word	0x2400519c
 8009f78:	240051a4 	.word	0x240051a4
 8009f7c:	240051ac 	.word	0x240051ac
 8009f80:	240051a8 	.word	0x240051a8
 8009f84:	240051b8 	.word	0x240051b8

08009f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f90:	4b28      	ldr	r3, [pc, #160]	; (800a034 <prvInsertBlockIntoFreeList+0xac>)
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	e002      	b.n	8009f9c <prvInsertBlockIntoFreeList+0x14>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d8f7      	bhi.n	8009f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d108      	bne.n	8009fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	441a      	add	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d118      	bne.n	800a010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <prvInsertBlockIntoFreeList+0xb0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d00d      	beq.n	800a006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	441a      	add	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	e008      	b.n	800a018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a006:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <prvInsertBlockIntoFreeList+0xb0>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	e003      	b.n	800a018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d002      	beq.n	800a026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a026:	bf00      	nop
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	2400519c 	.word	0x2400519c
 800a038:	240051a4 	.word	0x240051a4

0800a03c <memset>:
 800a03c:	4402      	add	r2, r0
 800a03e:	4603      	mov	r3, r0
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <memset+0xa>
 800a044:	4770      	bx	lr
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <memset+0x4>

0800a04c <__libc_init_array>:
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	4d0d      	ldr	r5, [pc, #52]	; (800a084 <__libc_init_array+0x38>)
 800a050:	4c0d      	ldr	r4, [pc, #52]	; (800a088 <__libc_init_array+0x3c>)
 800a052:	1b64      	subs	r4, r4, r5
 800a054:	10a4      	asrs	r4, r4, #2
 800a056:	2600      	movs	r6, #0
 800a058:	42a6      	cmp	r6, r4
 800a05a:	d109      	bne.n	800a070 <__libc_init_array+0x24>
 800a05c:	4d0b      	ldr	r5, [pc, #44]	; (800a08c <__libc_init_array+0x40>)
 800a05e:	4c0c      	ldr	r4, [pc, #48]	; (800a090 <__libc_init_array+0x44>)
 800a060:	f000 f826 	bl	800a0b0 <_init>
 800a064:	1b64      	subs	r4, r4, r5
 800a066:	10a4      	asrs	r4, r4, #2
 800a068:	2600      	movs	r6, #0
 800a06a:	42a6      	cmp	r6, r4
 800a06c:	d105      	bne.n	800a07a <__libc_init_array+0x2e>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	f855 3b04 	ldr.w	r3, [r5], #4
 800a074:	4798      	blx	r3
 800a076:	3601      	adds	r6, #1
 800a078:	e7ee      	b.n	800a058 <__libc_init_array+0xc>
 800a07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a07e:	4798      	blx	r3
 800a080:	3601      	adds	r6, #1
 800a082:	e7f2      	b.n	800a06a <__libc_init_array+0x1e>
 800a084:	0800a190 	.word	0x0800a190
 800a088:	0800a190 	.word	0x0800a190
 800a08c:	0800a190 	.word	0x0800a190
 800a090:	0800a194 	.word	0x0800a194

0800a094 <memcpy>:
 800a094:	440a      	add	r2, r1
 800a096:	4291      	cmp	r1, r2
 800a098:	f100 33ff 	add.w	r3, r0, #4294967295
 800a09c:	d100      	bne.n	800a0a0 <memcpy+0xc>
 800a09e:	4770      	bx	lr
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0aa:	4291      	cmp	r1, r2
 800a0ac:	d1f9      	bne.n	800a0a2 <memcpy+0xe>
 800a0ae:	bd10      	pop	{r4, pc}

0800a0b0 <_init>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	bf00      	nop
 800a0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0b6:	bc08      	pop	{r3}
 800a0b8:	469e      	mov	lr, r3
 800a0ba:	4770      	bx	lr

0800a0bc <_fini>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr
