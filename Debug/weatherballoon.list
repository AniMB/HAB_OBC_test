
weatherballoon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a158  0800a158  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a160  0800a160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a164  0800a164  0001a164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800a168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800a17c  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800a1dc  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050e8  240000d4  0800a23c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240051bc  0800a23c  000251bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029a22  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004877  00000000  00000000  00049b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef8  00000000  00000000  0004e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001820  00000000  00000000  000502d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000571d  00000000  00000000  00051af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025691  00000000  00000000  00057215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00178ff2  00000000  00000000  0007c8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000860c  00000000  00000000  001f5898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001fdea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a080 	.word	0x0800a080

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800a080 	.word	0x0800a080

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cutBalloon>:
/* USER CODE BEGIN 0 */




void cutBalloon(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	//set to pin to high HAL FUNCTION WITH PIN
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2120      	movs	r1, #32
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <cutBalloon+0x14>)
 80005e6:	f001 fe87 	bl	80022f8 <HAL_GPIO_WritePin>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	58020400 	.word	0x58020400

080005f4 <lowPowerMode>:

void lowPowerMode(){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

    //stopTransmitter();
    while(1){
 80005f8:	e7fe      	b.n	80005f8 <lowPowerMode+0x4>

080005fa <checkBattery>:
    }
}

void checkBattery(){
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
	float batteryVoltage = 0;
 8000600:	f04f 0300 	mov.w	r3, #0
 8000604:	607b      	str	r3, [r7, #4]

		if (batteryVoltage <= powMin){
 8000606:	edd7 7a01 	vldr	s15, [r7, #4]
 800060a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800060e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000616:	d900      	bls.n	800061a <checkBattery+0x20>
			lowPowerMode();
		}
}
 8000618:	e001      	b.n	800061e <checkBattery+0x24>
			lowPowerMode();
 800061a:	f7ff ffeb 	bl	80005f4 <lowPowerMode>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <checkAltitude>:



int checkAltitude(float altitude){
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (altitude < prevAltitude){
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <checkAltitude+0x54>)
 8000634:	edd3 7a00 	vldr	s15, [r3]
 8000638:	ed97 7a01 	vldr	s14, [r7, #4]
 800063c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000644:	d503      	bpl.n	800064e <checkAltitude+0x26>
		descendFlag = 1;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <checkAltitude+0x58>)
 8000648:	2201      	movs	r2, #1
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e002      	b.n	8000654 <checkAltitude+0x2c>
	} else {
		descendFlag = 0;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <checkAltitude+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
	}
    if (altitude >= maxAltitude){
 8000654:	edd7 7a01 	vldr	s15, [r7, #4]
 8000658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800065c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000660:	db01      	blt.n	8000666 <checkAltitude+0x3e>
        return 1;
 8000662:	2301      	movs	r3, #1
 8000664:	e003      	b.n	800066e <checkAltitude+0x46>
    }
    prevAltitude = altitude;
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <checkAltitude+0x54>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6013      	str	r3, [r2, #0]
    return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	240000f4 	.word	0x240000f4
 8000680:	240000f0 	.word	0x240000f0

08000684 <checkLocation>:


void checkLocation(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
    // getLongitude(), getLatitude(), getAltitude(), and locationDisplay() are placeholders
   // int longitude = function.longitude();
   // int latitude = function.latitude();
   // int altitude = function.altitude();

    float longitude = 0;
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
    float latitude = 0;
 8000690:	f04f 0300 	mov.w	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
    float altitude = 0;
 8000696:	f04f 0300 	mov.w	r3, #0
 800069a:	607b      	str	r3, [r7, #4]


    if (longitude < maxLongitude && longitude > minLongitude){
 800069c:	edd7 7a03 	vldr	s15, [r7, #12]
 80006a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a8:	d51e      	bpl.n	80006e8 <checkLocation+0x64>
 80006aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80006ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b6:	dd17      	ble.n	80006e8 <checkLocation+0x64>
        if(latitude < maxLatitude && latitude > minLatitude){
 80006b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80006bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c4:	d510      	bpl.n	80006e8 <checkLocation+0x64>
 80006c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d2:	dd09      	ble.n	80006e8 <checkLocation+0x64>
            if(checkAltitude(altitude) == 1){
 80006d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80006d8:	f7ff ffa6 	bl	8000628 <checkAltitude>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d105      	bne.n	80006ee <checkLocation+0x6a>
                cutBalloon();
 80006e2:	f7ff ff7b 	bl	80005dc <cutBalloon>
            }
            return;
 80006e6:	e002      	b.n	80006ee <checkLocation+0x6a>
        }
    }

    cutBalloon();
 80006e8:	f7ff ff78 	bl	80005dc <cutBalloon>
 80006ec:	e000      	b.n	80006f0 <checkLocation+0x6c>
            return;
 80006ee:	bf00      	nop
}
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fea8 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f83c 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f000 f9d6 	bl	8000ab4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000708:	f000 f8b8 	bl	800087c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800070c:	f000 f954 	bl	80009b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000710:	f000 f99e 	bl	8000a50 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000714:	f000 f8fe 	bl	8000914 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000718:	f006 fe2a 	bl	8007370 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of batteryTimer */
  batteryTimerHandle = osTimerNew(BatteryCallback, osTimerPeriodic, NULL, &batteryTimer_attributes);
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <main+0x60>)
 800071e:	2200      	movs	r2, #0
 8000720:	2101      	movs	r1, #1
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <main+0x64>)
 8000724:	f006 ff16 	bl	8007554 <osTimerNew>
 8000728:	4603      	mov	r3, r0
 800072a:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <main+0x68>)
 800072c:	6013      	str	r3, [r2, #0]

  /* creation of descensionTimer */
  descensionTimerHandle = osTimerNew(DescensionCallback, osTimerPeriodic, NULL, &descensionTimer_attributes);
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <main+0x6c>)
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x70>)
 8000736:	f006 ff0d 	bl	8007554 <osTimerNew>
 800073a:	4603      	mov	r3, r0
 800073c:	4a0b      	ldr	r2, [pc, #44]	; (800076c <main+0x74>)
 800073e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PollingLoop */
  PollingLoopHandle = osThreadNew(StartPollingLoop, NULL, &PollingLoop_attributes);
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <main+0x78>)
 8000742:	2100      	movs	r1, #0
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <main+0x7c>)
 8000746:	f006 fe5d 	bl	8007404 <osThreadNew>
 800074a:	4603      	mov	r3, r0
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <main+0x80>)
 800074e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000750:	f006 fe32 	bl	80073b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x5c>
 8000756:	bf00      	nop
 8000758:	0800a100 	.word	0x0800a100
 800075c:	08000cbd 	.word	0x08000cbd
 8000760:	2400080c 	.word	0x2400080c
 8000764:	0800a110 	.word	0x0800a110
 8000768:	08000cd1 	.word	0x08000cd1
 800076c:	24000810 	.word	0x24000810
 8000770:	0800a0dc 	.word	0x0800a0dc
 8000774:	08000c6d 	.word	0x08000c6d
 8000778:	24000808 	.word	0x24000808

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b09c      	sub	sp, #112	; 0x70
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000786:	224c      	movs	r2, #76	; 0x4c
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f009 fc3e 	bl	800a00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2220      	movs	r2, #32
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f009 fc38 	bl	800a00c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800079c:	2002      	movs	r0, #2
 800079e:	f001 ff0d 	bl	80025bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <SystemClock_Config+0xf8>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	4a32      	ldr	r2, [pc, #200]	; (8000874 <SystemClock_Config+0xf8>)
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <SystemClock_Config+0xf8>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <SystemClock_Config+0xfc>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c4:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <SystemClock_Config+0xfc>)
 80007c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <SystemClock_Config+0xfc>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d8:	bf00      	nop
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <SystemClock_Config+0xfc>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e6:	d1f8      	bne.n	80007da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007e8:	2303      	movs	r3, #3
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000806:	2318      	movs	r3, #24
 8000808:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080e:	2304      	movs	r3, #4
 8000810:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000816:	230c      	movs	r3, #12
 8000818:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800081a:	2300      	movs	r3, #0
 800081c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4618      	mov	r0, r3
 8000828:	f001 ff12 	bl	8002650 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000832:	f000 fa69 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	233f      	movs	r3, #63	; 0x3f
 8000838:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2101      	movs	r1, #1
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fb52 	bl	8002f04 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000866:	f000 fa4f 	bl	8000d08 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3770      	adds	r7, #112	; 0x70
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	58000400 	.word	0x58000400
 8000878:	58024800 	.word	0x58024800

0800087c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_ETH_Init+0x80>)
 8000882:	4a1f      	ldr	r2, [pc, #124]	; (8000900 <MX_ETH_Init+0x84>)
 8000884:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_ETH_Init+0x88>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_ETH_Init+0x88>)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_ETH_Init+0x88>)
 8000894:	22e1      	movs	r2, #225	; 0xe1
 8000896:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_ETH_Init+0x88>)
 800089a:	2200      	movs	r2, #0
 800089c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_ETH_Init+0x88>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_ETH_Init+0x88>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_ETH_Init+0x80>)
 80008ac:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_ETH_Init+0x88>)
 80008ae:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_ETH_Init+0x80>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_ETH_Init+0x80>)
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <MX_ETH_Init+0x8c>)
 80008ba:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_ETH_Init+0x80>)
 80008be:	4a13      	ldr	r2, [pc, #76]	; (800090c <MX_ETH_Init+0x90>)
 80008c0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_ETH_Init+0x80>)
 80008c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008c8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_ETH_Init+0x80>)
 80008cc:	f000 ff40 	bl	8001750 <HAL_ETH_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008d6:	f000 fa17 	bl	8000d08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008da:	2238      	movs	r2, #56	; 0x38
 80008dc:	2100      	movs	r1, #0
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_ETH_Init+0x94>)
 80008e0:	f009 fb94 	bl	800a00c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_ETH_Init+0x94>)
 80008e6:	2221      	movs	r2, #33	; 0x21
 80008e8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_ETH_Init+0x94>)
 80008ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008f0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_ETH_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000130 	.word	0x24000130
 8000900:	40028000 	.word	0x40028000
 8000904:	24000814 	.word	0x24000814
 8000908:	24000074 	.word	0x24000074
 800090c:	24000014 	.word	0x24000014
 8000910:	240000f8 	.word	0x240000f8

08000914 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800091a:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <MX_SPI1_Init+0xa0>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000926:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800092a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800092e:	2203      	movs	r2, #3
 8000930:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000940:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000944:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000960:	2200      	movs	r2, #0
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000966:	2200      	movs	r2, #0
 8000968:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800096c:	2200      	movs	r2, #0
 800096e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000972:	2200      	movs	r2, #0
 8000974:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000978:	2200      	movs	r2, #0
 800097a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800097e:	2200      	movs	r2, #0
 8000980:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000984:	2200      	movs	r2, #0
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800098a:	2200      	movs	r2, #0
 800098c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000990:	2200      	movs	r2, #0
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI1_Init+0x9c>)
 8000996:	2200      	movs	r2, #0
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_SPI1_Init+0x9c>)
 800099c:	f004 fcac 	bl	80052f8 <HAL_SPI_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_SPI1_Init+0x96>
  {
    Error_Handler();
 80009a6:	f000 f9af 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	240001e0 	.word	0x240001e0
 80009b4:	40013000 	.word	0x40013000

080009b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_USART3_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a02:	f005 f891 	bl	8005b28 <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f97c 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a14:	f006 f893 	bl	8006b3e <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 f973 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a26:	f006 f8c8 	bl	8006bba <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f96a 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a36:	f006 f849 	bl	8006acc <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f962 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	24000268 	.word	0x24000268
 8000a4c:	40004800 	.word	0x40004800

08000a50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	2209      	movs	r2, #9
 8000a5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	f001 fc47 	bl	800232a <HAL_PCD_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aa2:	f000 f931 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	240002fc 	.word	0x240002fc
 8000ab0:	40080000 	.word	0x40080000

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b62      	ldr	r3, [pc, #392]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a60      	ldr	r2, [pc, #384]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b5e      	ldr	r3, [pc, #376]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae8:	4b5a      	ldr	r3, [pc, #360]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a59      	ldr	r2, [pc, #356]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	4a51      	ldr	r2, [pc, #324]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b4b      	ldr	r3, [pc, #300]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	4a4a      	ldr	r2, [pc, #296]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	4a42      	ldr	r2, [pc, #264]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b52:	4b40      	ldr	r3, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b60:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	4a3b      	ldr	r2, [pc, #236]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b70:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	4a33      	ldr	r2, [pc, #204]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <MX_GPIO_Init+0x1a0>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ba2:	482d      	ldr	r0, [pc, #180]	; (8000c58 <MX_GPIO_Init+0x1a4>)
 8000ba4:	f001 fba8 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bae:	482b      	ldr	r0, [pc, #172]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000bb0:	f001 fba2 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4829      	ldr	r0, [pc, #164]	; (8000c60 <MX_GPIO_Init+0x1ac>)
 8000bba:	f001 fb9d 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4824      	ldr	r0, [pc, #144]	; (8000c64 <MX_GPIO_Init+0x1b0>)
 8000bd4:	f001 f9e0 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bd8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4819      	ldr	r0, [pc, #100]	; (8000c58 <MX_GPIO_Init+0x1a4>)
 8000bf2:	f001 f9d1 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000c10:	f001 f9c2 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <MX_GPIO_Init+0x1b4>)
 8000c2a:	f001 f9b5 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_GPIO_Init+0x1ac>)
 8000c46:	f001 f9a7 	bl	8001f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	58024400 	.word	0x58024400
 8000c58:	58020400 	.word	0x58020400
 8000c5c:	58020c00 	.word	0x58020c00
 8000c60:	58021000 	.word	0x58021000
 8000c64:	58020800 	.word	0x58020800
 8000c68:	58021800 	.word	0x58021800

08000c6c <StartPollingLoop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPollingLoop */
void StartPollingLoop(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	int time1Min = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
	int time10Min = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	if(HAL_GetTick() - time1Min >= 60000){
 8000c7c:	f000 fc38 	bl	80014f0 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d903      	bls.n	8000c96 <StartPollingLoop+0x2a>
		checkBattery();
 8000c8e:	f7ff fcb4 	bl	80005fa <checkBattery>
		checkLocation();
 8000c92:	f7ff fcf7 	bl	8000684 <checkLocation>
	}
	if(HAL_GetTick() - time10Min >= 600000){
 8000c96:	f000 fc2b 	bl	80014f0 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <StartPollingLoop+0x48>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d9ea      	bls.n	8000c7c <StartPollingLoop+0x10>
		if(descendFlag == 1){
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <StartPollingLoop+0x4c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d1e6      	bne.n	8000c7c <StartPollingLoop+0x10>
				cutBalloon();
 8000cae:	f7ff fc95 	bl	80005dc <cutBalloon>
	if(HAL_GetTick() - time1Min >= 60000){
 8000cb2:	e7e3      	b.n	8000c7c <StartPollingLoop+0x10>
 8000cb4:	000927bf 	.word	0x000927bf
 8000cb8:	240000f0 	.word	0x240000f0

08000cbc <BatteryCallback>:
  /* USER CODE END 5 */
}

/* BatteryCallback function */
void BatteryCallback(void *argument)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BatteryCallback */

  /* USER CODE END BatteryCallback */
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DescensionCallback>:

/* DescensionCallback function */
void DescensionCallback(void *argument)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DescensionCallback */

  /* USER CODE END DescensionCallback */
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d101      	bne.n	8000cfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf6:	f000 fbe7 	bl	80014c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40001000 	.word	0x40001000

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x38>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_MspInit+0x38>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_MspInit+0x38>)
 8000d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f06f 0001 	mvn.w	r0, #1
 8000d40:	f000 fcde 	bl	8001700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	58024400 	.word	0x58024400

08000d50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	; 0x38
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a59      	ldr	r2, [pc, #356]	; (8000ed4 <HAL_ETH_MspInit+0x184>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	f040 80ab 	bne.w	8000eca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d74:	4b58      	ldr	r3, [pc, #352]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d7a:	4a57      	ldr	r2, [pc, #348]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d84:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d92:	4b51      	ldr	r3, [pc, #324]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d98:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da2:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000db0:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db6:	4a48      	ldr	r2, [pc, #288]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc0:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a40      	ldr	r2, [pc, #256]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	4a39      	ldr	r2, [pc, #228]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a2a      	ldr	r2, [pc, #168]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e46:	2332      	movs	r3, #50	; 0x32
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e56:	230b      	movs	r3, #11
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481e      	ldr	r0, [pc, #120]	; (8000edc <HAL_ETH_MspInit+0x18c>)
 8000e62:	f001 f899 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e66:	2386      	movs	r3, #134	; 0x86
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <HAL_ETH_MspInit+0x190>)
 8000e82:	f001 f889 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e98:	230b      	movs	r3, #11
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <HAL_ETH_MspInit+0x194>)
 8000ea4:	f001 f878 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ea8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <HAL_ETH_MspInit+0x198>)
 8000ec6:	f001 f867 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	; 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40028000 	.word	0x40028000
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020800 	.word	0x58020800
 8000ee0:	58020000 	.word	0x58020000
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	58021800 	.word	0x58021800

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0bc      	sub	sp, #240	; 0xf0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	22c0      	movs	r2, #192	; 0xc0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f009 f87d 	bl	800a00c <memset>
  if(hspi->Instance==SPI1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a38      	ldr	r2, [pc, #224]	; (8000ff8 <HAL_SPI_MspInit+0x10c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d168      	bne.n	8000fee <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fbb5 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f3c:	f7ff fee4 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f40:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f46:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_SPI_MspInit+0x110>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <HAL_SPI_MspInit+0x114>)
 8000fc0:	f000 ffea 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <HAL_SPI_MspInit+0x118>)
 8000fea:	f000 ffd5 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	37f0      	adds	r7, #240	; 0xf0
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40013000 	.word	0x40013000
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58020000 	.word	0x58020000
 8001004:	58020c00 	.word	0x58020c00

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0ba      	sub	sp, #232	; 0xe8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	22c0      	movs	r2, #192	; 0xc0
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f008 ffef 	bl	800a00c <memset>
  if(huart->Instance==USART3)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <HAL_UART_MspInit+0xc8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d146      	bne.n	80010c6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001038:	f04f 0202 	mov.w	r2, #2
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fb26 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800105a:	f7ff fe55 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_UART_MspInit+0xcc>)
 8001060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_UART_MspInit+0xcc>)
 8001066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800106a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_UART_MspInit+0xcc>)
 8001070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_UART_MspInit+0xcc>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_UART_MspInit+0xcc>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_UART_MspInit+0xcc>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800109a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_UART_MspInit+0xd0>)
 80010c2:	f000 ff69 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	37e8      	adds	r7, #232	; 0xe8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40004800 	.word	0x40004800
 80010d4:	58024400 	.word	0x58024400
 80010d8:	58020c00 	.word	0x58020c00

080010dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0ba      	sub	sp, #232	; 0xe8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	22c0      	movs	r2, #192	; 0xc0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f008 ff85 	bl	800a00c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <HAL_PCD_MspInit+0xec>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d159      	bne.n	80011c0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800110c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001118:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800111c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fabb 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001130:	f7ff fdea 	bl	8000d08 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001134:	f001 fa7c 	bl	8002630 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_PCD_MspInit+0xf0>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	4a23      	ldr	r2, [pc, #140]	; (80011cc <HAL_PCD_MspInit+0xf0>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_PCD_MspInit+0xf0>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001156:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800115a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001170:	230a      	movs	r3, #10
 8001172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117a:	4619      	mov	r1, r3
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <HAL_PCD_MspInit+0xf4>)
 800117e:	f000 ff0b 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <HAL_PCD_MspInit+0xf4>)
 800119e:	f000 fefb 	bl	8001f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_PCD_MspInit+0xf0>)
 80011a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_PCD_MspInit+0xf0>)
 80011aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_PCD_MspInit+0xf0>)
 80011b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	37e8      	adds	r7, #232	; 0xe8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40080000 	.word	0x40080000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020000 	.word	0x58020000

080011d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b090      	sub	sp, #64	; 0x40
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	d827      	bhi.n	8001232 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80011e2:	2200      	movs	r2, #0
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	2036      	movs	r0, #54	; 0x36
 80011e8:	f000 fa8a 	bl	8001700 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ec:	2036      	movs	r0, #54	; 0x36
 80011ee:	f000 faa1 	bl	8001734 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80011f2:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_InitTick+0xc4>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f8:	4b28      	ldr	r3, [pc, #160]	; (800129c <HAL_InitTick+0xc8>)
 80011fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011fe:	4a27      	ldr	r2, [pc, #156]	; (800129c <HAL_InitTick+0xc8>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_InitTick+0xc8>)
 800120a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001216:	f107 0210 	add.w	r2, r7, #16
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f002 f9fb 	bl	800361c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800122a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <HAL_InitTick+0x6a>
 8001230:	e001      	b.n	8001236 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e02b      	b.n	800128e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001236:	f002 f9c5 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 800123a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800123c:	e004      	b.n	8001248 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800123e:	f002 f9c1 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8001242:	4603      	mov	r3, r0
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <HAL_InitTick+0xcc>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	3b01      	subs	r3, #1
 8001254:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_InitTick+0xd0>)
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <HAL_InitTick+0xd4>)
 800125a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_InitTick+0xd0>)
 800125e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001262:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_InitTick+0xd0>)
 8001266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001268:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_InitTick+0xd0>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_InitTick+0xd0>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_InitTick+0xd0>)
 8001278:	f004 f97d 	bl	8005576 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d104      	bne.n	800128c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <HAL_InitTick+0xd0>)
 8001284:	f004 f9d8 	bl	8005638 <HAL_TIM_Base_Start_IT>
 8001288:	4603      	mov	r3, r0
 800128a:	e000      	b.n	800128e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	3740      	adds	r7, #64	; 0x40
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	24000008 	.word	0x24000008
 800129c:	58024400 	.word	0x58024400
 80012a0:	431bde83 	.word	0x431bde83
 80012a4:	2400081c 	.word	0x2400081c
 80012a8:	40001000 	.word	0x40001000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <TIM6_DAC_IRQHandler+0x10>)
 80012de:	f004 fa23 	bl	8005728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2400081c 	.word	0x2400081c

080012ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f0:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <SystemInit+0xe4>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a36      	ldr	r2, [pc, #216]	; (80013d0 <SystemInit+0xe4>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001300:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <SystemInit+0xe8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 030f 	and.w	r3, r3, #15
 8001308:	2b06      	cmp	r3, #6
 800130a:	d807      	bhi.n	800131c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <SystemInit+0xe8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 030f 	bic.w	r3, r3, #15
 8001314:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <SystemInit+0xe8>)
 8001316:	f043 0307 	orr.w	r3, r3, #7
 800131a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <SystemInit+0xec>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <SystemInit+0xec>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001328:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <SystemInit+0xec>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <SystemInit+0xec>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4929      	ldr	r1, [pc, #164]	; (80013d8 <SystemInit+0xec>)
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <SystemInit+0xf0>)
 8001336:	4013      	ands	r3, r2
 8001338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <SystemInit+0xe8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <SystemInit+0xe8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 030f 	bic.w	r3, r3, #15
 800134e:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <SystemInit+0xe8>)
 8001350:	f043 0307 	orr.w	r3, r3, #7
 8001354:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <SystemInit+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <SystemInit+0xec>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <SystemInit+0xec>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <SystemInit+0xec>)
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <SystemInit+0xf4>)
 800136c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <SystemInit+0xec>)
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <SystemInit+0xf8>)
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <SystemInit+0xec>)
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <SystemInit+0xfc>)
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <SystemInit+0xec>)
 800137c:	2200      	movs	r2, #0
 800137e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <SystemInit+0xec>)
 8001382:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <SystemInit+0xfc>)
 8001384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <SystemInit+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <SystemInit+0xec>)
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <SystemInit+0xfc>)
 8001390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <SystemInit+0xec>)
 8001394:	2200      	movs	r2, #0
 8001396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <SystemInit+0xec>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <SystemInit+0xec>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <SystemInit+0xec>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <SystemInit+0x100>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <SystemInit+0x104>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013b6:	d202      	bcs.n	80013be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <SystemInit+0x108>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <SystemInit+0x10c>)
 80013c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00
 80013d4:	52002000 	.word	0x52002000
 80013d8:	58024400 	.word	0x58024400
 80013dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e0:	02020200 	.word	0x02020200
 80013e4:	01ff0000 	.word	0x01ff0000
 80013e8:	01010280 	.word	0x01010280
 80013ec:	5c001000 	.word	0x5c001000
 80013f0:	ffff0000 	.word	0xffff0000
 80013f4:	51008108 	.word	0x51008108
 80013f8:	52004000 	.word	0x52004000

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001400:	f7ff ff74 	bl	80012ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001406:	490d      	ldr	r1, [pc, #52]	; (800143c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800141c:	4c0a      	ldr	r4, [pc, #40]	; (8001448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142a:	f008 fdf7 	bl	800a01c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff f963 	bl	80006f8 <main>
  bx  lr
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001438:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800143c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001440:	0800a168 	.word	0x0800a168
  ldr r2, =_sbss
 8001444:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001448:	240051bc 	.word	0x240051bc

0800144c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC3_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001456:	2003      	movs	r0, #3
 8001458:	f000 f947 	bl	80016ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800145c:	f001 ff08 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_Init+0x68>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	4913      	ldr	r1, [pc, #76]	; (80014bc <HAL_Init+0x6c>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_Init+0x68>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_Init+0x6c>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_Init+0x70>)
 8001492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <HAL_Init+0x74>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149a:	200f      	movs	r0, #15
 800149c:	f7ff fe9a 	bl	80011d4 <HAL_InitTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e002      	b.n	80014b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014aa:	f7ff fc33 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58024400 	.word	0x58024400
 80014bc:	0800a120 	.word	0x0800a120
 80014c0:	24000004 	.word	0x24000004
 80014c4:	24000000 	.word	0x24000000

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2400000c 	.word	0x2400000c
 80014ec:	24000868 	.word	0x24000868

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	24000868 	.word	0x24000868

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2400000c 	.word	0x2400000c

08001550 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetREVID+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0c1b      	lsrs	r3, r3, #16
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	5c001000 	.word	0x5c001000

08001568 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001578:	4904      	ldr	r1, [pc, #16]	; (800158c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	58000400 	.word	0x58000400

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <__NVIC_SetPriorityGrouping+0x40>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x40>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	05fa0000 	.word	0x05fa0000

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ff4c 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800170e:	f7ff ff63 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001712:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f7ff ffb3 	bl	8001684 <NVIC_EncodePriority>
 800171e:	4602      	mov	r2, r0
 8001720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff82 	bl	8001630 <__NVIC_SetPriority>
}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff56 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0cf      	b.n	8001902 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001768:	2b00      	cmp	r3, #0
 800176a:	d106      	bne.n	800177a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2223      	movs	r2, #35	; 0x23
 8001770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff faeb 	bl	8000d50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b64      	ldr	r3, [pc, #400]	; (800190c <HAL_ETH_Init+0x1bc>)
 800177c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001780:	4a62      	ldr	r2, [pc, #392]	; (800190c <HAL_ETH_Init+0x1bc>)
 8001782:	f043 0302 	orr.w	r3, r3, #2
 8001786:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800178a:	4b60      	ldr	r3, [pc, #384]	; (800190c <HAL_ETH_Init+0x1bc>)
 800178c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7a1b      	ldrb	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fee1 	bl	8001568 <HAL_SYSCFG_ETHInterfaceSelect>
 80017a6:	e003      	b.n	80017b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017ac:	f7ff fedc 	bl	8001568 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80017b0:	4b57      	ldr	r3, [pc, #348]	; (8001910 <HAL_ETH_Init+0x1c0>)
 80017b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017cc:	f7ff fe90 	bl	80014f0 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017d2:	e011      	b.n	80017f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017d4:	f7ff fe8c 	bl	80014f0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017e2:	d909      	bls.n	80017f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	22e0      	movs	r2, #224	; 0xe0
 80017f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e084      	b.n	8001902 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e4      	bne.n	80017d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f886 	bl	800191c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001810:	f001 fea8 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8001814:	4603      	mov	r3, r0
 8001816:	4a3f      	ldr	r2, [pc, #252]	; (8001914 <HAL_ETH_Init+0x1c4>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9a      	lsrs	r2, r3, #18
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3a01      	subs	r2, #1
 8001824:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fa71 	bl	8001d10 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001836:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800183a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001846:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800184a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	22e0      	movs	r2, #224	; 0xe0
 8001866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e049      	b.n	8001902 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_ETH_Init+0x1c8>)
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6952      	ldr	r2, [r2, #20]
 8001882:	0051      	lsls	r1, r2, #1
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	430b      	orrs	r3, r1
 800188a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800188e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fad9 	bl	8001e4a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fb1f 	bl	8001edc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	3305      	adds	r3, #5
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	021a      	lsls	r2, r3, #8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	3303      	adds	r3, #3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	061a      	lsls	r2, r3, #24
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	3302      	adds	r3, #2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	041b      	lsls	r3, r3, #16
 80018d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	3301      	adds	r3, #1
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2210      	movs	r2, #16
 80018fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	58024400 	.word	0x58024400
 8001910:	58000400 	.word	0x58000400
 8001914:	431bde83 	.word	0x431bde83
 8001918:	ffff8001 	.word	0xffff8001

0800191c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800192c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001934:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001936:	f001 fe15 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 800193a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d908      	bls.n	8001956 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d804      	bhi.n	8001956 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e027      	b.n	80019a6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d908      	bls.n	8001970 <HAL_ETH_SetMDIOClockRange+0x54>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d204      	bcs.n	8001970 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e01a      	b.n	80019a6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d303      	bcc.n	8001980 <HAL_ETH_SetMDIOClockRange+0x64>
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d911      	bls.n	80019a4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d908      	bls.n	800199a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d804      	bhi.n	800199a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e005      	b.n	80019a6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e000      	b.n	80019a6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80019a4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	01312cff 	.word	0x01312cff
 80019bc:	02160ebf 	.word	0x02160ebf
 80019c0:	03938700 	.word	0x03938700
 80019c4:	05f5e0ff 	.word	0x05f5e0ff
 80019c8:	08f0d17f 	.word	0x08f0d17f

080019cc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	791b      	ldrb	r3, [r3, #4]
 80019e4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7b1b      	ldrb	r3, [r3, #12]
 80019ec:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	7b5b      	ldrb	r3, [r3, #13]
 80019f4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	7b9b      	ldrb	r3, [r3, #14]
 80019fc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	7bdb      	ldrb	r3, [r3, #15]
 8001a04:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	7c12      	ldrb	r2, [r2, #16]
 8001a0c:	2a00      	cmp	r2, #0
 8001a0e:	d102      	bne.n	8001a16 <ETH_SetMACConfig+0x4a>
 8001a10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a14:	e000      	b.n	8001a18 <ETH_SetMACConfig+0x4c>
 8001a16:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	7c52      	ldrb	r2, [r2, #17]
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d102      	bne.n	8001a28 <ETH_SetMACConfig+0x5c>
 8001a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a26:	e000      	b.n	8001a2a <ETH_SetMACConfig+0x5e>
 8001a28:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	7c9b      	ldrb	r3, [r3, #18]
 8001a30:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a32:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a38:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	7f1b      	ldrb	r3, [r3, #28]
 8001a44:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	7f5b      	ldrb	r3, [r3, #29]
 8001a4c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	7f92      	ldrb	r2, [r2, #30]
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d102      	bne.n	8001a5e <ETH_SetMACConfig+0x92>
 8001a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x94>
 8001a5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	7fdb      	ldrb	r3, [r3, #31]
 8001a66:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a70:	2a00      	cmp	r2, #0
 8001a72:	d102      	bne.n	8001a7a <ETH_SetMACConfig+0xae>
 8001a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a78:	e000      	b.n	8001a7c <ETH_SetMACConfig+0xb0>
 8001a7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a7c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a8a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a8c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <ETH_SetMACConfig+0x22c>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ab6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ab8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ac2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001aca:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001acc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d102      	bne.n	8001ade <ETH_SetMACConfig+0x112>
 8001ad8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001adc:	e000      	b.n	8001ae0 <ETH_SetMACConfig+0x114>
 8001ade:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ae0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <ETH_SetMACConfig+0x230>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	430b      	orrs	r3, r1
 8001afc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b04:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <ETH_SetMACConfig+0x234>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b28:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d101      	bne.n	8001b3e <ETH_SetMACConfig+0x172>
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	e000      	b.n	8001b40 <ETH_SetMACConfig+0x174>
 8001b3e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b40:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b52:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001b56:	4013      	ands	r3, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b68:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b70:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7e:	f023 0103 	bic.w	r1, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b96:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	d101      	bne.n	8001bba <ETH_SetMACConfig+0x1ee>
 8001bb6:	2240      	movs	r2, #64	; 0x40
 8001bb8:	e000      	b.n	8001bbc <ETH_SetMACConfig+0x1f0>
 8001bba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001bbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001bc4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001bce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001bdc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	00048083 	.word	0x00048083
 8001bfc:	c0f88000 	.word	0xc0f88000
 8001c00:	fffffef0 	.word	0xfffffef0

08001c04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <ETH_SetDMAConfig+0xf8>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	6811      	ldr	r1, [r2, #0]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c2a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	791b      	ldrb	r3, [r3, #4]
 8001c30:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
 8001c3c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <ETH_SetDMAConfig+0xfc>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	430b      	orrs	r3, r1
 8001c58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c5c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	7b5b      	ldrb	r3, [r3, #13]
 8001c62:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c74:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <ETH_SetDMAConfig+0x100>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	430b      	orrs	r3, r1
 8001c84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c88:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	7d1b      	ldrb	r3, [r3, #20]
 8001c94:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c96:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	7f5b      	ldrb	r3, [r3, #29]
 8001c9c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001caa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <ETH_SetDMAConfig+0x104>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	68f9      	ldr	r1, [r7, #12]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cbe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	7f1b      	ldrb	r3, [r3, #28]
 8001cc6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <ETH_SetDMAConfig+0x108>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	ffff87fd 	.word	0xffff87fd
 8001d00:	ffff2ffe 	.word	0xffff2ffe
 8001d04:	fffec000 	.word	0xfffec000
 8001d08:	ffc0efef 	.word	0xffc0efef
 8001d0c:	7fc0ffff 	.word	0x7fc0ffff

08001d10 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0a4      	sub	sp, #144	; 0x90
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d50:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001d68:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001d6c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d92:	2300      	movs	r3, #0
 8001d94:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001da8:	2320      	movs	r3, #32
 8001daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001dba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001dc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dc4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001dea:	2300      	movs	r3, #0
 8001dec:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001dee:	2301      	movs	r3, #1
 8001df0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fde6 	bl	80019cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e04:	2301      	movs	r3, #1
 8001e06:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e1e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e28:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e30:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fee1 	bl	8001c04 <ETH_SetDMAConfig>
}
 8001e42:	bf00      	nop
 8001e44:	3790      	adds	r7, #144	; 0x90
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e01d      	b.n	8001e94 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68d9      	ldr	r1, [r3, #12]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	3206      	adds	r2, #6
 8001e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d9de      	bls.n	8001e58 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2303      	movs	r3, #3
 8001eac:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e023      	b.n	8001f32 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	3212      	adds	r2, #18
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d9d8      	bls.n	8001eea <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2303      	movs	r3, #3
 8001f62:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f86:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fa6:	4b89      	ldr	r3, [pc, #548]	; (80021cc <HAL_GPIO_Init+0x234>)
 8001fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001faa:	e194      	b.n	80022d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8186 	beq.w	80022d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <HAL_GPIO_Init+0x44>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d130      	bne.n	800203e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002012:	2201      	movs	r2, #1
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 0201 	and.w	r2, r3, #1
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b03      	cmp	r3, #3
 8002048:	d017      	beq.n	800207a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d123      	bne.n	80020ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	69b9      	ldr	r1, [r7, #24]
 80020ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0203 	and.w	r2, r3, #3
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80e0 	beq.w	80022d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_GPIO_Init+0x238>)
 8002112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002116:	4a2e      	ldr	r2, [pc, #184]	; (80021d0 <HAL_GPIO_Init+0x238>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_GPIO_Init+0x238>)
 8002122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_GPIO_Init+0x23c>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <HAL_GPIO_Init+0x240>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d052      	beq.n	8002200 <HAL_GPIO_Init+0x268>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_GPIO_Init+0x244>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_GPIO_Init+0x22e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_GPIO_Init+0x248>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x22a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_GPIO_Init+0x24c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x226>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_GPIO_Init+0x250>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x222>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <HAL_GPIO_Init+0x254>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x21e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_GPIO_Init+0x258>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x21a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_GPIO_Init+0x25c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x216>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <HAL_GPIO_Init+0x260>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x212>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_GPIO_Init+0x264>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x20e>
 80021a2:	2309      	movs	r3, #9
 80021a4:	e02d      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021a6:	230a      	movs	r3, #10
 80021a8:	e02b      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e029      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e027      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e025      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e023      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e021      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021be:	2303      	movs	r3, #3
 80021c0:	e01f      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e01d      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e01b      	b.n	8002202 <HAL_GPIO_Init+0x26a>
 80021ca:	bf00      	nop
 80021cc:	58000080 	.word	0x58000080
 80021d0:	58024400 	.word	0x58024400
 80021d4:	58000400 	.word	0x58000400
 80021d8:	58020000 	.word	0x58020000
 80021dc:	58020400 	.word	0x58020400
 80021e0:	58020800 	.word	0x58020800
 80021e4:	58020c00 	.word	0x58020c00
 80021e8:	58021000 	.word	0x58021000
 80021ec:	58021400 	.word	0x58021400
 80021f0:	58021800 	.word	0x58021800
 80021f4:	58021c00 	.word	0x58021c00
 80021f8:	58022000 	.word	0x58022000
 80021fc:	58022400 	.word	0x58022400
 8002200:	2300      	movs	r3, #0
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	f002 0203 	and.w	r2, r2, #3
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	4093      	lsls	r3, r2
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002212:	4938      	ldr	r1, [pc, #224]	; (80022f4 <HAL_GPIO_Init+0x35c>)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800224e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	3301      	adds	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f47f ae63 	bne.w	8001fac <HAL_GPIO_Init+0x14>
  }
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3724      	adds	r7, #36	; 0x24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	58000400 	.word	0x58000400

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800232a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232c:	b08f      	sub	sp, #60	; 0x3c
 800232e:	af0a      	add	r7, sp, #40	; 0x28
 8002330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e116      	b.n	800256a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fec0 	bl	80010dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fd18 	bl	8006db0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	687e      	ldr	r6, [r7, #4]
 8002388:	466d      	mov	r5, sp
 800238a:	f106 0410 	add.w	r4, r6, #16
 800238e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800239a:	e885 0003 	stmia.w	r5, {r0, r1}
 800239e:	1d33      	adds	r3, r6, #4
 80023a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a2:	6838      	ldr	r0, [r7, #0]
 80023a4:	f004 fc96 	bl	8006cd4 <USB_CoreInit>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0d7      	b.n	800256a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 fd06 	bl	8006dd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e04a      	b.n	8002462 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	333d      	adds	r3, #61	; 0x3d
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	333c      	adds	r3, #60	; 0x3c
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	b298      	uxth	r0, r3
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3356      	adds	r3, #86	; 0x56
 8002408:	4602      	mov	r2, r0
 800240a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3340      	adds	r3, #64	; 0x40
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3344      	adds	r3, #68	; 0x44
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3348      	adds	r3, #72	; 0x48
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	334c      	adds	r3, #76	; 0x4c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d3af      	bcc.n	80023cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e044      	b.n	80024fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	3301      	adds	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d3b5      	bcc.n	8002472 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	687e      	ldr	r6, [r7, #4]
 800250e:	466d      	mov	r5, sp
 8002510:	f106 0410 	add.w	r4, r6, #16
 8002514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002520:	e885 0003 	stmia.w	r5, {r0, r1}
 8002524:	1d33      	adds	r3, r6, #4
 8002526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f004 fc9f 	bl	8006e6c <USB_DevInit>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e014      	b.n	800256a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2b01      	cmp	r3, #1
 8002556:	d102      	bne.n	800255e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f80b 	bl	8002574 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f004 fe5d 	bl	8007222 <USB_DevDisconnect>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002574 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	10000003 	.word	0x10000003

080025bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d00a      	beq.n	80025e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e01f      	b.n	8002622 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e01d      	b.n	8002622 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	490f      	ldr	r1, [pc, #60]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025f6:	f7fe ff7b 	bl	80014f0 <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025fc:	e009      	b.n	8002612 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025fe:	f7fe ff77 	bl	80014f0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800260c:	d901      	bls.n	8002612 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e007      	b.n	8002622 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_PWREx_ConfigSupply+0x70>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	d1ee      	bne.n	80025fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58024800 	.word	0x58024800

08002630 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a04      	ldr	r2, [pc, #16]	; (800264c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800263a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	58024800 	.word	0x58024800

08002650 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f000 bc48 	b.w	8002ef4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8088 	beq.w	8002782 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002672:	4b99      	ldr	r3, [pc, #612]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800267c:	4b96      	ldr	r3, [pc, #600]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	2b10      	cmp	r3, #16
 8002686:	d007      	beq.n	8002698 <HAL_RCC_OscConfig+0x48>
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2b18      	cmp	r3, #24
 800268c:	d111      	bne.n	80026b2 <HAL_RCC_OscConfig+0x62>
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	4b8f      	ldr	r3, [pc, #572]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <HAL_RCC_OscConfig+0x130>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d169      	bne.n	8002780 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f000 bc21 	b.w	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x7a>
 80026bc:	4b86      	ldr	r3, [pc, #536]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a85      	ldr	r2, [pc, #532]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e02e      	b.n	8002728 <HAL_RCC_OscConfig+0xd8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x9c>
 80026d2:	4b81      	ldr	r3, [pc, #516]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a80      	ldr	r2, [pc, #512]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b7e      	ldr	r3, [pc, #504]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7d      	ldr	r2, [pc, #500]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e01d      	b.n	8002728 <HAL_RCC_OscConfig+0xd8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0xc0>
 80026f6:	4b78      	ldr	r3, [pc, #480]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a77      	ldr	r2, [pc, #476]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b75      	ldr	r3, [pc, #468]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a74      	ldr	r2, [pc, #464]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0xd8>
 8002710:	4b71      	ldr	r3, [pc, #452]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a70      	ldr	r2, [pc, #448]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b6e      	ldr	r3, [pc, #440]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6d      	ldr	r2, [pc, #436]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fede 	bl	80014f0 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe feda 	bl	80014f0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e3d4      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0xe8>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe feca 	bl	80014f0 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fec6 	bl	80014f0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e3c0      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002772:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x110>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80ca 	beq.w	8002924 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002790:	4b51      	ldr	r3, [pc, #324]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002798:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800279a:	4b4f      	ldr	r3, [pc, #316]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_RCC_OscConfig+0x166>
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	2b18      	cmp	r3, #24
 80027aa:	d156      	bne.n	800285a <HAL_RCC_OscConfig+0x20a>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d151      	bne.n	800285a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x17e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e392      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ce:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0219 	bic.w	r2, r3, #25
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	493f      	ldr	r1, [pc, #252]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fe86 	bl	80014f0 <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fe82 	bl	80014f0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e37c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	f7fe fea3 	bl	8001550 <HAL_GetREVID>
 800280a:	4603      	mov	r3, r0
 800280c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002810:	4293      	cmp	r3, r2
 8002812:	d817      	bhi.n	8002844 <HAL_RCC_OscConfig+0x1f4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d108      	bne.n	800282e <HAL_RCC_OscConfig+0x1de>
 800281c:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002824:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282c:	e07a      	b.n	8002924 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	031b      	lsls	r3, r3, #12
 800283c:	4926      	ldr	r1, [pc, #152]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002842:	e06f      	b.n	8002924 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4921      	ldr	r1, [pc, #132]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002858:	e064      	b.n	8002924 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d047      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0219 	bic.w	r2, r3, #25
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	491a      	ldr	r1, [pc, #104]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fe3c 	bl	80014f0 <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287c:	f7fe fe38 	bl	80014f0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e332      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289a:	f7fe fe59 	bl	8001550 <HAL_GetREVID>
 800289e:	4603      	mov	r3, r0
 80028a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d819      	bhi.n	80028dc <HAL_RCC_OscConfig+0x28c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d108      	bne.n	80028c2 <HAL_RCC_OscConfig+0x272>
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80028ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028be:	6053      	str	r3, [r2, #4]
 80028c0:	e030      	b.n	8002924 <HAL_RCC_OscConfig+0x2d4>
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	031b      	lsls	r3, r3, #12
 80028d0:	4901      	ldr	r1, [pc, #4]	; (80028d8 <HAL_RCC_OscConfig+0x288>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
 80028d6:	e025      	b.n	8002924 <HAL_RCC_OscConfig+0x2d4>
 80028d8:	58024400 	.word	0x58024400
 80028dc:	4b9a      	ldr	r3, [pc, #616]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	4997      	ldr	r1, [pc, #604]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
 80028f0:	e018      	b.n	8002924 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b95      	ldr	r3, [pc, #596]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a94      	ldr	r2, [pc, #592]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fdf7 	bl	80014f0 <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002906:	f7fe fdf3 	bl	80014f0 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e2ed      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002918:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80a9 	beq.w	8002a84 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800293a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800293c:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d007      	beq.n	8002958 <HAL_RCC_OscConfig+0x308>
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b18      	cmp	r3, #24
 800294c:	d13a      	bne.n	80029c4 <HAL_RCC_OscConfig+0x374>
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d135      	bne.n	80029c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002958:	4b7b      	ldr	r3, [pc, #492]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x320>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e2c1      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002970:	f7fe fdee 	bl	8001550 <HAL_GetREVID>
 8002974:	4603      	mov	r3, r0
 8002976:	f241 0203 	movw	r2, #4099	; 0x1003
 800297a:	4293      	cmp	r3, r2
 800297c:	d817      	bhi.n	80029ae <HAL_RCC_OscConfig+0x35e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	2b20      	cmp	r3, #32
 8002984:	d108      	bne.n	8002998 <HAL_RCC_OscConfig+0x348>
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800298e:	4a6e      	ldr	r2, [pc, #440]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002994:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002996:	e075      	b.n	8002a84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002998:	4b6b      	ldr	r3, [pc, #428]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	069b      	lsls	r3, r3, #26
 80029a6:	4968      	ldr	r1, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ac:	e06a      	b.n	8002a84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ae:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	061b      	lsls	r3, r3, #24
 80029bc:	4962      	ldr	r1, [pc, #392]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029c2:	e05f      	b.n	8002a84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d042      	beq.n	8002a52 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029cc:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5d      	ldr	r2, [pc, #372]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80029d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fd8a 	bl	80014f0 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029e0:	f7fe fd86 	bl	80014f0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e280      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029f2:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fe:	f7fe fda7 	bl	8001550 <HAL_GetREVID>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d817      	bhi.n	8002a3c <HAL_RCC_OscConfig+0x3ec>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d108      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3d6>
 8002a14:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a1c:	4a4a      	ldr	r2, [pc, #296]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a22:	6053      	str	r3, [r2, #4]
 8002a24:	e02e      	b.n	8002a84 <HAL_RCC_OscConfig+0x434>
 8002a26:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	069b      	lsls	r3, r3, #26
 8002a34:	4944      	ldr	r1, [pc, #272]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
 8002a3a:	e023      	b.n	8002a84 <HAL_RCC_OscConfig+0x434>
 8002a3c:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	493f      	ldr	r1, [pc, #252]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60cb      	str	r3, [r1, #12]
 8002a50:	e018      	b.n	8002a84 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fd47 	bl	80014f0 <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a66:	f7fe fd43 	bl	80014f0 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e23d      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a78:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d036      	beq.n	8002afe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d019      	beq.n	8002acc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9c:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fd24 	bl	80014f0 <HAL_GetTick>
 8002aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aac:	f7fe fd20 	bl	80014f0 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e21a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x45c>
 8002aca:	e018      	b.n	8002afe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fd0a 	bl	80014f0 <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7fe fd06 	bl	80014f0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e200      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d039      	beq.n	8002b7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fce7 	bl	80014f0 <HAL_GetTick>
 8002b22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b26:	f7fe fce3 	bl	80014f0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1dd      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_RCC_OscConfig+0x4f8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x4d6>
 8002b44:	e01b      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
 8002b46:	bf00      	nop
 8002b48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b4c:	4b9b      	ldr	r3, [pc, #620]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a9a      	ldr	r2, [pc, #616]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b58:	f7fe fcca 	bl	80014f0 <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b60:	f7fe fcc6 	bl	80014f0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e1c0      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b72:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8081 	beq.w	8002c8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b8c:	4b8c      	ldr	r3, [pc, #560]	; (8002dc0 <HAL_RCC_OscConfig+0x770>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a8b      	ldr	r2, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x770>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b98:	f7fe fcaa 	bl	80014f0 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fe fca6 	bl	80014f0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1a0      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb2:	4b83      	ldr	r3, [pc, #524]	; (8002dc0 <HAL_RCC_OscConfig+0x770>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d106      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x584>
 8002bc6:	4b7d      	ldr	r3, [pc, #500]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a7c      	ldr	r2, [pc, #496]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	e02d      	b.n	8002c30 <HAL_RCC_OscConfig+0x5e0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5a6>
 8002bdc:	4b77      	ldr	r3, [pc, #476]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4a76      	ldr	r2, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
 8002be8:	4b74      	ldr	r3, [pc, #464]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a73      	ldr	r2, [pc, #460]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002bee:	f023 0304 	bic.w	r3, r3, #4
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	e01c      	b.n	8002c30 <HAL_RCC_OscConfig+0x5e0>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5c8>
 8002bfe:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	4b6c      	ldr	r3, [pc, #432]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a6b      	ldr	r2, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0x5e0>
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a67      	ldr	r2, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a64      	ldr	r2, [pc, #400]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	f023 0304 	bic.w	r3, r3, #4
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d015      	beq.n	8002c64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe fc5a 	bl	80014f0 <HAL_GetTick>
 8002c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe fc56 	bl	80014f0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e14e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c56:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ee      	beq.n	8002c40 <HAL_RCC_OscConfig+0x5f0>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fc44 	bl	80014f0 <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fc40 	bl	80014f0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e138      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1ee      	bne.n	8002c6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 812d 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c98:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca0:	2b18      	cmp	r3, #24
 8002ca2:	f000 80bd 	beq.w	8002e20 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	f040 809e 	bne.w	8002dec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fc18 	bl	80014f0 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fc14 	bl	80014f0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e10e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce2:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCC_OscConfig+0x774>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	4931      	ldr	r1, [pc, #196]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	628b      	str	r3, [r1, #40]	; 0x28
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	3b01      	subs	r3, #1
 8002d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	025b      	lsls	r3, r3, #9
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	3b01      	subs	r3, #1
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	3b01      	subs	r3, #1
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d2c:	4923      	ldr	r1, [pc, #140]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_RCC_OscConfig+0x778>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d4a:	00d2      	lsls	r2, r2, #3
 8002d4c:	491b      	ldr	r1, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	f023 020c 	bic.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4917      	ldr	r1, [pc, #92]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f023 0202 	bic.w	r2, r3, #2
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	4912      	ldr	r1, [pc, #72]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <HAL_RCC_OscConfig+0x76c>)
 8002dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fb9d 	bl	80014f0 <HAL_GetTick>
 8002db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db8:	e011      	b.n	8002dde <HAL_RCC_OscConfig+0x78e>
 8002dba:	bf00      	nop
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	58024800 	.word	0x58024800
 8002dc4:	fffffc0c 	.word	0xfffffc0c
 8002dc8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fb90 	bl	80014f0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e08a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x77c>
 8002dea:	e082      	b.n	8002ef2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a42      	ldr	r2, [pc, #264]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe fb7a 	bl	80014f0 <HAL_GetTick>
 8002dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fb76 	bl	80014f0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e070      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e12:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x7b0>
 8002e1e:	e068      	b.n	8002ef2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e20:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d031      	beq.n	8002e98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0203 	and.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d12a      	bne.n	8002e98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d122      	bne.n	8002e98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d11a      	bne.n	8002e98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	0a5b      	lsrs	r3, r3, #9
 8002e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d111      	bne.n	8002e98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	0c1b      	lsrs	r3, r3, #16
 8002e78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d108      	bne.n	8002e98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0e1b      	lsrs	r3, r3, #24
 8002e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e02b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ea6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d01f      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	4a11      	ldr	r2, [pc, #68]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ebe:	f7fe fb17 	bl	80014f0 <HAL_GetTick>
 8002ec2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ec4:	bf00      	nop
 8002ec6:	f7fe fb13 	bl	80014f0 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d0f9      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_RCC_OscConfig+0x8b0>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ede:	00d2      	lsls	r2, r2, #3
 8002ee0:	4906      	ldr	r1, [pc, #24]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <HAL_RCC_OscConfig+0x8ac>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3730      	adds	r7, #48	; 0x30
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	58024400 	.word	0x58024400
 8002f00:	ffff0007 	.word	0xffff0007

08002f04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e19c      	b.n	8003252 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b8a      	ldr	r3, [pc, #552]	; (8003144 <HAL_RCC_ClockConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d910      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b87      	ldr	r3, [pc, #540]	; (8003144 <HAL_RCC_ClockConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 020f 	bic.w	r2, r3, #15
 8002f2e:	4985      	ldr	r1, [pc, #532]	; (8003144 <HAL_RCC_ClockConfig+0x240>)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b83      	ldr	r3, [pc, #524]	; (8003144 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e184      	b.n	8003252 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	4b7b      	ldr	r3, [pc, #492]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d908      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f64:	4b78      	ldr	r3, [pc, #480]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	4975      	ldr	r1, [pc, #468]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	4b70      	ldr	r3, [pc, #448]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d908      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f92:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	496a      	ldr	r1, [pc, #424]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	4b64      	ldr	r3, [pc, #400]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d908      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fc0:	4b61      	ldr	r3, [pc, #388]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	495e      	ldr	r1, [pc, #376]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d908      	bls.n	8003000 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4953      	ldr	r1, [pc, #332]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	429a      	cmp	r2, r3
 800301a:	d908      	bls.n	800302e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f023 020f 	bic.w	r2, r3, #15
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4947      	ldr	r1, [pc, #284]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 800302a:	4313      	orrs	r3, r2
 800302c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d055      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800303a:	4b43      	ldr	r3, [pc, #268]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	4940      	ldr	r1, [pc, #256]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8003048:	4313      	orrs	r3, r2
 800304a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d107      	bne.n	8003064 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003054:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d121      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0f6      	b.n	8003252 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d107      	bne.n	800307c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d115      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0ea      	b.n	8003252 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0de      	b.n	8003252 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003094:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0d6      	b.n	8003252 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a4:	4b28      	ldr	r3, [pc, #160]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f023 0207 	bic.w	r2, r3, #7
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4925      	ldr	r1, [pc, #148]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b6:	f7fe fa1b 	bl	80014f0 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030be:	f7fe fa17 	bl	80014f0 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e0be      	b.n	8003252 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d1eb      	bne.n	80030be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d010      	beq.n	8003114 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	429a      	cmp	r2, r3
 8003100:	d208      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f023 020f 	bic.w	r2, r3, #15
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	490e      	ldr	r1, [pc, #56]	; (8003148 <HAL_RCC_ClockConfig+0x244>)
 8003110:	4313      	orrs	r3, r2
 8003112:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_ClockConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d214      	bcs.n	800314c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_RCC_ClockConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 020f 	bic.w	r2, r3, #15
 800312a:	4906      	ldr	r1, [pc, #24]	; (8003144 <HAL_RCC_ClockConfig+0x240>)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <HAL_RCC_ClockConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e086      	b.n	8003252 <HAL_RCC_ClockConfig+0x34e>
 8003144:	52002000 	.word	0x52002000
 8003148:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003164:	429a      	cmp	r2, r3
 8003166:	d208      	bcs.n	800317a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003168:	4b3c      	ldr	r3, [pc, #240]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	4939      	ldr	r1, [pc, #228]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 8003176:	4313      	orrs	r3, r2
 8003178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	4b34      	ldr	r3, [pc, #208]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003192:	429a      	cmp	r2, r3
 8003194:	d208      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003196:	4b31      	ldr	r3, [pc, #196]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	492e      	ldr	r1, [pc, #184]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d208      	bcs.n	80031d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4922      	ldr	r1, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d010      	beq.n	8003204 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d208      	bcs.n	8003204 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4917      	ldr	r1, [pc, #92]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 8003200:	4313      	orrs	r3, r2
 8003202:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003204:	f000 f834 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	4912      	ldr	r1, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x35c>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x358>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <HAL_RCC_ClockConfig+0x35c>)
 800322c:	5cd3      	ldrb	r3, [r2, r3]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x360>)
 800323a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800323c:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <HAL_RCC_ClockConfig+0x364>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x368>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd ffc4 	bl	80011d4 <HAL_InitTick>
 800324c:	4603      	mov	r3, r0
 800324e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	58024400 	.word	0x58024400
 8003260:	0800a120 	.word	0x0800a120
 8003264:	24000004 	.word	0x24000004
 8003268:	24000000 	.word	0x24000000
 800326c:	24000008 	.word	0x24000008

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003276:	4bb3      	ldr	r3, [pc, #716]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327e:	2b18      	cmp	r3, #24
 8003280:	f200 8155 	bhi.w	800352e <HAL_RCC_GetSysClockFreq+0x2be>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032f1 	.word	0x080032f1
 8003290:	0800352f 	.word	0x0800352f
 8003294:	0800352f 	.word	0x0800352f
 8003298:	0800352f 	.word	0x0800352f
 800329c:	0800352f 	.word	0x0800352f
 80032a0:	0800352f 	.word	0x0800352f
 80032a4:	0800352f 	.word	0x0800352f
 80032a8:	0800352f 	.word	0x0800352f
 80032ac:	08003317 	.word	0x08003317
 80032b0:	0800352f 	.word	0x0800352f
 80032b4:	0800352f 	.word	0x0800352f
 80032b8:	0800352f 	.word	0x0800352f
 80032bc:	0800352f 	.word	0x0800352f
 80032c0:	0800352f 	.word	0x0800352f
 80032c4:	0800352f 	.word	0x0800352f
 80032c8:	0800352f 	.word	0x0800352f
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800352f 	.word	0x0800352f
 80032d4:	0800352f 	.word	0x0800352f
 80032d8:	0800352f 	.word	0x0800352f
 80032dc:	0800352f 	.word	0x0800352f
 80032e0:	0800352f 	.word	0x0800352f
 80032e4:	0800352f 	.word	0x0800352f
 80032e8:	0800352f 	.word	0x0800352f
 80032ec:	08003323 	.word	0x08003323
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032f0:	4b94      	ldr	r3, [pc, #592]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032fc:	4b91      	ldr	r3, [pc, #580]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	4a90      	ldr	r2, [pc, #576]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800330e:	e111      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003310:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003312:	61bb      	str	r3, [r7, #24]
      break;
 8003314:	e10e      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003316:	4b8d      	ldr	r3, [pc, #564]	; (800354c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003318:	61bb      	str	r3, [r7, #24]
      break;
 800331a:	e10b      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800331c:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800331e:	61bb      	str	r3, [r7, #24]
      break;
 8003320:	e108      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800332c:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003336:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003338:	4b82      	ldr	r3, [pc, #520]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003342:	4b80      	ldr	r3, [pc, #512]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003346:	08db      	lsrs	r3, r3, #3
 8003348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80e1 	beq.w	8003528 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b02      	cmp	r3, #2
 800336a:	f000 8083 	beq.w	8003474 <HAL_RCC_GetSysClockFreq+0x204>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b02      	cmp	r3, #2
 8003372:	f200 80a1 	bhi.w	80034b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x114>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d056      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003382:	e099      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003384:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003390:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	4a6b      	ldr	r2, [pc, #428]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
 80033a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ba:	4b62      	ldr	r3, [pc, #392]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003554 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033ea:	e087      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	ee07 3a90 	vmov	s15, r3
 80033f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fe:	4b51      	ldr	r3, [pc, #324]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003412:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003554 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800341a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800341e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800342e:	e065      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800355c <HAL_RCC_GetSysClockFreq+0x2ec>
 800343e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003442:	4b40      	ldr	r3, [pc, #256]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003452:	ed97 6a02 	vldr	s12, [r7, #8]
 8003456:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800345a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800346a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003472:	e043      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003560 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003486:	4b2f      	ldr	r3, [pc, #188]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003496:	ed97 6a02 	vldr	s12, [r7, #8]
 800349a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800349e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034b6:	e021      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800355c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034da:	ed97 6a02 	vldr	s12, [r7, #8]
 80034de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003554 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	0a5b      	lsrs	r3, r3, #9
 8003502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003506:	3301      	adds	r3, #1
 8003508:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003514:	edd7 6a07 	vldr	s13, [r7, #28]
 8003518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800351c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003520:	ee17 3a90 	vmov	r3, s15
 8003524:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003526:	e005      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
      break;
 800352c:	e002      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003530:	61bb      	str	r3, [r7, #24]
      break;
 8003532:	bf00      	nop
  }

  return sysclockfreq;
 8003534:	69bb      	ldr	r3, [r7, #24]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
 8003548:	03d09000 	.word	0x03d09000
 800354c:	003d0900 	.word	0x003d0900
 8003550:	007a1200 	.word	0x007a1200
 8003554:	46000000 	.word	0x46000000
 8003558:	4c742400 	.word	0x4c742400
 800355c:	4a742400 	.word	0x4a742400
 8003560:	4af42400 	.word	0x4af42400

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800356a:	f7ff fe81 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800356e:	4602      	mov	r2, r0
 8003570:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	490f      	ldr	r1, [pc, #60]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800357c:	5ccb      	ldrb	r3, [r1, r3]
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	fa22 f303 	lsr.w	r3, r2, r3
 800359e:	4a07      	ldr	r2, [pc, #28]	; (80035bc <HAL_RCC_GetHCLKFreq+0x58>)
 80035a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035a2:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <HAL_RCC_GetHCLKFreq+0x58>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	58024400 	.word	0x58024400
 80035b8:	0800a120 	.word	0x0800a120
 80035bc:	24000004 	.word	0x24000004
 80035c0:	24000000 	.word	0x24000000

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035c8:	f7ff ffcc 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	58024400 	.word	0x58024400
 80035ec:	0800a120 	.word	0x0800a120

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035f4:	f7ff ffb6 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4904      	ldr	r1, [pc, #16]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	58024400 	.word	0x58024400
 8003618:	0800a120 	.word	0x0800a120

0800361c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223f      	movs	r2, #63	; 0x3f
 800362a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_RCC_GetClockConfig+0x7c>)
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0207 	and.w	r2, r3, #7
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_RCC_GetClockConfig+0x7c>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003644:	4b14      	ldr	r3, [pc, #80]	; (8003698 <HAL_RCC_GetClockConfig+0x7c>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 020f 	and.w	r2, r3, #15
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_RCC_GetClockConfig+0x7c>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800365c:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <HAL_RCC_GetClockConfig+0x7c>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_GetClockConfig+0x7c>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_RCC_GetClockConfig+0x7c>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_GetClockConfig+0x80>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	601a      	str	r2, [r3, #0]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	58024400 	.word	0x58024400
 800369c:	52002000 	.word	0x52002000

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a4:	b0ca      	sub	sp, #296	; 0x128
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036ac:	2300      	movs	r3, #0
 80036ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b2:	2300      	movs	r3, #0
 80036b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80036c4:	2500      	movs	r5, #0
 80036c6:	ea54 0305 	orrs.w	r3, r4, r5
 80036ca:	d049      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036d6:	d02f      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036dc:	d828      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e2:	d01a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e8:	d822      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f2:	d007      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036f4:	e01c      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f6:	4bb8      	ldr	r3, [pc, #736]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	4ab7      	ldr	r2, [pc, #732]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003700:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003702:	e01a      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003708:	3308      	adds	r3, #8
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f001 fc8f 	bl	8005030 <RCCEx_PLL2_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003718:	e00f      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371e:	3328      	adds	r3, #40	; 0x28
 8003720:	2102      	movs	r1, #2
 8003722:	4618      	mov	r0, r3
 8003724:	f001 fd36 	bl	8005194 <RCCEx_PLL3_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800372e:	e004      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003742:	4ba5      	ldr	r3, [pc, #660]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003746:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800374e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003750:	4aa1      	ldr	r2, [pc, #644]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003752:	430b      	orrs	r3, r1
 8003754:	6513      	str	r3, [r2, #80]	; 0x50
 8003756:	e003      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800375c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800376c:	f04f 0900 	mov.w	r9, #0
 8003770:	ea58 0309 	orrs.w	r3, r8, r9
 8003774:	d047      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	2b04      	cmp	r3, #4
 800377e:	d82a      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	0800379d 	.word	0x0800379d
 800378c:	080037ab 	.word	0x080037ab
 8003790:	080037c1 	.word	0x080037c1
 8003794:	080037df 	.word	0x080037df
 8003798:	080037df 	.word	0x080037df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379c:	4b8e      	ldr	r3, [pc, #568]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	4a8d      	ldr	r2, [pc, #564]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a8:	e01a      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ae:	3308      	adds	r3, #8
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 fc3c 	bl	8005030 <RCCEx_PLL2_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037be:	e00f      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c4:	3328      	adds	r3, #40	; 0x28
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fce3 	bl	8005194 <RCCEx_PLL3_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d4:	e004      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037e8:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	f023 0107 	bic.w	r1, r3, #7
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	4a78      	ldr	r2, [pc, #480]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6513      	str	r3, [r2, #80]	; 0x50
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003812:	f04f 0b00 	mov.w	fp, #0
 8003816:	ea5a 030b 	orrs.w	r3, sl, fp
 800381a:	d04c      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003826:	d030      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382c:	d829      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800382e:	2bc0      	cmp	r3, #192	; 0xc0
 8003830:	d02d      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003832:	2bc0      	cmp	r3, #192	; 0xc0
 8003834:	d825      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	d018      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800383a:	2b80      	cmp	r3, #128	; 0x80
 800383c:	d821      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d007      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003846:	e01c      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003848:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	4a62      	ldr	r2, [pc, #392]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800384e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003854:	e01c      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385a:	3308      	adds	r3, #8
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f001 fbe6 	bl	8005030 <RCCEx_PLL2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800386a:	e011      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003870:	3328      	adds	r3, #40	; 0x28
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fc8d 	bl	8005194 <RCCEx_PLL3_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003880:	e006      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800388e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	4a4c      	ldr	r2, [pc, #304]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6513      	str	r3, [r2, #80]	; 0x50
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80038c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80038cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80038d0:	460b      	mov	r3, r1
 80038d2:	4313      	orrs	r3, r2
 80038d4:	d053      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038e2:	d035      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80038e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038e8:	d82e      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038ee:	d031      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80038f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038f4:	d828      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fa:	d01a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80038fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003900:	d822      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800390a:	d007      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800390c:	e01c      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800391a:	e01c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003920:	3308      	adds	r3, #8
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f001 fb83 	bl	8005030 <RCCEx_PLL2_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003930:	e011      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003936:	3328      	adds	r3, #40	; 0x28
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fc2a 	bl	8005194 <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003946:	e006      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800394e:	e002      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6593      	str	r3, [r2, #88]	; 0x58
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800398a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003994:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003998:	460b      	mov	r3, r1
 800399a:	4313      	orrs	r3, r2
 800399c:	d056      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039aa:	d038      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b0:	d831      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039b6:	d034      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80039b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039bc:	d82b      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039c2:	d01d      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80039c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039c8:	d825      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80039ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039d4:	e01f      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039d6:	bf00      	nop
 80039d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039dc:	4ba2      	ldr	r3, [pc, #648]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4aa1      	ldr	r2, [pc, #644]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039e8:	e01c      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ee:	3308      	adds	r3, #8
 80039f0:	2100      	movs	r1, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 fb1c 	bl	8005030 <RCCEx_PLL2_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039fe:	e011      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a04:	3328      	adds	r3, #40	; 0x28
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fbc3 	bl	8005194 <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a14:	e006      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a1c:	e002      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a2c:	4b8e      	ldr	r3, [pc, #568]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a3c:	4a8a      	ldr	r2, [pc, #552]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
 8003a42:	e003      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	d03a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a72:	2b30      	cmp	r3, #48	; 0x30
 8003a74:	d01f      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a76:	2b30      	cmp	r3, #48	; 0x30
 8003a78:	d819      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d00c      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d815      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d019      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d111      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8a:	4b77      	ldr	r3, [pc, #476]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	4a76      	ldr	r2, [pc, #472]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a96:	e011      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 fac5 	bl	8005030 <RCCEx_PLL2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003aac:	e006      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ab4:	e002      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ab6:	bf00      	nop
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ac4:	4b68      	ldr	r3, [pc, #416]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad8:	e003      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003aee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003af2:	2300      	movs	r3, #0
 8003af4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003af8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4313      	orrs	r3, r2
 8003b00:	d051      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b0c:	d035      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b12:	d82e      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b18:	d031      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b1e:	d828      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	d01a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2a:	d822      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b34:	d007      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b36:	e01c      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b38:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4a4a      	ldr	r2, [pc, #296]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b44:	e01c      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 fa6e 	bl	8005030 <RCCEx_PLL2_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b5a:	e011      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b60:	3328      	adds	r3, #40	; 0x28
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fb15 	bl	8005194 <RCCEx_PLL3_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b70:	e006      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b78:	e002      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b88:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	4a34      	ldr	r2, [pc, #208]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003bbc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	d056      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd0:	d033      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd6:	d82c      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bdc:	d02f      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be2:	d826      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be8:	d02b      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003bea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bee:	d820      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf4:	d012      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bfa:	d81a      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d022      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d115      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 fa0e 	bl	8005030 <RCCEx_PLL2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c1a:	e015      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c20:	3328      	adds	r3, #40	; 0x28
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 fab5 	bl	8005194 <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c30:	e00a      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c38:	e006      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c3a:	bf00      	nop
 8003c3c:	e004      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5e:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6513      	str	r3, [r2, #80]	; 0x50
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c66:	bf00      	nop
 8003c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003c80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4313      	orrs	r3, r2
 8003c92:	d055      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca0:	d033      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca6:	d82c      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d02f      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d826      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb8:	d02b      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003cba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cbe:	d820      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc4:	d012      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cca:	d81a      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d022      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cd4:	d115      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cda:	3308      	adds	r3, #8
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 f9a6 	bl	8005030 <RCCEx_PLL2_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cea:	e015      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf0:	3328      	adds	r3, #40	; 0x28
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 fa4d 	bl	8005194 <RCCEx_PLL3_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d00:	e00a      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d08:	e006      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e004      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d20:	4ba3      	ldr	r3, [pc, #652]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d30:	4a9f      	ldr	r2, [pc, #636]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6593      	str	r3, [r2, #88]	; 0x58
 8003d36:	e003      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	d037      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6a:	d00e      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d70:	d816      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d018      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7a:	d111      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7c:	4b8c      	ldr	r3, [pc, #560]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4a8b      	ldr	r2, [pc, #556]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d88:	e00f      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	3308      	adds	r3, #8
 8003d90:	2101      	movs	r1, #1
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f94c 	bl	8005030 <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d9e:	e004      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003db2:	4b7f      	ldr	r3, [pc, #508]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a7b      	ldr	r2, [pc, #492]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	6513      	str	r3, [r2, #80]	; 0x50
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003de6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4313      	orrs	r3, r2
 8003dee:	d039      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d81c      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e3d 	.word	0x08003e3d
 8003e04:	08003e11 	.word	0x08003e11
 8003e08:	08003e1f 	.word	0x08003e1f
 8003e0c:	08003e3d 	.word	0x08003e3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e10:	4b67      	ldr	r3, [pc, #412]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	4a66      	ldr	r2, [pc, #408]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	3308      	adds	r3, #8
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 f902 	bl	8005030 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e46:	4b5a      	ldr	r3, [pc, #360]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	f023 0103 	bic.w	r1, r3, #3
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e54:	4a56      	ldr	r2, [pc, #344]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f000 809f 	beq.w	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e86:	4b4b      	ldr	r3, [pc, #300]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a4a      	ldr	r2, [pc, #296]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e92:	f7fd fb2d 	bl	80014f0 <HAL_GetTick>
 8003e96:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fd fb28 	bl	80014f0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b64      	cmp	r3, #100	; 0x64
 8003eaa:	d903      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eb4:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ed      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d179      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ec8:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ed4:	4053      	eors	r3, r2
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d015      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ede:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a30      	ldr	r2, [pc, #192]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f02:	4a2b      	ldr	r2, [pc, #172]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f16:	d118      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fd faea 	bl	80014f0 <HAL_GetTick>
 8003f1c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f20:	e00d      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fd fae5 	bl	80014f0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f2c:	1ad2      	subs	r2, r2, r3
 8003f2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d903      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003f3c:	e005      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0eb      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d129      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f62:	d10e      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f74:	091a      	lsrs	r2, r3, #4
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6113      	str	r3, [r2, #16]
 8003f80:	e005      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f8c:	6113      	str	r3, [r2, #16]
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa4:	e00e      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003faa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003fae:	e009      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	58024800 	.word	0x58024800
 8003fb8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f002 0301 	and.w	r3, r2, #1
 8003fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f000 8089 	beq.w	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fec:	2b28      	cmp	r3, #40	; 0x28
 8003fee:	d86b      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	080040d1 	.word	0x080040d1
 8003ffc:	080040c9 	.word	0x080040c9
 8004000:	080040c9 	.word	0x080040c9
 8004004:	080040c9 	.word	0x080040c9
 8004008:	080040c9 	.word	0x080040c9
 800400c:	080040c9 	.word	0x080040c9
 8004010:	080040c9 	.word	0x080040c9
 8004014:	080040c9 	.word	0x080040c9
 8004018:	0800409d 	.word	0x0800409d
 800401c:	080040c9 	.word	0x080040c9
 8004020:	080040c9 	.word	0x080040c9
 8004024:	080040c9 	.word	0x080040c9
 8004028:	080040c9 	.word	0x080040c9
 800402c:	080040c9 	.word	0x080040c9
 8004030:	080040c9 	.word	0x080040c9
 8004034:	080040c9 	.word	0x080040c9
 8004038:	080040b3 	.word	0x080040b3
 800403c:	080040c9 	.word	0x080040c9
 8004040:	080040c9 	.word	0x080040c9
 8004044:	080040c9 	.word	0x080040c9
 8004048:	080040c9 	.word	0x080040c9
 800404c:	080040c9 	.word	0x080040c9
 8004050:	080040c9 	.word	0x080040c9
 8004054:	080040c9 	.word	0x080040c9
 8004058:	080040d1 	.word	0x080040d1
 800405c:	080040c9 	.word	0x080040c9
 8004060:	080040c9 	.word	0x080040c9
 8004064:	080040c9 	.word	0x080040c9
 8004068:	080040c9 	.word	0x080040c9
 800406c:	080040c9 	.word	0x080040c9
 8004070:	080040c9 	.word	0x080040c9
 8004074:	080040c9 	.word	0x080040c9
 8004078:	080040d1 	.word	0x080040d1
 800407c:	080040c9 	.word	0x080040c9
 8004080:	080040c9 	.word	0x080040c9
 8004084:	080040c9 	.word	0x080040c9
 8004088:	080040c9 	.word	0x080040c9
 800408c:	080040c9 	.word	0x080040c9
 8004090:	080040c9 	.word	0x080040c9
 8004094:	080040c9 	.word	0x080040c9
 8004098:	080040d1 	.word	0x080040d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a0:	3308      	adds	r3, #8
 80040a2:	2101      	movs	r1, #1
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 ffc3 	bl	8005030 <RCCEx_PLL2_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040b0:	e00f      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b6:	3328      	adds	r3, #40	; 0x28
 80040b8:	2101      	movs	r1, #1
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 f86a 	bl	8005194 <RCCEx_PLL3_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040c6:	e004      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ce:	e000      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80040d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040da:	4bbf      	ldr	r3, [pc, #764]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e8:	4abb      	ldr	r2, [pc, #748]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040ea:	430b      	orrs	r3, r1
 80040ec:	6553      	str	r3, [r2, #84]	; 0x54
 80040ee:	e003      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f002 0302 	and.w	r3, r2, #2
 8004104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800410e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004112:	460b      	mov	r3, r1
 8004114:	4313      	orrs	r3, r2
 8004116:	d041      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411e:	2b05      	cmp	r3, #5
 8004120:	d824      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	08004175 	.word	0x08004175
 800412c:	08004141 	.word	0x08004141
 8004130:	08004157 	.word	0x08004157
 8004134:	08004175 	.word	0x08004175
 8004138:	08004175 	.word	0x08004175
 800413c:	08004175 	.word	0x08004175
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004144:	3308      	adds	r3, #8
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f000 ff71 	bl	8005030 <RCCEx_PLL2_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004154:	e00f      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415a:	3328      	adds	r3, #40	; 0x28
 800415c:	2101      	movs	r1, #1
 800415e:	4618      	mov	r0, r3
 8004160:	f001 f818 	bl	8005194 <RCCEx_PLL3_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800417e:	4b96      	ldr	r3, [pc, #600]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f023 0107 	bic.w	r1, r3, #7
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418c:	4a92      	ldr	r2, [pc, #584]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800418e:	430b      	orrs	r3, r1
 8004190:	6553      	str	r3, [r2, #84]	; 0x54
 8004192:	e003      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004198:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f002 0304 	and.w	r3, r2, #4
 80041a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	d044      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d825      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	0800421d 	.word	0x0800421d
 80041d4:	080041e9 	.word	0x080041e9
 80041d8:	080041ff 	.word	0x080041ff
 80041dc:	0800421d 	.word	0x0800421d
 80041e0:	0800421d 	.word	0x0800421d
 80041e4:	0800421d 	.word	0x0800421d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ec:	3308      	adds	r3, #8
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 ff1d 	bl	8005030 <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041fc:	e00f      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004202:	3328      	adds	r3, #40	; 0x28
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f000 ffc4 	bl	8005194 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004226:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	f023 0107 	bic.w	r1, r3, #7
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004236:	4a68      	ldr	r2, [pc, #416]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004238:	430b      	orrs	r3, r1
 800423a:	6593      	str	r3, [r2, #88]	; 0x58
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f002 0320 	and.w	r3, r2, #32
 8004252:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800425c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d055      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004272:	d033      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004278:	d82c      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d02f      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004284:	d826      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004286:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800428a:	d02b      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800428c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004290:	d820      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004296:	d012      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800429c:	d81a      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d022      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80042a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a6:	d115      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ac:	3308      	adds	r3, #8
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 febd 	bl	8005030 <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042bc:	e015      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c2:	3328      	adds	r3, #40	; 0x28
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 ff64 	bl	8005194 <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042d2:	e00a      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042da:	e006      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042dc:	bf00      	nop
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042e0:	bf00      	nop
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10b      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f2:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	4a35      	ldr	r2, [pc, #212]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004304:	430b      	orrs	r3, r1
 8004306:	6553      	str	r3, [r2, #84]	; 0x54
 8004308:	e003      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800430e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800431e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004322:	2300      	movs	r3, #0
 8004324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004328:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800432c:	460b      	mov	r3, r1
 800432e:	4313      	orrs	r3, r2
 8004330:	d058      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800433a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800433e:	d033      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004340:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004344:	d82c      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	d02f      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d826      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004356:	d02b      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800435c:	d820      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800435e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004362:	d012      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004368:	d81a      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d022      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d115      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004378:	3308      	adds	r3, #8
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fe57 	bl	8005030 <RCCEx_PLL2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004388:	e015      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438e:	3328      	adds	r3, #40	; 0x28
 8004390:	2102      	movs	r1, #2
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fefe 	bl	8005194 <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800439e:	e00a      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043a6:	e006      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043a8:	bf00      	nop
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10e      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ce:	4a02      	ldr	r2, [pc, #8]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6593      	str	r3, [r2, #88]	; 0x58
 80043d4:	e006      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80043d6:	bf00      	nop
 80043d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80043f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80043fe:	460b      	mov	r3, r1
 8004400:	4313      	orrs	r3, r2
 8004402:	d055      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800440c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004410:	d033      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004412:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004416:	d82c      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441c:	d02f      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800441e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004422:	d826      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004424:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004428:	d02b      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800442a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800442e:	d820      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004434:	d012      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800443a:	d81a      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d022      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004444:	d115      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444a:	3308      	adds	r3, #8
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fdee 	bl	8005030 <RCCEx_PLL2_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800445a:	e015      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004460:	3328      	adds	r3, #40	; 0x28
 8004462:	2102      	movs	r1, #2
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fe95 	bl	8005194 <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004470:	e00a      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004478:	e006      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800447a:	bf00      	nop
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004490:	4ba1      	ldr	r3, [pc, #644]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044a0:	4a9d      	ldr	r2, [pc, #628]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a2:	430b      	orrs	r3, r1
 80044a4:	6593      	str	r3, [r2, #88]	; 0x58
 80044a6:	e003      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f002 0308 	and.w	r3, r2, #8
 80044bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80044ca:	460b      	mov	r3, r1
 80044cc:	4313      	orrs	r3, r2
 80044ce:	d01e      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e2:	3328      	adds	r3, #40	; 0x28
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fe54 	bl	8005194 <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044f8:	4b87      	ldr	r3, [pc, #540]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004508:	4a83      	ldr	r2, [pc, #524]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800450a:	430b      	orrs	r3, r1
 800450c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	f002 0310 	and.w	r3, r2, #16
 800451a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800451e:	2300      	movs	r3, #0
 8004520:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004524:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004528:	460b      	mov	r3, r1
 800452a:	4313      	orrs	r3, r2
 800452c:	d01e      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453a:	d10c      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004540:	3328      	adds	r3, #40	; 0x28
 8004542:	2102      	movs	r1, #2
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fe25 	bl	8005194 <RCCEx_PLL3_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004556:	4b70      	ldr	r3, [pc, #448]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004566:	4a6c      	ldr	r2, [pc, #432]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004568:	430b      	orrs	r3, r1
 800456a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800457c:	2300      	movs	r3, #0
 800457e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004582:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004586:	460b      	mov	r3, r1
 8004588:	4313      	orrs	r3, r2
 800458a:	d03e      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004598:	d022      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800459a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800459e:	d81b      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d00b      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80045aa:	e015      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b0:	3308      	adds	r3, #8
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fd3b 	bl	8005030 <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045c0:	e00f      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c6:	3328      	adds	r3, #40	; 0x28
 80045c8:	2102      	movs	r1, #2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fde2 	bl	8005194 <RCCEx_PLL3_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045d6:	e004      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045de:	e000      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80045e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045ea:	4b4b      	ldr	r3, [pc, #300]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045fa:	4a47      	ldr	r2, [pc, #284]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004600:	e003      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004616:	67bb      	str	r3, [r7, #120]	; 0x78
 8004618:	2300      	movs	r3, #0
 800461a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800461c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d03b      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004632:	d01f      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004634:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004638:	d818      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800463a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463e:	d003      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004644:	d007      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004646:	e011      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004648:	4b33      	ldr	r3, [pc, #204]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4a32      	ldr	r2, [pc, #200]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800464e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004654:	e00f      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465a:	3328      	adds	r3, #40	; 0x28
 800465c:	2101      	movs	r1, #1
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fd98 	bl	8005194 <RCCEx_PLL3_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800466a:	e004      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800467e:	4b26      	ldr	r3, [pc, #152]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	4a22      	ldr	r2, [pc, #136]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004690:	430b      	orrs	r3, r1
 8004692:	6553      	str	r3, [r2, #84]	; 0x54
 8004694:	e003      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800469a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80046aa:	673b      	str	r3, [r7, #112]	; 0x70
 80046ac:	2300      	movs	r3, #0
 80046ae:	677b      	str	r3, [r7, #116]	; 0x74
 80046b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d034      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	d007      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80046ca:	e011      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046cc:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4a11      	ldr	r2, [pc, #68]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046d8:	e00e      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046de:	3308      	adds	r3, #8
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fca4 	bl	8005030 <RCCEx_PLL2_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10d      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004704:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470e:	4a02      	ldr	r2, [pc, #8]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004710:	430b      	orrs	r3, r1
 8004712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004714:	e006      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004716:	bf00      	nop
 8004718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004730:	66bb      	str	r3, [r7, #104]	; 0x68
 8004732:	2300      	movs	r3, #0
 8004734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004736:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800473a:	460b      	mov	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	d00c      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004744:	3328      	adds	r3, #40	; 0x28
 8004746:	2102      	movs	r1, #2
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fd23 	bl	8005194 <RCCEx_PLL3_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004766:	663b      	str	r3, [r7, #96]	; 0x60
 8004768:	2300      	movs	r3, #0
 800476a:	667b      	str	r3, [r7, #100]	; 0x64
 800476c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004770:	460b      	mov	r3, r1
 8004772:	4313      	orrs	r3, r2
 8004774:	d038      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004782:	d018      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004788:	d811      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800478a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800478e:	d014      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004794:	d80b      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d011      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800479a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479e:	d106      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a0:	4bc3      	ldr	r3, [pc, #780]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	4ac2      	ldr	r2, [pc, #776]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80047ac:	e008      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047b4:	e004      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047b6:	bf00      	nop
 80047b8:	e002      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047c8:	4bb9      	ldr	r3, [pc, #740]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d8:	4ab5      	ldr	r2, [pc, #724]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047da:	430b      	orrs	r3, r1
 80047dc:	6553      	str	r3, [r2, #84]	; 0x54
 80047de:	e003      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80047f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f6:	2300      	movs	r3, #0
 80047f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80047fe:	460b      	mov	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	d009      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004804:	4baa      	ldr	r3, [pc, #680]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	4aa7      	ldr	r2, [pc, #668]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004814:	430b      	orrs	r3, r1
 8004816:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004824:	653b      	str	r3, [r7, #80]	; 0x50
 8004826:	2300      	movs	r3, #0
 8004828:	657b      	str	r3, [r7, #84]	; 0x54
 800482a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004834:	4b9e      	ldr	r3, [pc, #632]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004840:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004844:	4a9a      	ldr	r2, [pc, #616]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004846:	430b      	orrs	r3, r1
 8004848:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48
 8004858:	2300      	movs	r3, #0
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004860:	460b      	mov	r3, r1
 8004862:	4313      	orrs	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004866:	4b92      	ldr	r3, [pc, #584]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004874:	4a8e      	ldr	r2, [pc, #568]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004876:	430b      	orrs	r3, r1
 8004878:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004886:	643b      	str	r3, [r7, #64]	; 0x40
 8004888:	2300      	movs	r3, #0
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
 800488c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d00e      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004896:	4b86      	ldr	r3, [pc, #536]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	4a85      	ldr	r2, [pc, #532]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048a0:	6113      	str	r3, [r2, #16]
 80048a2:	4b83      	ldr	r3, [pc, #524]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a4:	6919      	ldr	r1, [r3, #16]
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048ae:	4a80      	ldr	r2, [pc, #512]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80048c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c2:	2300      	movs	r3, #0
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048d0:	4b77      	ldr	r3, [pc, #476]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048de:	4a74      	ldr	r2, [pc, #464]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
 80048f2:	2300      	movs	r3, #0
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
 80048f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004900:	4b6b      	ldr	r3, [pc, #428]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004910:	4a67      	ldr	r2, [pc, #412]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004912:	430b      	orrs	r3, r1
 8004914:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	2100      	movs	r1, #0
 8004920:	62b9      	str	r1, [r7, #40]	; 0x28
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004928:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d011      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004936:	3308      	adds	r3, #8
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fb78 	bl	8005030 <RCCEx_PLL2_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	2100      	movs	r1, #0
 8004960:	6239      	str	r1, [r7, #32]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800496c:	460b      	mov	r3, r1
 800496e:	4313      	orrs	r3, r2
 8004970:	d011      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004976:	3308      	adds	r3, #8
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fb58 	bl	8005030 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	2100      	movs	r1, #0
 80049a0:	61b9      	str	r1, [r7, #24]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049ac:	460b      	mov	r3, r1
 80049ae:	4313      	orrs	r3, r2
 80049b0:	d011      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b6:	3308      	adds	r3, #8
 80049b8:	2102      	movs	r1, #2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fb38 	bl	8005030 <RCCEx_PLL2_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	2100      	movs	r1, #0
 80049e0:	6139      	str	r1, [r7, #16]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049ec:	460b      	mov	r3, r1
 80049ee:	4313      	orrs	r3, r2
 80049f0:	d011      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f6:	3328      	adds	r3, #40	; 0x28
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fbca 	bl	8005194 <RCCEx_PLL3_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d011      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a36:	3328      	adds	r3, #40	; 0x28
 8004a38:	2101      	movs	r1, #1
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fbaa 	bl	8005194 <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6039      	str	r1, [r7, #0]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d011      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a76:	3328      	adds	r3, #40	; 0x28
 8004a78:	2102      	movs	r1, #2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fb8a 	bl	8005194 <RCCEx_PLL3_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004a96:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab0:	58024400 	.word	0x58024400

08004ab4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ab8:	f7fe fd54 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	4904      	ldr	r1, [pc, #16]	; (8004adc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004aca:	5ccb      	ldrb	r3, [r1, r3]
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	0800a120 	.word	0x0800a120

08004ae0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b089      	sub	sp, #36	; 0x24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ae8:	4ba1      	ldr	r3, [pc, #644]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004af2:	4b9f      	ldr	r3, [pc, #636]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	0b1b      	lsrs	r3, r3, #12
 8004af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004afc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004afe:	4b9c      	ldr	r3, [pc, #624]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b0a:	4b99      	ldr	r3, [pc, #612]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	08db      	lsrs	r3, r3, #3
 8004b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8111 	beq.w	8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	f000 8083 	beq.w	8004c3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	f200 80a1 	bhi.w	8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d056      	beq.n	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b4a:	e099      	b.n	8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b4c:	4b88      	ldr	r3, [pc, #544]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d02d      	beq.n	8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b58:	4b85      	ldr	r3, [pc, #532]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	4a84      	ldr	r2, [pc, #528]	; (8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
 8004b68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b7b      	ldr	r3, [pc, #492]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bb2:	e087      	b.n	8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc6:	4b6a      	ldr	r3, [pc, #424]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf6:	e065      	b.n	8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0a:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3a:	e043      	b.n	8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4e:	4b48      	ldr	r3, [pc, #288]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c7e:	e021      	b.n	8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c92:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	0a5b      	lsrs	r3, r3, #9
 8004cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cea:	ee17 2a90 	vmov	r2, s15
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	0c1b      	lsrs	r3, r3, #16
 8004cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cfc:	ee07 3a90 	vmov	s15, r3
 8004d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d18:	ee17 2a90 	vmov	r2, s15
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d20:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d46:	ee17 2a90 	vmov	r2, s15
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d4e:	e008      	b.n	8004d62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	609a      	str	r2, [r3, #8]
}
 8004d62:	bf00      	nop
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	58024400 	.word	0x58024400
 8004d74:	03d09000 	.word	0x03d09000
 8004d78:	46000000 	.word	0x46000000
 8004d7c:	4c742400 	.word	0x4c742400
 8004d80:	4a742400 	.word	0x4a742400
 8004d84:	4af42400 	.word	0x4af42400

08004d88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d90:	4ba1      	ldr	r3, [pc, #644]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d9a:	4b9f      	ldr	r3, [pc, #636]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	0d1b      	lsrs	r3, r3, #20
 8004da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004da6:	4b9c      	ldr	r3, [pc, #624]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004db2:	4b99      	ldr	r3, [pc, #612]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	08db      	lsrs	r3, r3, #3
 8004db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8111 	beq.w	8004ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f000 8083 	beq.w	8004ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	f200 80a1 	bhi.w	8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d056      	beq.n	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004df2:	e099      	b.n	8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004df4:	4b88      	ldr	r3, [pc, #544]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02d      	beq.n	8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e00:	4b85      	ldr	r3, [pc, #532]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	08db      	lsrs	r3, r3, #3
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	4a84      	ldr	r2, [pc, #528]	; (800501c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b7b      	ldr	r3, [pc, #492]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e5a:	e087      	b.n	8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e9e:	e065      	b.n	8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb2:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ee2:	e043      	b.n	8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800502c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef6:	4b48      	ldr	r3, [pc, #288]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f26:	e021      	b.n	8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3a:	4b37      	ldr	r3, [pc, #220]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f6c:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	0a5b      	lsrs	r3, r3, #9
 8004f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f92:	ee17 2a90 	vmov	r2, s15
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	0c1b      	lsrs	r3, r3, #16
 8004fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc0:	ee17 2a90 	vmov	r2, s15
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004fc8:	4b13      	ldr	r3, [pc, #76]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	0e1b      	lsrs	r3, r3, #24
 8004fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fe2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fee:	ee17 2a90 	vmov	r2, s15
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ff6:	e008      	b.n	800500a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	609a      	str	r2, [r3, #8]
}
 800500a:	bf00      	nop
 800500c:	3724      	adds	r7, #36	; 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	03d09000 	.word	0x03d09000
 8005020:	46000000 	.word	0x46000000
 8005024:	4c742400 	.word	0x4c742400
 8005028:	4a742400 	.word	0x4a742400
 800502c:	4af42400 	.word	0x4af42400

08005030 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800503e:	4b53      	ldr	r3, [pc, #332]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b03      	cmp	r3, #3
 8005048:	d101      	bne.n	800504e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e099      	b.n	8005182 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800504e:	4b4f      	ldr	r3, [pc, #316]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4e      	ldr	r2, [pc, #312]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005054:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505a:	f7fc fa49 	bl	80014f0 <HAL_GetTick>
 800505e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005060:	e008      	b.n	8005074 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005062:	f7fc fa45 	bl	80014f0 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e086      	b.n	8005182 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005074:	4b45      	ldr	r3, [pc, #276]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005080:	4b42      	ldr	r3, [pc, #264]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	493f      	ldr	r1, [pc, #252]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005090:	4313      	orrs	r3, r2
 8005092:	628b      	str	r3, [r1, #40]	; 0x28
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	3b01      	subs	r3, #1
 800509a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	025b      	lsls	r3, r3, #9
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	3b01      	subs	r3, #1
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050c4:	4931      	ldr	r1, [pc, #196]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050ca:	4b30      	ldr	r3, [pc, #192]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	492d      	ldr	r1, [pc, #180]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050dc:	4b2b      	ldr	r3, [pc, #172]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	f023 0220 	bic.w	r2, r3, #32
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	4928      	ldr	r1, [pc, #160]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050ee:	4b27      	ldr	r3, [pc, #156]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	4a26      	ldr	r2, [pc, #152]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 80050f4:	f023 0310 	bic.w	r3, r3, #16
 80050f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 80050fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050fe:	4b24      	ldr	r3, [pc, #144]	; (8005190 <RCCEx_PLL2_Config+0x160>)
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	69d2      	ldr	r2, [r2, #28]
 8005106:	00d2      	lsls	r2, r2, #3
 8005108:	4920      	ldr	r1, [pc, #128]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 800510a:	4313      	orrs	r3, r2
 800510c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800510e:	4b1f      	ldr	r3, [pc, #124]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	4a1e      	ldr	r2, [pc, #120]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005114:	f043 0310 	orr.w	r3, r3, #16
 8005118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	4a19      	ldr	r2, [pc, #100]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800512a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800512c:	e00f      	b.n	800514e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d106      	bne.n	8005142 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005134:	4b15      	ldr	r3, [pc, #84]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	4a14      	ldr	r2, [pc, #80]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 800513a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005140:	e005      	b.n	800514e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	4a11      	ldr	r2, [pc, #68]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800514c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005154:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515a:	f7fc f9c9 	bl	80014f0 <HAL_GetTick>
 800515e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005160:	e008      	b.n	8005174 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005162:	f7fc f9c5 	bl	80014f0 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e006      	b.n	8005182 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <RCCEx_PLL2_Config+0x15c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	58024400 	.word	0x58024400
 8005190:	ffff0007 	.word	0xffff0007

08005194 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051a2:	4b53      	ldr	r3, [pc, #332]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d101      	bne.n	80051b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e099      	b.n	80052e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051b2:	4b4f      	ldr	r3, [pc, #316]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a4e      	ldr	r2, [pc, #312]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051be:	f7fc f997 	bl	80014f0 <HAL_GetTick>
 80051c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051c4:	e008      	b.n	80051d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051c6:	f7fc f993 	bl	80014f0 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e086      	b.n	80052e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051d8:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f0      	bne.n	80051c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051e4:	4b42      	ldr	r3, [pc, #264]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	051b      	lsls	r3, r3, #20
 80051f2:	493f      	ldr	r1, [pc, #252]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	628b      	str	r3, [r1, #40]	; 0x28
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	3b01      	subs	r3, #1
 8005208:	025b      	lsls	r3, r3, #9
 800520a:	b29b      	uxth	r3, r3
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	3b01      	subs	r3, #1
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	3b01      	subs	r3, #1
 8005222:	061b      	lsls	r3, r3, #24
 8005224:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005228:	4931      	ldr	r1, [pc, #196]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800522e:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	492d      	ldr	r1, [pc, #180]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005240:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	4928      	ldr	r1, [pc, #160]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 800524e:	4313      	orrs	r3, r2
 8005250:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005252:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 8005260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005262:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <RCCEx_PLL3_Config+0x160>)
 8005264:	4013      	ands	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	69d2      	ldr	r2, [r2, #28]
 800526a:	00d2      	lsls	r2, r2, #3
 800526c:	4920      	ldr	r1, [pc, #128]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005272:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005284:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 800528a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800528e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005290:	e00f      	b.n	80052b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d106      	bne.n	80052a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005298:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 800529e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052a4:	e005      	b.n	80052b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a0e      	ldr	r2, [pc, #56]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80052b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052be:	f7fc f917 	bl	80014f0 <HAL_GetTick>
 80052c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052c4:	e008      	b.n	80052d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052c6:	f7fc f913 	bl	80014f0 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e006      	b.n	80052e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <RCCEx_PLL3_Config+0x15c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	58024400 	.word	0x58024400
 80052f4:	ffff0007 	.word	0xffff0007

080052f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e10f      	b.n	800552a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a87      	ldr	r2, [pc, #540]	; (8005534 <HAL_SPI_Init+0x23c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00f      	beq.n	800533a <HAL_SPI_Init+0x42>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a86      	ldr	r2, [pc, #536]	; (8005538 <HAL_SPI_Init+0x240>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00a      	beq.n	800533a <HAL_SPI_Init+0x42>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a84      	ldr	r2, [pc, #528]	; (800553c <HAL_SPI_Init+0x244>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d005      	beq.n	800533a <HAL_SPI_Init+0x42>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d901      	bls.n	800533a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e0f7      	b.n	800552a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f900 	bl	8005540 <SPI_GetPacketSize>
 8005340:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7b      	ldr	r2, [pc, #492]	; (8005534 <HAL_SPI_Init+0x23c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00c      	beq.n	8005366 <HAL_SPI_Init+0x6e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a79      	ldr	r2, [pc, #484]	; (8005538 <HAL_SPI_Init+0x240>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <HAL_SPI_Init+0x6e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a78      	ldr	r2, [pc, #480]	; (800553c <HAL_SPI_Init+0x244>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d002      	beq.n	8005366 <HAL_SPI_Init+0x6e>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b08      	cmp	r3, #8
 8005364:	d811      	bhi.n	800538a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800536a:	4a72      	ldr	r2, [pc, #456]	; (8005534 <HAL_SPI_Init+0x23c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a70      	ldr	r2, [pc, #448]	; (8005538 <HAL_SPI_Init+0x240>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_SPI_Init+0x8c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a6f      	ldr	r2, [pc, #444]	; (800553c <HAL_SPI_Init+0x244>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d104      	bne.n	800538e <HAL_SPI_Init+0x96>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b10      	cmp	r3, #16
 8005388:	d901      	bls.n	800538e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0cd      	b.n	800552a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fb fda2 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0201 	bic.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80053ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d4:	d119      	bne.n	800540a <HAL_SPI_Init+0x112>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053de:	d103      	bne.n	80053e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10c      	bne.n	800540a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80053f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f8:	d107      	bne.n	800540a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005408:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00f      	beq.n	8005436 <HAL_SPI_Init+0x13e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b06      	cmp	r3, #6
 800541c:	d90b      	bls.n	8005436 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e007      	b.n	8005446 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	431a      	orrs	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	ea42 0103 	orr.w	r1, r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	ea42 0103 	orr.w	r1, r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d113      	bne.n	80054e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40013000 	.word	0x40013000
 8005538:	40003800 	.word	0x40003800
 800553c:	40003c00 	.word	0x40003c00

08005540 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	3301      	adds	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	3307      	adds	r3, #7
 800555e:	08db      	lsrs	r3, r3, #3
 8005560:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e049      	b.n	800561c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d106      	bne.n	80055a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f841 	bl	8005624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f000 f9ff 	bl	80059b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	d001      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e054      	b.n	80056fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a26      	ldr	r2, [pc, #152]	; (8005708 <HAL_TIM_Base_Start_IT+0xd0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567a:	d01d      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a22      	ldr	r2, [pc, #136]	; (800570c <HAL_TIM_Base_Start_IT+0xd4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a21      	ldr	r2, [pc, #132]	; (8005710 <HAL_TIM_Base_Start_IT+0xd8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_TIM_Base_Start_IT+0xdc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <HAL_TIM_Base_Start_IT+0xe0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_TIM_Base_Start_IT+0xe4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <HAL_TIM_Base_Start_IT+0xe8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d115      	bne.n	80056e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	4b19      	ldr	r3, [pc, #100]	; (8005724 <HAL_TIM_Base_Start_IT+0xec>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d015      	beq.n	80056f6 <HAL_TIM_Base_Start_IT+0xbe>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	d011      	beq.n	80056f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e2:	e008      	b.n	80056f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e000      	b.n	80056f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40010400 	.word	0x40010400
 800571c:	40001800 	.word	0x40001800
 8005720:	40014000 	.word	0x40014000
 8005724:	00010007 	.word	0x00010007

08005728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b02      	cmp	r3, #2
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0202 	mvn.w	r2, #2
 8005754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f905 	bl	800597a <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f8f7 	bl	8005966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f908 	bl	800598e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b04      	cmp	r3, #4
 8005790:	d122      	bne.n	80057d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b04      	cmp	r3, #4
 800579e:	d11b      	bne.n	80057d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0204 	mvn.w	r2, #4
 80057a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8db 	bl	800597a <HAL_TIM_IC_CaptureCallback>
 80057c4:	e005      	b.n	80057d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f8cd 	bl	8005966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f8de 	bl	800598e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0208 	mvn.w	r2, #8
 80057fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2204      	movs	r2, #4
 8005802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8b1 	bl	800597a <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8a3 	bl	8005966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8b4 	bl	800598e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b10      	cmp	r3, #16
 8005838:	d122      	bne.n	8005880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b10      	cmp	r3, #16
 8005846:	d11b      	bne.n	8005880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0210 	mvn.w	r2, #16
 8005850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2208      	movs	r2, #8
 8005856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f887 	bl	800597a <HAL_TIM_IC_CaptureCallback>
 800586c:	e005      	b.n	800587a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f879 	bl	8005966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f88a 	bl	800598e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10e      	bne.n	80058ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	d107      	bne.n	80058ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0201 	mvn.w	r2, #1
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fb fa1c 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d10e      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c4:	2b80      	cmp	r3, #128	; 0x80
 80058c6:	d107      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f914 	bl	8005b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e6:	d10e      	bne.n	8005906 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d107      	bne.n	8005906 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f907 	bl	8005b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d10e      	bne.n	8005932 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d107      	bne.n	8005932 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f838 	bl	80059a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b20      	cmp	r3, #32
 800593e:	d10e      	bne.n	800595e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b20      	cmp	r3, #32
 800594c:	d107      	bne.n	800595e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f06f 0220 	mvn.w	r2, #32
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8c7 	bl	8005aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a40      	ldr	r2, [pc, #256]	; (8005acc <TIM_Base_SetConfig+0x114>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d013      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d00f      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <TIM_Base_SetConfig+0x118>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00b      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3c      	ldr	r2, [pc, #240]	; (8005ad4 <TIM_Base_SetConfig+0x11c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d007      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3b      	ldr	r2, [pc, #236]	; (8005ad8 <TIM_Base_SetConfig+0x120>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3a      	ldr	r2, [pc, #232]	; (8005adc <TIM_Base_SetConfig+0x124>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d108      	bne.n	8005a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2f      	ldr	r2, [pc, #188]	; (8005acc <TIM_Base_SetConfig+0x114>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01f      	beq.n	8005a52 <TIM_Base_SetConfig+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a18:	d01b      	beq.n	8005a52 <TIM_Base_SetConfig+0x9a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2c      	ldr	r2, [pc, #176]	; (8005ad0 <TIM_Base_SetConfig+0x118>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d017      	beq.n	8005a52 <TIM_Base_SetConfig+0x9a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <TIM_Base_SetConfig+0x11c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <TIM_Base_SetConfig+0x9a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <TIM_Base_SetConfig+0x120>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00f      	beq.n	8005a52 <TIM_Base_SetConfig+0x9a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a29      	ldr	r2, [pc, #164]	; (8005adc <TIM_Base_SetConfig+0x124>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_Base_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <TIM_Base_SetConfig+0x128>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a27      	ldr	r2, [pc, #156]	; (8005ae4 <TIM_Base_SetConfig+0x12c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_Base_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <TIM_Base_SetConfig+0x130>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a10      	ldr	r2, [pc, #64]	; (8005acc <TIM_Base_SetConfig+0x114>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_Base_SetConfig+0xf8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a12      	ldr	r2, [pc, #72]	; (8005adc <TIM_Base_SetConfig+0x124>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_Base_SetConfig+0xf8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <TIM_Base_SetConfig+0x128>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_Base_SetConfig+0xf8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a10      	ldr	r2, [pc, #64]	; (8005ae4 <TIM_Base_SetConfig+0x12c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0xf8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0f      	ldr	r2, [pc, #60]	; (8005ae8 <TIM_Base_SetConfig+0x130>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d103      	bne.n	8005ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	615a      	str	r2, [r3, #20]
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40010400 	.word	0x40010400
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800

08005aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e042      	b.n	8005bc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fb fa5b 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2224      	movs	r2, #36	; 0x24
 8005b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f82c 	bl	8005bc8 <UART_SetConfig>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e022      	b.n	8005bc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fd88 	bl	8006698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fe0f 	bl	80067dc <UART_CheckIdleState>
 8005bbe:	4603      	mov	r3, r0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bcc:	b092      	sub	sp, #72	; 0x48
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4bbe      	ldr	r3, [pc, #760]	; (8005ef0 <UART_SetConfig+0x328>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4ab3      	ldr	r2, [pc, #716]	; (8005ef4 <UART_SetConfig+0x32c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c30:	4313      	orrs	r3, r2
 8005c32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	4baf      	ldr	r3, [pc, #700]	; (8005ef8 <UART_SetConfig+0x330>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	f023 010f 	bic.w	r1, r3, #15
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4aa6      	ldr	r2, [pc, #664]	; (8005efc <UART_SetConfig+0x334>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d177      	bne.n	8005d58 <UART_SetConfig+0x190>
 8005c68:	4ba5      	ldr	r3, [pc, #660]	; (8005f00 <UART_SetConfig+0x338>)
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c70:	2b28      	cmp	r3, #40	; 0x28
 8005c72:	d86d      	bhi.n	8005d50 <UART_SetConfig+0x188>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0xb4>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005d21 	.word	0x08005d21
 8005c80:	08005d51 	.word	0x08005d51
 8005c84:	08005d51 	.word	0x08005d51
 8005c88:	08005d51 	.word	0x08005d51
 8005c8c:	08005d51 	.word	0x08005d51
 8005c90:	08005d51 	.word	0x08005d51
 8005c94:	08005d51 	.word	0x08005d51
 8005c98:	08005d51 	.word	0x08005d51
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d51 	.word	0x08005d51
 8005ca4:	08005d51 	.word	0x08005d51
 8005ca8:	08005d51 	.word	0x08005d51
 8005cac:	08005d51 	.word	0x08005d51
 8005cb0:	08005d51 	.word	0x08005d51
 8005cb4:	08005d51 	.word	0x08005d51
 8005cb8:	08005d51 	.word	0x08005d51
 8005cbc:	08005d31 	.word	0x08005d31
 8005cc0:	08005d51 	.word	0x08005d51
 8005cc4:	08005d51 	.word	0x08005d51
 8005cc8:	08005d51 	.word	0x08005d51
 8005ccc:	08005d51 	.word	0x08005d51
 8005cd0:	08005d51 	.word	0x08005d51
 8005cd4:	08005d51 	.word	0x08005d51
 8005cd8:	08005d51 	.word	0x08005d51
 8005cdc:	08005d39 	.word	0x08005d39
 8005ce0:	08005d51 	.word	0x08005d51
 8005ce4:	08005d51 	.word	0x08005d51
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005d51 	.word	0x08005d51
 8005cf4:	08005d51 	.word	0x08005d51
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005d41 	.word	0x08005d41
 8005d00:	08005d51 	.word	0x08005d51
 8005d04:	08005d51 	.word	0x08005d51
 8005d08:	08005d51 	.word	0x08005d51
 8005d0c:	08005d51 	.word	0x08005d51
 8005d10:	08005d51 	.word	0x08005d51
 8005d14:	08005d51 	.word	0x08005d51
 8005d18:	08005d51 	.word	0x08005d51
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e222      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e21e      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d30:	2308      	movs	r3, #8
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e21a      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e216      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d40:	2320      	movs	r3, #32
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e212      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e20e      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e20a      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a69      	ldr	r2, [pc, #420]	; (8005f04 <UART_SetConfig+0x33c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d130      	bne.n	8005dc4 <UART_SetConfig+0x1fc>
 8005d62:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <UART_SetConfig+0x338>)
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d826      	bhi.n	8005dbc <UART_SetConfig+0x1f4>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x1ac>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d8d 	.word	0x08005d8d
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005db5 	.word	0x08005db5
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e1ec      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e1e8      	b.n	800616e <UART_SetConfig+0x5a6>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e1e4      	b.n	800616e <UART_SetConfig+0x5a6>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e1e0      	b.n	800616e <UART_SetConfig+0x5a6>
 8005dac:	2320      	movs	r3, #32
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e1dc      	b.n	800616e <UART_SetConfig+0x5a6>
 8005db4:	2340      	movs	r3, #64	; 0x40
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e1d8      	b.n	800616e <UART_SetConfig+0x5a6>
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e1d4      	b.n	800616e <UART_SetConfig+0x5a6>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a4f      	ldr	r2, [pc, #316]	; (8005f08 <UART_SetConfig+0x340>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d130      	bne.n	8005e30 <UART_SetConfig+0x268>
 8005dce:	4b4c      	ldr	r3, [pc, #304]	; (8005f00 <UART_SetConfig+0x338>)
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b05      	cmp	r3, #5
 8005dd8:	d826      	bhi.n	8005e28 <UART_SetConfig+0x260>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <UART_SetConfig+0x218>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e09 	.word	0x08005e09
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e1b6      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e1b2      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e1ae      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e1aa      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e18:	2320      	movs	r3, #32
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e1a6      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e20:	2340      	movs	r3, #64	; 0x40
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e1a2      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e28:	2380      	movs	r3, #128	; 0x80
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2e:	e19e      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a35      	ldr	r2, [pc, #212]	; (8005f0c <UART_SetConfig+0x344>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d130      	bne.n	8005e9c <UART_SetConfig+0x2d4>
 8005e3a:	4b31      	ldr	r3, [pc, #196]	; (8005f00 <UART_SetConfig+0x338>)
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d826      	bhi.n	8005e94 <UART_SetConfig+0x2cc>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <UART_SetConfig+0x284>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005e65 	.word	0x08005e65
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e8d 	.word	0x08005e8d
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e180      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e17c      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e74:	2308      	movs	r3, #8
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7a:	e178      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e82:	e174      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e84:	2320      	movs	r3, #32
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8a:	e170      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e16c      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e168      	b.n	800616e <UART_SetConfig+0x5a6>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <UART_SetConfig+0x348>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d142      	bne.n	8005f2c <UART_SetConfig+0x364>
 8005ea6:	4b16      	ldr	r3, [pc, #88]	; (8005f00 <UART_SetConfig+0x338>)
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d838      	bhi.n	8005f24 <UART_SetConfig+0x35c>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0x2f0>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005ed9 	.word	0x08005ed9
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005f15 	.word	0x08005f15
 8005ecc:	08005f1d 	.word	0x08005f1d
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed6:	e14a      	b.n	800616e <UART_SetConfig+0x5a6>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e146      	b.n	800616e <UART_SetConfig+0x5a6>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e142      	b.n	800616e <UART_SetConfig+0x5a6>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e13e      	b.n	800616e <UART_SetConfig+0x5a6>
 8005ef0:	cfff69f3 	.word	0xcfff69f3
 8005ef4:	58000c00 	.word	0x58000c00
 8005ef8:	11fff4ff 	.word	0x11fff4ff
 8005efc:	40011000 	.word	0x40011000
 8005f00:	58024400 	.word	0x58024400
 8005f04:	40004400 	.word	0x40004400
 8005f08:	40004800 	.word	0x40004800
 8005f0c:	40004c00 	.word	0x40004c00
 8005f10:	40005000 	.word	0x40005000
 8005f14:	2320      	movs	r3, #32
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e128      	b.n	800616e <UART_SetConfig+0x5a6>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e124      	b.n	800616e <UART_SetConfig+0x5a6>
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e120      	b.n	800616e <UART_SetConfig+0x5a6>
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4acb      	ldr	r2, [pc, #812]	; (8006260 <UART_SetConfig+0x698>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d176      	bne.n	8006024 <UART_SetConfig+0x45c>
 8005f36:	4bcb      	ldr	r3, [pc, #812]	; (8006264 <UART_SetConfig+0x69c>)
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f3e:	2b28      	cmp	r3, #40	; 0x28
 8005f40:	d86c      	bhi.n	800601c <UART_SetConfig+0x454>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0x380>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005fed 	.word	0x08005fed
 8005f4c:	0800601d 	.word	0x0800601d
 8005f50:	0800601d 	.word	0x0800601d
 8005f54:	0800601d 	.word	0x0800601d
 8005f58:	0800601d 	.word	0x0800601d
 8005f5c:	0800601d 	.word	0x0800601d
 8005f60:	0800601d 	.word	0x0800601d
 8005f64:	0800601d 	.word	0x0800601d
 8005f68:	08005ff5 	.word	0x08005ff5
 8005f6c:	0800601d 	.word	0x0800601d
 8005f70:	0800601d 	.word	0x0800601d
 8005f74:	0800601d 	.word	0x0800601d
 8005f78:	0800601d 	.word	0x0800601d
 8005f7c:	0800601d 	.word	0x0800601d
 8005f80:	0800601d 	.word	0x0800601d
 8005f84:	0800601d 	.word	0x0800601d
 8005f88:	08005ffd 	.word	0x08005ffd
 8005f8c:	0800601d 	.word	0x0800601d
 8005f90:	0800601d 	.word	0x0800601d
 8005f94:	0800601d 	.word	0x0800601d
 8005f98:	0800601d 	.word	0x0800601d
 8005f9c:	0800601d 	.word	0x0800601d
 8005fa0:	0800601d 	.word	0x0800601d
 8005fa4:	0800601d 	.word	0x0800601d
 8005fa8:	08006005 	.word	0x08006005
 8005fac:	0800601d 	.word	0x0800601d
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	0800601d 	.word	0x0800601d
 8005fbc:	0800601d 	.word	0x0800601d
 8005fc0:	0800601d 	.word	0x0800601d
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	0800600d 	.word	0x0800600d
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	0800601d 	.word	0x0800601d
 8005fd4:	0800601d 	.word	0x0800601d
 8005fd8:	0800601d 	.word	0x0800601d
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	0800601d 	.word	0x0800601d
 8005fe4:	0800601d 	.word	0x0800601d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e0bc      	b.n	800616e <UART_SetConfig+0x5a6>
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e0b8      	b.n	800616e <UART_SetConfig+0x5a6>
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e0b4      	b.n	800616e <UART_SetConfig+0x5a6>
 8006004:	2310      	movs	r3, #16
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e0b0      	b.n	800616e <UART_SetConfig+0x5a6>
 800600c:	2320      	movs	r3, #32
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e0ac      	b.n	800616e <UART_SetConfig+0x5a6>
 8006014:	2340      	movs	r3, #64	; 0x40
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e0a8      	b.n	800616e <UART_SetConfig+0x5a6>
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e0a4      	b.n	800616e <UART_SetConfig+0x5a6>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a8f      	ldr	r2, [pc, #572]	; (8006268 <UART_SetConfig+0x6a0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d130      	bne.n	8006090 <UART_SetConfig+0x4c8>
 800602e:	4b8d      	ldr	r3, [pc, #564]	; (8006264 <UART_SetConfig+0x69c>)
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b05      	cmp	r3, #5
 8006038:	d826      	bhi.n	8006088 <UART_SetConfig+0x4c0>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <UART_SetConfig+0x478>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006059 	.word	0x08006059
 8006044:	08006061 	.word	0x08006061
 8006048:	08006069 	.word	0x08006069
 800604c:	08006071 	.word	0x08006071
 8006050:	08006079 	.word	0x08006079
 8006054:	08006081 	.word	0x08006081
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e086      	b.n	800616e <UART_SetConfig+0x5a6>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e082      	b.n	800616e <UART_SetConfig+0x5a6>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e07e      	b.n	800616e <UART_SetConfig+0x5a6>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e07a      	b.n	800616e <UART_SetConfig+0x5a6>
 8006078:	2320      	movs	r3, #32
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e076      	b.n	800616e <UART_SetConfig+0x5a6>
 8006080:	2340      	movs	r3, #64	; 0x40
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e072      	b.n	800616e <UART_SetConfig+0x5a6>
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e06e      	b.n	800616e <UART_SetConfig+0x5a6>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a75      	ldr	r2, [pc, #468]	; (800626c <UART_SetConfig+0x6a4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d130      	bne.n	80060fc <UART_SetConfig+0x534>
 800609a:	4b72      	ldr	r3, [pc, #456]	; (8006264 <UART_SetConfig+0x69c>)
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d826      	bhi.n	80060f4 <UART_SetConfig+0x52c>
 80060a6:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0x4e4>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060c5 	.word	0x080060c5
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	080060d5 	.word	0x080060d5
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	2300      	movs	r3, #0
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e050      	b.n	800616e <UART_SetConfig+0x5a6>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e04c      	b.n	800616e <UART_SetConfig+0x5a6>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060da:	e048      	b.n	800616e <UART_SetConfig+0x5a6>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e044      	b.n	800616e <UART_SetConfig+0x5a6>
 80060e4:	2320      	movs	r3, #32
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e040      	b.n	800616e <UART_SetConfig+0x5a6>
 80060ec:	2340      	movs	r3, #64	; 0x40
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f2:	e03c      	b.n	800616e <UART_SetConfig+0x5a6>
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fa:	e038      	b.n	800616e <UART_SetConfig+0x5a6>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a5b      	ldr	r2, [pc, #364]	; (8006270 <UART_SetConfig+0x6a8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d130      	bne.n	8006168 <UART_SetConfig+0x5a0>
 8006106:	4b57      	ldr	r3, [pc, #348]	; (8006264 <UART_SetConfig+0x69c>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2b05      	cmp	r3, #5
 8006110:	d826      	bhi.n	8006160 <UART_SetConfig+0x598>
 8006112:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x550>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	08006131 	.word	0x08006131
 800611c:	08006139 	.word	0x08006139
 8006120:	08006141 	.word	0x08006141
 8006124:	08006149 	.word	0x08006149
 8006128:	08006151 	.word	0x08006151
 800612c:	08006159 	.word	0x08006159
 8006130:	2302      	movs	r3, #2
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006136:	e01a      	b.n	800616e <UART_SetConfig+0x5a6>
 8006138:	2304      	movs	r3, #4
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613e:	e016      	b.n	800616e <UART_SetConfig+0x5a6>
 8006140:	2308      	movs	r3, #8
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006146:	e012      	b.n	800616e <UART_SetConfig+0x5a6>
 8006148:	2310      	movs	r3, #16
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e00e      	b.n	800616e <UART_SetConfig+0x5a6>
 8006150:	2320      	movs	r3, #32
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e00a      	b.n	800616e <UART_SetConfig+0x5a6>
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615e:	e006      	b.n	800616e <UART_SetConfig+0x5a6>
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006166:	e002      	b.n	800616e <UART_SetConfig+0x5a6>
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a3f      	ldr	r2, [pc, #252]	; (8006270 <UART_SetConfig+0x6a8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	f040 80f8 	bne.w	800636a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800617a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800617e:	2b20      	cmp	r3, #32
 8006180:	dc46      	bgt.n	8006210 <UART_SetConfig+0x648>
 8006182:	2b02      	cmp	r3, #2
 8006184:	f2c0 8082 	blt.w	800628c <UART_SetConfig+0x6c4>
 8006188:	3b02      	subs	r3, #2
 800618a:	2b1e      	cmp	r3, #30
 800618c:	d87e      	bhi.n	800628c <UART_SetConfig+0x6c4>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <UART_SetConfig+0x5cc>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	08006217 	.word	0x08006217
 8006198:	0800628d 	.word	0x0800628d
 800619c:	0800621f 	.word	0x0800621f
 80061a0:	0800628d 	.word	0x0800628d
 80061a4:	0800628d 	.word	0x0800628d
 80061a8:	0800628d 	.word	0x0800628d
 80061ac:	0800622f 	.word	0x0800622f
 80061b0:	0800628d 	.word	0x0800628d
 80061b4:	0800628d 	.word	0x0800628d
 80061b8:	0800628d 	.word	0x0800628d
 80061bc:	0800628d 	.word	0x0800628d
 80061c0:	0800628d 	.word	0x0800628d
 80061c4:	0800628d 	.word	0x0800628d
 80061c8:	0800628d 	.word	0x0800628d
 80061cc:	0800623f 	.word	0x0800623f
 80061d0:	0800628d 	.word	0x0800628d
 80061d4:	0800628d 	.word	0x0800628d
 80061d8:	0800628d 	.word	0x0800628d
 80061dc:	0800628d 	.word	0x0800628d
 80061e0:	0800628d 	.word	0x0800628d
 80061e4:	0800628d 	.word	0x0800628d
 80061e8:	0800628d 	.word	0x0800628d
 80061ec:	0800628d 	.word	0x0800628d
 80061f0:	0800628d 	.word	0x0800628d
 80061f4:	0800628d 	.word	0x0800628d
 80061f8:	0800628d 	.word	0x0800628d
 80061fc:	0800628d 	.word	0x0800628d
 8006200:	0800628d 	.word	0x0800628d
 8006204:	0800628d 	.word	0x0800628d
 8006208:	0800628d 	.word	0x0800628d
 800620c:	0800627f 	.word	0x0800627f
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d037      	beq.n	8006284 <UART_SetConfig+0x6bc>
 8006214:	e03a      	b.n	800628c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006216:	f7fe fc4d 	bl	8004ab4 <HAL_RCCEx_GetD3PCLK1Freq>
 800621a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800621c:	e03c      	b.n	8006298 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800621e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe fc5c 	bl	8004ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800622c:	e034      	b.n	8006298 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800622e:	f107 0318 	add.w	r3, r7, #24
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe fda8 	bl	8004d88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800623c:	e02c      	b.n	8006298 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800623e:	4b09      	ldr	r3, [pc, #36]	; (8006264 <UART_SetConfig+0x69c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d016      	beq.n	8006278 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <UART_SetConfig+0x69c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	4a07      	ldr	r2, [pc, #28]	; (8006274 <UART_SetConfig+0x6ac>)
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800625c:	e01c      	b.n	8006298 <UART_SetConfig+0x6d0>
 800625e:	bf00      	nop
 8006260:	40011400 	.word	0x40011400
 8006264:	58024400 	.word	0x58024400
 8006268:	40007800 	.word	0x40007800
 800626c:	40007c00 	.word	0x40007c00
 8006270:	58000c00 	.word	0x58000c00
 8006274:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006278:	4b9d      	ldr	r3, [pc, #628]	; (80064f0 <UART_SetConfig+0x928>)
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800627c:	e00c      	b.n	8006298 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800627e:	4b9d      	ldr	r3, [pc, #628]	; (80064f4 <UART_SetConfig+0x92c>)
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006282:	e009      	b.n	8006298 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800628a:	e005      	b.n	8006298 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006296:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 81de 	beq.w	800665c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	4a94      	ldr	r2, [pc, #592]	; (80064f8 <UART_SetConfig+0x930>)
 80062a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062aa:	461a      	mov	r2, r3
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	4413      	add	r3, r2
 80062be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d305      	bcc.n	80062d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d903      	bls.n	80062d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062d6:	e1c1      	b.n	800665c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062da:	2200      	movs	r2, #0
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	60fa      	str	r2, [r7, #12]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	4a84      	ldr	r2, [pc, #528]	; (80064f8 <UART_SetConfig+0x930>)
 80062e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2200      	movs	r2, #0
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062fa:	f7f9 fff1 	bl	80002e0 <__aeabi_uldivmod>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4610      	mov	r0, r2
 8006304:	4619      	mov	r1, r3
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	020b      	lsls	r3, r1, #8
 8006310:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006314:	0202      	lsls	r2, r0, #8
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	6849      	ldr	r1, [r1, #4]
 800631a:	0849      	lsrs	r1, r1, #1
 800631c:	2000      	movs	r0, #0
 800631e:	460c      	mov	r4, r1
 8006320:	4605      	mov	r5, r0
 8006322:	eb12 0804 	adds.w	r8, r2, r4
 8006326:	eb43 0905 	adc.w	r9, r3, r5
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	469a      	mov	sl, r3
 8006332:	4693      	mov	fp, r2
 8006334:	4652      	mov	r2, sl
 8006336:	465b      	mov	r3, fp
 8006338:	4640      	mov	r0, r8
 800633a:	4649      	mov	r1, r9
 800633c:	f7f9 ffd0 	bl	80002e0 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4613      	mov	r3, r2
 8006346:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634e:	d308      	bcc.n	8006362 <UART_SetConfig+0x79a>
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006356:	d204      	bcs.n	8006362 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800635e:	60da      	str	r2, [r3, #12]
 8006360:	e17c      	b.n	800665c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006368:	e178      	b.n	800665c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006372:	f040 80c5 	bne.w	8006500 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006376:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800637a:	2b20      	cmp	r3, #32
 800637c:	dc48      	bgt.n	8006410 <UART_SetConfig+0x848>
 800637e:	2b00      	cmp	r3, #0
 8006380:	db7b      	blt.n	800647a <UART_SetConfig+0x8b2>
 8006382:	2b20      	cmp	r3, #32
 8006384:	d879      	bhi.n	800647a <UART_SetConfig+0x8b2>
 8006386:	a201      	add	r2, pc, #4	; (adr r2, 800638c <UART_SetConfig+0x7c4>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	08006417 	.word	0x08006417
 8006390:	0800641f 	.word	0x0800641f
 8006394:	0800647b 	.word	0x0800647b
 8006398:	0800647b 	.word	0x0800647b
 800639c:	08006427 	.word	0x08006427
 80063a0:	0800647b 	.word	0x0800647b
 80063a4:	0800647b 	.word	0x0800647b
 80063a8:	0800647b 	.word	0x0800647b
 80063ac:	08006437 	.word	0x08006437
 80063b0:	0800647b 	.word	0x0800647b
 80063b4:	0800647b 	.word	0x0800647b
 80063b8:	0800647b 	.word	0x0800647b
 80063bc:	0800647b 	.word	0x0800647b
 80063c0:	0800647b 	.word	0x0800647b
 80063c4:	0800647b 	.word	0x0800647b
 80063c8:	0800647b 	.word	0x0800647b
 80063cc:	08006447 	.word	0x08006447
 80063d0:	0800647b 	.word	0x0800647b
 80063d4:	0800647b 	.word	0x0800647b
 80063d8:	0800647b 	.word	0x0800647b
 80063dc:	0800647b 	.word	0x0800647b
 80063e0:	0800647b 	.word	0x0800647b
 80063e4:	0800647b 	.word	0x0800647b
 80063e8:	0800647b 	.word	0x0800647b
 80063ec:	0800647b 	.word	0x0800647b
 80063f0:	0800647b 	.word	0x0800647b
 80063f4:	0800647b 	.word	0x0800647b
 80063f8:	0800647b 	.word	0x0800647b
 80063fc:	0800647b 	.word	0x0800647b
 8006400:	0800647b 	.word	0x0800647b
 8006404:	0800647b 	.word	0x0800647b
 8006408:	0800647b 	.word	0x0800647b
 800640c:	0800646d 	.word	0x0800646d
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d02e      	beq.n	8006472 <UART_SetConfig+0x8aa>
 8006414:	e031      	b.n	800647a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006416:	f7fd f8d5 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 800641a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800641c:	e033      	b.n	8006486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800641e:	f7fd f8e7 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8006422:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006424:	e02f      	b.n	8006486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fb58 	bl	8004ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006434:	e027      	b.n	8006486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006436:	f107 0318 	add.w	r3, r7, #24
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe fca4 	bl	8004d88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006444:	e01f      	b.n	8006486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006446:	4b2d      	ldr	r3, [pc, #180]	; (80064fc <UART_SetConfig+0x934>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006452:	4b2a      	ldr	r3, [pc, #168]	; (80064fc <UART_SetConfig+0x934>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	08db      	lsrs	r3, r3, #3
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	4a24      	ldr	r2, [pc, #144]	; (80064f0 <UART_SetConfig+0x928>)
 800645e:	fa22 f303 	lsr.w	r3, r2, r3
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006464:	e00f      	b.n	8006486 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006466:	4b22      	ldr	r3, [pc, #136]	; (80064f0 <UART_SetConfig+0x928>)
 8006468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800646a:	e00c      	b.n	8006486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800646c:	4b21      	ldr	r3, [pc, #132]	; (80064f4 <UART_SetConfig+0x92c>)
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006470:	e009      	b.n	8006486 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006478:	e005      	b.n	8006486 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80e7 	beq.w	800665c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	4a19      	ldr	r2, [pc, #100]	; (80064f8 <UART_SetConfig+0x930>)
 8006494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006498:	461a      	mov	r2, r3
 800649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649c:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a0:	005a      	lsls	r2, r3, #1
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	441a      	add	r2, r3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	d916      	bls.n	80064e8 <UART_SetConfig+0x920>
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c0:	d212      	bcs.n	80064e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f023 030f 	bic.w	r3, r3, #15
 80064ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064da:	4313      	orrs	r3, r2
 80064dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064e4:	60da      	str	r2, [r3, #12]
 80064e6:	e0b9      	b.n	800665c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064ee:	e0b5      	b.n	800665c <UART_SetConfig+0xa94>
 80064f0:	03d09000 	.word	0x03d09000
 80064f4:	003d0900 	.word	0x003d0900
 80064f8:	0800a130 	.word	0x0800a130
 80064fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006500:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006504:	2b20      	cmp	r3, #32
 8006506:	dc49      	bgt.n	800659c <UART_SetConfig+0x9d4>
 8006508:	2b00      	cmp	r3, #0
 800650a:	db7c      	blt.n	8006606 <UART_SetConfig+0xa3e>
 800650c:	2b20      	cmp	r3, #32
 800650e:	d87a      	bhi.n	8006606 <UART_SetConfig+0xa3e>
 8006510:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x950>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	080065a3 	.word	0x080065a3
 800651c:	080065ab 	.word	0x080065ab
 8006520:	08006607 	.word	0x08006607
 8006524:	08006607 	.word	0x08006607
 8006528:	080065b3 	.word	0x080065b3
 800652c:	08006607 	.word	0x08006607
 8006530:	08006607 	.word	0x08006607
 8006534:	08006607 	.word	0x08006607
 8006538:	080065c3 	.word	0x080065c3
 800653c:	08006607 	.word	0x08006607
 8006540:	08006607 	.word	0x08006607
 8006544:	08006607 	.word	0x08006607
 8006548:	08006607 	.word	0x08006607
 800654c:	08006607 	.word	0x08006607
 8006550:	08006607 	.word	0x08006607
 8006554:	08006607 	.word	0x08006607
 8006558:	080065d3 	.word	0x080065d3
 800655c:	08006607 	.word	0x08006607
 8006560:	08006607 	.word	0x08006607
 8006564:	08006607 	.word	0x08006607
 8006568:	08006607 	.word	0x08006607
 800656c:	08006607 	.word	0x08006607
 8006570:	08006607 	.word	0x08006607
 8006574:	08006607 	.word	0x08006607
 8006578:	08006607 	.word	0x08006607
 800657c:	08006607 	.word	0x08006607
 8006580:	08006607 	.word	0x08006607
 8006584:	08006607 	.word	0x08006607
 8006588:	08006607 	.word	0x08006607
 800658c:	08006607 	.word	0x08006607
 8006590:	08006607 	.word	0x08006607
 8006594:	08006607 	.word	0x08006607
 8006598:	080065f9 	.word	0x080065f9
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d02e      	beq.n	80065fe <UART_SetConfig+0xa36>
 80065a0:	e031      	b.n	8006606 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a2:	f7fd f80f 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 80065a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065a8:	e033      	b.n	8006612 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065aa:	f7fd f821 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 80065ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065b0:	e02f      	b.n	8006612 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe fa92 	bl	8004ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c0:	e027      	b.n	8006612 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065c2:	f107 0318 	add.w	r3, r7, #24
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fbde 	bl	8004d88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d0:	e01f      	b.n	8006612 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d2:	4b2d      	ldr	r3, [pc, #180]	; (8006688 <UART_SetConfig+0xac0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065de:	4b2a      	ldr	r3, [pc, #168]	; (8006688 <UART_SetConfig+0xac0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	08db      	lsrs	r3, r3, #3
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	4a28      	ldr	r2, [pc, #160]	; (800668c <UART_SetConfig+0xac4>)
 80065ea:	fa22 f303 	lsr.w	r3, r2, r3
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065f0:	e00f      	b.n	8006612 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80065f2:	4b26      	ldr	r3, [pc, #152]	; (800668c <UART_SetConfig+0xac4>)
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f6:	e00c      	b.n	8006612 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <UART_SetConfig+0xac8>)
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065fc:	e009      	b.n	8006612 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006604:	e005      	b.n	8006612 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006610:	bf00      	nop
    }

    if (pclk != 0U)
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d021      	beq.n	800665c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	4a1d      	ldr	r2, [pc, #116]	; (8006694 <UART_SetConfig+0xacc>)
 800661e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006622:	461a      	mov	r2, r3
 8006624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006626:	fbb3 f2f2 	udiv	r2, r3, r2
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	441a      	add	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	fbb2 f3f3 	udiv	r3, r2, r3
 800663a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	2b0f      	cmp	r3, #15
 8006640:	d909      	bls.n	8006656 <UART_SetConfig+0xa8e>
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006648:	d205      	bcs.n	8006656 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	b29a      	uxth	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60da      	str	r2, [r3, #12]
 8006654:	e002      	b.n	800665c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2201      	movs	r2, #1
 8006660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2201      	movs	r2, #1
 8006668:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2200      	movs	r2, #0
 8006670:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006678:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800667c:	4618      	mov	r0, r3
 800667e:	3748      	adds	r7, #72	; 0x48
 8006680:	46bd      	mov	sp, r7
 8006682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006686:	bf00      	nop
 8006688:	58024400 	.word	0x58024400
 800668c:	03d09000 	.word	0x03d09000
 8006690:	003d0900 	.word	0x003d0900
 8006694:	0800a130 	.word	0x0800a130

08006698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00a      	beq.n	8006706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01a      	beq.n	80067ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006796:	d10a      	bne.n	80067ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]
  }
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b098      	sub	sp, #96	; 0x60
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067ec:	f7fa fe80 	bl	80014f0 <HAL_GetTick>
 80067f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d12f      	bne.n	8006860 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f88e 	bl	8006930 <UART_WaitOnFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d022      	beq.n	8006860 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800682e:	653b      	str	r3, [r7, #80]	; 0x50
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006838:	647b      	str	r3, [r7, #68]	; 0x44
 800683a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800683e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e063      	b.n	8006928 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b04      	cmp	r3, #4
 800686c:	d149      	bne.n	8006902 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800686e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006876:	2200      	movs	r2, #0
 8006878:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f857 	bl	8006930 <UART_WaitOnFlagUntilTimeout>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d03c      	beq.n	8006902 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	623b      	str	r3, [r7, #32]
   return(result);
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800689c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	633b      	str	r3, [r7, #48]	; 0x30
 80068a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e6      	bne.n	8006888 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f023 0301 	bic.w	r3, r3, #1
 80068d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068da:	61fa      	str	r2, [r7, #28]
 80068dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	69b9      	ldr	r1, [r7, #24]
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	617b      	str	r3, [r7, #20]
   return(result);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e5      	bne.n	80068ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e012      	b.n	8006928 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3758      	adds	r7, #88	; 0x58
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006940:	e049      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d045      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694a:	f7fa fdd1 	bl	80014f0 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	429a      	cmp	r2, r3
 8006958:	d302      	bcc.n	8006960 <UART_WaitOnFlagUntilTimeout+0x30>
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e048      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d031      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f003 0308 	and.w	r3, r3, #8
 800697c:	2b08      	cmp	r3, #8
 800697e:	d110      	bne.n	80069a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2208      	movs	r2, #8
 8006986:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f839 	bl	8006a00 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2208      	movs	r2, #8
 8006992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e029      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b0:	d111      	bne.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f81f 	bl	8006a00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e00f      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4013      	ands	r3, r2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	bf0c      	ite	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	2300      	movne	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d0a6      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b095      	sub	sp, #84	; 0x54
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
 8006a28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e6      	bne.n	8006a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	4b1e      	ldr	r3, [pc, #120]	; (8006ac8 <UART_EndRxTransfer+0xc8>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d118      	bne.n	8006aa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f023 0310 	bic.w	r3, r3, #16
 8006a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6979      	ldr	r1, [r7, #20]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e6      	bne.n	8006a76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006abc:	bf00      	nop
 8006abe:	3754      	adds	r7, #84	; 0x54
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	effffffe 	.word	0xeffffffe

08006acc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e027      	b.n	8006b32 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2224      	movs	r2, #36	; 0x24
 8006aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e02d      	b.n	8006bb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2224      	movs	r2, #36	; 0x24
 8006b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0201 	bic.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f850 	bl	8006c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e02d      	b.n	8006c2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2224      	movs	r2, #36	; 0x24
 8006bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0201 	bic.w	r2, r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f812 	bl	8006c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d108      	bne.n	8006c5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c58:	e031      	b.n	8006cbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c5a:	2310      	movs	r3, #16
 8006c5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c5e:	2310      	movs	r3, #16
 8006c60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	0e5b      	lsrs	r3, r3, #25
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	0f5b      	lsrs	r3, r3, #29
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	7b3a      	ldrb	r2, [r7, #12]
 8006c86:	4911      	ldr	r1, [pc, #68]	; (8006ccc <UARTEx_SetNbDataToProcess+0x94>)
 8006c88:	5c8a      	ldrb	r2, [r1, r2]
 8006c8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c8e:	7b3a      	ldrb	r2, [r7, #12]
 8006c90:	490f      	ldr	r1, [pc, #60]	; (8006cd0 <UARTEx_SetNbDataToProcess+0x98>)
 8006c92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	7b7a      	ldrb	r2, [r7, #13]
 8006ca4:	4909      	ldr	r1, [pc, #36]	; (8006ccc <UARTEx_SetNbDataToProcess+0x94>)
 8006ca6:	5c8a      	ldrb	r2, [r1, r2]
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cac:	7b7a      	ldrb	r2, [r7, #13]
 8006cae:	4908      	ldr	r1, [pc, #32]	; (8006cd0 <UARTEx_SetNbDataToProcess+0x98>)
 8006cb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	0800a148 	.word	0x0800a148
 8006cd0:	0800a150 	.word	0x0800a150

08006cd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	f107 001c 	add.w	r0, r7, #28
 8006ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d120      	bne.n	8006d2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	; (8006da8 <USB_CoreInit+0xd4>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d105      	bne.n	8006d22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 faac 	bl	8007280 <USB_CoreReset>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e01a      	b.n	8006d64 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 faa0 	bl	8007280 <USB_CoreReset>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
 8006d56:	e005      	b.n	8006d64 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d116      	bne.n	8006d98 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <USB_CoreInit+0xd8>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f043 0206 	orr.w	r2, r3, #6
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f043 0220 	orr.w	r2, r3, #32
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da4:	b004      	add	sp, #16
 8006da6:	4770      	bx	lr
 8006da8:	ffbdffbf 	.word	0xffbdffbf
 8006dac:	03ee0000 	.word	0x03ee0000

08006db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f023 0201 	bic.w	r2, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d115      	bne.n	8006e20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e00:	2001      	movs	r0, #1
 8006e02:	f7fa fb81 	bl	8001508 <HAL_Delay>
      ms++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fa29 	bl	8007264 <USB_GetMode>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d01e      	beq.n	8006e56 <USB_SetCurrentMode+0x84>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b31      	cmp	r3, #49	; 0x31
 8006e1c:	d9f0      	bls.n	8006e00 <USB_SetCurrentMode+0x2e>
 8006e1e:	e01a      	b.n	8006e56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d115      	bne.n	8006e52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e32:	2001      	movs	r0, #1
 8006e34:	f7fa fb68 	bl	8001508 <HAL_Delay>
      ms++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fa10 	bl	8007264 <USB_GetMode>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <USB_SetCurrentMode+0x84>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b31      	cmp	r3, #49	; 0x31
 8006e4e:	d9f0      	bls.n	8006e32 <USB_SetCurrentMode+0x60>
 8006e50:	e001      	b.n	8006e56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e005      	b.n	8006e62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b32      	cmp	r3, #50	; 0x32
 8006e5a:	d101      	bne.n	8006e60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	e009      	b.n	8006ea0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	3340      	adds	r3, #64	; 0x40
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	2200      	movs	r2, #0
 8006e98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	613b      	str	r3, [r7, #16]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b0e      	cmp	r3, #14
 8006ea4:	d9f2      	bls.n	8006e8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d11c      	bne.n	8006ee6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eba:	f043 0302 	orr.w	r3, r3, #2
 8006ebe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	e005      	b.n	8006ef2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ef8:	461a      	mov	r2, r3
 8006efa:	2300      	movs	r3, #0
 8006efc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f04:	4619      	mov	r1, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	680b      	ldr	r3, [r1, #0]
 8006f10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10c      	bne.n	8006f32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f965 	bl	80071f0 <USB_SetDevSpeed>
 8006f26:	e008      	b.n	8006f3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f28:	2101      	movs	r1, #1
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f960 	bl	80071f0 <USB_SetDevSpeed>
 8006f30:	e003      	b.n	8006f3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f32:	2103      	movs	r1, #3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f95b 	bl	80071f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f3a:	2110      	movs	r1, #16
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f8f3 	bl	8007128 <USB_FlushTxFifo>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f91f 	bl	8007190 <USB_FlushRxFifo>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f62:	461a      	mov	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6e:	461a      	mov	r2, r3
 8006f70:	2300      	movs	r3, #0
 8006f72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	e043      	b.n	800700e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f9c:	d118      	bne.n	8006fd0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e013      	b.n	8006fe2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e008      	b.n	8006fe2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	461a      	mov	r2, r3
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	461a      	mov	r2, r3
 8007002:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007006:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	3301      	adds	r3, #1
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	d3b7      	bcc.n	8006f86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007016:	2300      	movs	r3, #0
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	e043      	b.n	80070a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800702e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007032:	d118      	bne.n	8007066 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	461a      	mov	r2, r3
 8007048:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	e013      	b.n	8007078 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	461a      	mov	r2, r3
 800705e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	e008      	b.n	8007078 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	461a      	mov	r2, r3
 8007074:	2300      	movs	r3, #0
 8007076:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	461a      	mov	r2, r3
 8007086:	2300      	movs	r3, #0
 8007088:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007096:	461a      	mov	r2, r3
 8007098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800709c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3301      	adds	r3, #1
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d3b7      	bcc.n	800701c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f043 0210 	orr.w	r2, r3, #16
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <USB_DevInit+0x2b4>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f043 0208 	orr.w	r2, r3, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007100:	2b01      	cmp	r3, #1
 8007102:	d105      	bne.n	8007110 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <USB_DevInit+0x2b8>)
 800710a:	4313      	orrs	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007110:	7dfb      	ldrb	r3, [r7, #23]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800711c:	b004      	add	sp, #16
 800711e:	4770      	bx	lr
 8007120:	803c3800 	.word	0x803c3800
 8007124:	40000004 	.word	0x40000004

08007128 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3301      	adds	r3, #1
 800713a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4a13      	ldr	r2, [pc, #76]	; (800718c <USB_FlushTxFifo+0x64>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e01b      	b.n	8007180 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	daf2      	bge.n	8007136 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	019b      	lsls	r3, r3, #6
 8007158:	f043 0220 	orr.w	r2, r3, #32
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4a08      	ldr	r2, [pc, #32]	; (800718c <USB_FlushTxFifo+0x64>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e006      	b.n	8007180 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b20      	cmp	r3, #32
 800717c:	d0f0      	beq.n	8007160 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	00030d40 	.word	0x00030d40

08007190 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a11      	ldr	r2, [pc, #68]	; (80071ec <USB_FlushRxFifo+0x5c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d901      	bls.n	80071ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e018      	b.n	80071e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	daf2      	bge.n	800719c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2210      	movs	r2, #16
 80071be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4a08      	ldr	r2, [pc, #32]	; (80071ec <USB_FlushRxFifo+0x5c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e006      	b.n	80071e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b10      	cmp	r3, #16
 80071dc:	d0f0      	beq.n	80071c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	00030d40 	.word	0x00030d40

080071f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007210:	4313      	orrs	r3, r2
 8007212:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800723c:	f023 0303 	bic.w	r3, r3, #3
 8007240:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007250:	f043 0302 	orr.w	r3, r3, #2
 8007254:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	f003 0301 	and.w	r3, r3, #1
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <USB_CoreReset+0x64>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d901      	bls.n	800729e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e01b      	b.n	80072d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	daf2      	bge.n	800728c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f043 0201 	orr.w	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <USB_CoreReset+0x64>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e006      	b.n	80072d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d0f0      	beq.n	80072b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	00030d40 	.word	0x00030d40

080072e8 <__NVIC_SetPriority>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80072f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	db0a      	blt.n	8007312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	490c      	ldr	r1, [pc, #48]	; (8007334 <__NVIC_SetPriority+0x4c>)
 8007302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007306:	0112      	lsls	r2, r2, #4
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	440b      	add	r3, r1
 800730c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007310:	e00a      	b.n	8007328 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	4908      	ldr	r1, [pc, #32]	; (8007338 <__NVIC_SetPriority+0x50>)
 8007318:	88fb      	ldrh	r3, [r7, #6]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	3b04      	subs	r3, #4
 8007320:	0112      	lsls	r2, r2, #4
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	440b      	add	r3, r1
 8007326:	761a      	strb	r2, [r3, #24]
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	e000e100 	.word	0xe000e100
 8007338:	e000ed00 	.word	0xe000ed00

0800733c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <SysTick_Handler+0x1c>)
 8007342:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007344:	f001 fd40 	bl	8008dc8 <xTaskGetSchedulerState>
 8007348:	4603      	mov	r3, r0
 800734a:	2b01      	cmp	r3, #1
 800734c:	d001      	beq.n	8007352 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800734e:	f002 fbe3 	bl	8009b18 <xPortSysTickHandler>
  }
}
 8007352:	bf00      	nop
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	e000e010 	.word	0xe000e010

0800735c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007360:	2100      	movs	r1, #0
 8007362:	f06f 0004 	mvn.w	r0, #4
 8007366:	f7ff ffbf 	bl	80072e8 <__NVIC_SetPriority>
#endif
}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007376:	f3ef 8305 	mrs	r3, IPSR
 800737a:	603b      	str	r3, [r7, #0]
  return(result);
 800737c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007382:	f06f 0305 	mvn.w	r3, #5
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	e00c      	b.n	80073a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <osKernelInitialize+0x44>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d105      	bne.n	800739e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <osKernelInitialize+0x44>)
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007398:	2300      	movs	r3, #0
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	e002      	b.n	80073a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800739e:	f04f 33ff 	mov.w	r3, #4294967295
 80073a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073a4:	687b      	ldr	r3, [r7, #4]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	2400086c 	.word	0x2400086c

080073b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073be:	f3ef 8305 	mrs	r3, IPSR
 80073c2:	603b      	str	r3, [r7, #0]
  return(result);
 80073c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80073ca:	f06f 0305 	mvn.w	r3, #5
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	e010      	b.n	80073f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <osKernelStart+0x48>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d109      	bne.n	80073ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073da:	f7ff ffbf 	bl	800735c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073de:	4b08      	ldr	r3, [pc, #32]	; (8007400 <osKernelStart+0x48>)
 80073e0:	2202      	movs	r2, #2
 80073e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073e4:	f001 f8a8 	bl	8008538 <vTaskStartScheduler>
      stat = osOK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	607b      	str	r3, [r7, #4]
 80073ec:	e002      	b.n	80073f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073ee:	f04f 33ff 	mov.w	r3, #4294967295
 80073f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073f4:	687b      	ldr	r3, [r7, #4]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	2400086c 	.word	0x2400086c

08007404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b08e      	sub	sp, #56	; 0x38
 8007408:	af04      	add	r7, sp, #16
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007414:	f3ef 8305 	mrs	r3, IPSR
 8007418:	617b      	str	r3, [r7, #20]
  return(result);
 800741a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800741c:	2b00      	cmp	r3, #0
 800741e:	d17e      	bne.n	800751e <osThreadNew+0x11a>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d07b      	beq.n	800751e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007426:	2380      	movs	r3, #128	; 0x80
 8007428:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800742a:	2318      	movs	r3, #24
 800742c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007432:	f04f 33ff 	mov.w	r3, #4294967295
 8007436:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d045      	beq.n	80074ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <osThreadNew+0x48>
        name = attr->name;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d008      	beq.n	8007472 <osThreadNew+0x6e>
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	2b38      	cmp	r3, #56	; 0x38
 8007464:	d805      	bhi.n	8007472 <osThreadNew+0x6e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <osThreadNew+0x72>
        return (NULL);
 8007472:	2300      	movs	r3, #0
 8007474:	e054      	b.n	8007520 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	089b      	lsrs	r3, r3, #2
 8007484:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00e      	beq.n	80074ac <osThreadNew+0xa8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b5b      	cmp	r3, #91	; 0x5b
 8007494:	d90a      	bls.n	80074ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800749a:	2b00      	cmp	r3, #0
 800749c:	d006      	beq.n	80074ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <osThreadNew+0xa8>
        mem = 1;
 80074a6:	2301      	movs	r3, #1
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	e010      	b.n	80074ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10c      	bne.n	80074ce <osThreadNew+0xca>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d108      	bne.n	80074ce <osThreadNew+0xca>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d104      	bne.n	80074ce <osThreadNew+0xca>
          mem = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	e001      	b.n	80074ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d110      	bne.n	80074f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074dc:	9202      	str	r2, [sp, #8]
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6a3a      	ldr	r2, [r7, #32]
 80074e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 fe82 	bl	80081f4 <xTaskCreateStatic>
 80074f0:	4603      	mov	r3, r0
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	e013      	b.n	800751e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d110      	bne.n	800751e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	f107 0310 	add.w	r3, r7, #16
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 fecd 	bl	80082ae <xTaskCreate>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	d001      	beq.n	800751e <osThreadNew+0x11a>
            hTask = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800751e:	693b      	ldr	r3, [r7, #16]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3728      	adds	r7, #40	; 0x28
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f002 f911 	bl	8009758 <pvTimerGetTimerID>
 8007536:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <TimerCallback+0x22>
    callb->func (callb->arg);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	6852      	ldr	r2, [r2, #4]
 8007546:	4610      	mov	r0, r2
 8007548:	4798      	blx	r3
  }
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b08c      	sub	sp, #48	; 0x30
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	607a      	str	r2, [r7, #4]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	460b      	mov	r3, r1
 8007562:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007568:	f3ef 8305 	mrs	r3, IPSR
 800756c:	613b      	str	r3, [r7, #16]
  return(result);
 800756e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007570:	2b00      	cmp	r3, #0
 8007572:	d163      	bne.n	800763c <osTimerNew+0xe8>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d060      	beq.n	800763c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800757a:	2008      	movs	r0, #8
 800757c:	f002 fb5c 	bl	8009c38 <pvPortMalloc>
 8007580:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d059      	beq.n	800763c <osTimerNew+0xe8>
      callb->func = func;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d102      	bne.n	80075a0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800759a:	2300      	movs	r3, #0
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	e001      	b.n	80075a4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80075a4:	f04f 33ff 	mov.w	r3, #4294967295
 80075a8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01c      	beq.n	80075ee <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <osTimerNew+0x6e>
          name = attr->name;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d006      	beq.n	80075d8 <osTimerNew+0x84>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	2b2b      	cmp	r3, #43	; 0x2b
 80075d0:	d902      	bls.n	80075d8 <osTimerNew+0x84>
          mem = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	e00c      	b.n	80075f2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d108      	bne.n	80075f2 <osTimerNew+0x9e>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d104      	bne.n	80075f2 <osTimerNew+0x9e>
            mem = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	61bb      	str	r3, [r7, #24]
 80075ec:	e001      	b.n	80075f2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d10c      	bne.n	8007612 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <osTimerNew+0xf4>)
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	2101      	movs	r1, #1
 8007608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800760a:	f001 fd26 	bl	800905a <xTimerCreateStatic>
 800760e:	6238      	str	r0, [r7, #32]
 8007610:	e00b      	b.n	800762a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d108      	bne.n	800762a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007618:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <osTimerNew+0xf4>)
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	2101      	movs	r1, #1
 8007622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007624:	f001 fcf8 	bl	8009018 <xTimerCreate>
 8007628:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d105      	bne.n	800763c <osTimerNew+0xe8>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <osTimerNew+0xe8>
        vPortFree (callb);
 8007636:	6978      	ldr	r0, [r7, #20]
 8007638:	f002 fbca 	bl	8009dd0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800763c:	6a3b      	ldr	r3, [r7, #32]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3728      	adds	r7, #40	; 0x28
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	08007529 	.word	0x08007529

0800764c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a07      	ldr	r2, [pc, #28]	; (8007678 <vApplicationGetIdleTaskMemory+0x2c>)
 800765c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	4a06      	ldr	r2, [pc, #24]	; (800767c <vApplicationGetIdleTaskMemory+0x30>)
 8007662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2280      	movs	r2, #128	; 0x80
 8007668:	601a      	str	r2, [r3, #0]
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	24000870 	.word	0x24000870
 800767c:	240008cc 	.word	0x240008cc

08007680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a07      	ldr	r2, [pc, #28]	; (80076ac <vApplicationGetTimerTaskMemory+0x2c>)
 8007690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4a06      	ldr	r2, [pc, #24]	; (80076b0 <vApplicationGetTimerTaskMemory+0x30>)
 8007696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800769e:	601a      	str	r2, [r3, #0]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	24000acc 	.word	0x24000acc
 80076b0:	24000b28 	.word	0x24000b28

080076b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0208 	add.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f04f 32ff 	mov.w	r2, #4294967295
 80076cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f103 0208 	add.w	r2, r3, #8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f103 0208 	add.w	r2, r3, #8
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	601a      	str	r2, [r3, #0]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d103      	bne.n	8007776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e00c      	b.n	8007790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3308      	adds	r3, #8
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	e002      	b.n	8007784 <vListInsert+0x2e>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	429a      	cmp	r2, r3
 800778e:	d2f6      	bcs.n	800777e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	601a      	str	r2, [r3, #0]
}
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6892      	ldr	r2, [r2, #8]
 80077de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6852      	ldr	r2, [r2, #4]
 80077e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d103      	bne.n	80077fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	1e5a      	subs	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007846:	f002 f8d5 	bl	80099f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007856:	fb01 f303 	mul.w	r3, r1, r3
 800785a:	441a      	add	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007876:	3b01      	subs	r3, #1
 8007878:	68f9      	ldr	r1, [r7, #12]
 800787a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	441a      	add	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	22ff      	movs	r2, #255	; 0xff
 800788a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	22ff      	movs	r2, #255	; 0xff
 8007892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d114      	bne.n	80078c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01a      	beq.n	80078da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3310      	adds	r3, #16
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 f8cf 	bl	8008a4c <xTaskRemoveFromEventList>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d012      	beq.n	80078da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078b4:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <xQueueGenericReset+0xcc>)
 80078b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	e009      	b.n	80078da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3310      	adds	r3, #16
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fef2 	bl	80076b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3324      	adds	r3, #36	; 0x24
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff feed 	bl	80076b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078da:	f002 f8bb 	bl	8009a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078de:	2301      	movs	r3, #1
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08e      	sub	sp, #56	; 0x38
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <xQueueGenericCreateStatic+0x52>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <xQueueGenericCreateStatic+0x56>
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <xQueueGenericCreateStatic+0x58>
 8007942:	2300      	movs	r3, #0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	623b      	str	r3, [r7, #32]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d102      	bne.n	800796a <xQueueGenericCreateStatic+0x7e>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <xQueueGenericCreateStatic+0x82>
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <xQueueGenericCreateStatic+0x84>
 800796e:	2300      	movs	r3, #0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	61fb      	str	r3, [r7, #28]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800798a:	2350      	movs	r3, #80	; 0x50
 800798c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b50      	cmp	r3, #80	; 0x50
 8007992:	d00a      	beq.n	80079aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	61bb      	str	r3, [r7, #24]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4613      	mov	r3, r2
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f805 	bl	80079dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3730      	adds	r7, #48	; 0x30
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	e002      	b.n	80079fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	69b8      	ldr	r0, [r7, #24]
 8007a0e:	f7ff ff05 	bl	800781c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	78fa      	ldrb	r2, [r7, #3]
 8007a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08e      	sub	sp, #56	; 0x38
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a32:	2300      	movs	r3, #0
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xQueueGenericSend+0x32>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d103      	bne.n	8007a64 <xQueueGenericSend+0x40>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <xQueueGenericSend+0x44>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <xQueueGenericSend+0x46>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <xQueueGenericSend+0x60>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a80:	bf00      	nop
 8007a82:	e7fe      	b.n	8007a82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d103      	bne.n	8007a92 <xQueueGenericSend+0x6e>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <xQueueGenericSend+0x72>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <xQueueGenericSend+0x74>
 8007a96:	2300      	movs	r3, #0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	623b      	str	r3, [r7, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ab2:	f001 f989 	bl	8008dc8 <xTaskGetSchedulerState>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <xQueueGenericSend+0x9e>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <xQueueGenericSend+0xa2>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <xQueueGenericSend+0xa4>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	61fb      	str	r3, [r7, #28]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ae2:	f001 ff87 	bl	80099f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d302      	bcc.n	8007af8 <xQueueGenericSend+0xd4>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d129      	bne.n	8007b4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007afe:	f000 fa0b 	bl	8007f18 <prvCopyDataToQueue>
 8007b02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d010      	beq.n	8007b2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	3324      	adds	r3, #36	; 0x24
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 ff9b 	bl	8008a4c <xTaskRemoveFromEventList>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d013      	beq.n	8007b44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b1c:	4b3f      	ldr	r3, [pc, #252]	; (8007c1c <xQueueGenericSend+0x1f8>)
 8007b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	e00a      	b.n	8007b44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b34:	4b39      	ldr	r3, [pc, #228]	; (8007c1c <xQueueGenericSend+0x1f8>)
 8007b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b44:	f001 ff86 	bl	8009a54 <vPortExitCritical>
				return pdPASS;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e063      	b.n	8007c14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b52:	f001 ff7f 	bl	8009a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e05c      	b.n	8007c14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b60:	f107 0314 	add.w	r3, r7, #20
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 ffd5 	bl	8008b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b6e:	f001 ff71 	bl	8009a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b72:	f000 fd47 	bl	8008604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b76:	f001 ff3d 	bl	80099f4 <vPortEnterCritical>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b80:	b25b      	sxtb	r3, r3
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d103      	bne.n	8007b90 <xQueueGenericSend+0x16c>
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9c:	d103      	bne.n	8007ba6 <xQueueGenericSend+0x182>
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba6:	f001 ff55 	bl	8009a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007baa:	1d3a      	adds	r2, r7, #4
 8007bac:	f107 0314 	add.w	r3, r7, #20
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 ffc4 	bl	8008b40 <xTaskCheckForTimeOut>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d124      	bne.n	8007c08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bc0:	f000 faa2 	bl	8008108 <prvIsQueueFull>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d018      	beq.n	8007bfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	3310      	adds	r3, #16
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 feea 	bl	80089ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bda:	f000 fa2d 	bl	8008038 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bde:	f000 fd1f 	bl	8008620 <xTaskResumeAll>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f47f af7c 	bne.w	8007ae2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007bea:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <xQueueGenericSend+0x1f8>)
 8007bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	e772      	b.n	8007ae2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bfe:	f000 fa1b 	bl	8008038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c02:	f000 fd0d 	bl	8008620 <xTaskResumeAll>
 8007c06:	e76c      	b.n	8007ae2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c0a:	f000 fa15 	bl	8008038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c0e:	f000 fd07 	bl	8008620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3738      	adds	r7, #56	; 0x38
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	e000ed04 	.word	0xe000ed04

08007c20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b090      	sub	sp, #64	; 0x40
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c4a:	bf00      	nop
 8007c4c:	e7fe      	b.n	8007c4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <xQueueGenericSendFromISR+0x3c>
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <xQueueGenericSendFromISR+0x40>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e000      	b.n	8007c62 <xQueueGenericSendFromISR+0x42>
 8007c60:	2300      	movs	r3, #0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c78:	bf00      	nop
 8007c7a:	e7fe      	b.n	8007c7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d103      	bne.n	8007c8a <xQueueGenericSendFromISR+0x6a>
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <xQueueGenericSendFromISR+0x6e>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e000      	b.n	8007c90 <xQueueGenericSendFromISR+0x70>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	623b      	str	r3, [r7, #32]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007caa:	f001 ff85 	bl	8009bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cae:	f3ef 8211 	mrs	r2, BASEPRI
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	61fa      	str	r2, [r7, #28]
 8007cc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d302      	bcc.n	8007cdc <xQueueGenericSendFromISR+0xbc>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d12f      	bne.n	8007d3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cf2:	f000 f911 	bl	8007f18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d112      	bne.n	8007d26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d016      	beq.n	8007d36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	3324      	adds	r3, #36	; 0x24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fe9d 	bl	8008a4c <xTaskRemoveFromEventList>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00b      	beq.n	8007d36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e007      	b.n	8007d36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	b25a      	sxtb	r2, r3
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d36:	2301      	movs	r3, #1
 8007d38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d3a:	e001      	b.n	8007d40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3740      	adds	r7, #64	; 0x40
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08c      	sub	sp, #48	; 0x30
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <xQueueReceive+0x30>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	623b      	str	r3, [r7, #32]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d103      	bne.n	8007d96 <xQueueReceive+0x3e>
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <xQueueReceive+0x42>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <xQueueReceive+0x44>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xQueueReceive+0x5e>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	61fb      	str	r3, [r7, #28]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007db6:	f001 f807 	bl	8008dc8 <xTaskGetSchedulerState>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <xQueueReceive+0x6e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <xQueueReceive+0x72>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <xQueueReceive+0x74>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <xQueueReceive+0x8e>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	61bb      	str	r3, [r7, #24]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007de6:	f001 fe05 	bl	80099f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01f      	beq.n	8007e36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dfa:	f000 f8f7 	bl	8007fec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00f      	beq.n	8007e2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	3310      	adds	r3, #16
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fe1a 	bl	8008a4c <xTaskRemoveFromEventList>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e1e:	4b3d      	ldr	r3, [pc, #244]	; (8007f14 <xQueueReceive+0x1bc>)
 8007e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e2e:	f001 fe11 	bl	8009a54 <vPortExitCritical>
				return pdPASS;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e069      	b.n	8007f0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e3c:	f001 fe0a 	bl	8009a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e062      	b.n	8007f0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e4a:	f107 0310 	add.w	r3, r7, #16
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fe60 	bl	8008b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e58:	f001 fdfc 	bl	8009a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e5c:	f000 fbd2 	bl	8008604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e60:	f001 fdc8 	bl	80099f4 <vPortEnterCritical>
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e6a:	b25b      	sxtb	r3, r3
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d103      	bne.n	8007e7a <xQueueReceive+0x122>
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e80:	b25b      	sxtb	r3, r3
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e86:	d103      	bne.n	8007e90 <xQueueReceive+0x138>
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e90:	f001 fde0 	bl	8009a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e94:	1d3a      	adds	r2, r7, #4
 8007e96:	f107 0310 	add.w	r3, r7, #16
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fe4f 	bl	8008b40 <xTaskCheckForTimeOut>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d123      	bne.n	8007ef0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eaa:	f000 f917 	bl	80080dc <prvIsQueueEmpty>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d017      	beq.n	8007ee4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	3324      	adds	r3, #36	; 0x24
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fd75 	bl	80089ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec4:	f000 f8b8 	bl	8008038 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ec8:	f000 fbaa 	bl	8008620 <xTaskResumeAll>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d189      	bne.n	8007de6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007ed2:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <xQueueReceive+0x1bc>)
 8007ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	e780      	b.n	8007de6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee6:	f000 f8a7 	bl	8008038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eea:	f000 fb99 	bl	8008620 <xTaskResumeAll>
 8007eee:	e77a      	b.n	8007de6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef2:	f000 f8a1 	bl	8008038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ef6:	f000 fb93 	bl	8008620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007efc:	f000 f8ee 	bl	80080dc <prvIsQueueEmpty>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f43f af6f 	beq.w	8007de6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3730      	adds	r7, #48	; 0x30
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10d      	bne.n	8007f52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d14d      	bne.n	8007fda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 ff5e 	bl	8008e04 <xTaskPriorityDisinherit>
 8007f48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	609a      	str	r2, [r3, #8]
 8007f50:	e043      	b.n	8007fda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d119      	bne.n	8007f8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6858      	ldr	r0, [r3, #4]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	461a      	mov	r2, r3
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	f002 f87e 	bl	800a064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	441a      	add	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d32b      	bcc.n	8007fda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	605a      	str	r2, [r3, #4]
 8007f8a:	e026      	b.n	8007fda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68d8      	ldr	r0, [r3, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	461a      	mov	r2, r3
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	f002 f864 	bl	800a064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	425b      	negs	r3, r3
 8007fa6:	441a      	add	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d207      	bcs.n	8007fc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	425b      	negs	r3, r3
 8007fc2:	441a      	add	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d105      	bne.n	8007fda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007fe2:	697b      	ldr	r3, [r7, #20]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d018      	beq.n	8008030 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	441a      	add	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	429a      	cmp	r2, r3
 8008016:	d303      	bcc.n	8008020 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68d9      	ldr	r1, [r3, #12]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008028:	461a      	mov	r2, r3
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f002 f81a 	bl	800a064 <memcpy>
	}
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008040:	f001 fcd8 	bl	80099f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800804a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800804c:	e011      	b.n	8008072 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	2b00      	cmp	r3, #0
 8008054:	d012      	beq.n	800807c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3324      	adds	r3, #36	; 0x24
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fcf6 	bl	8008a4c <xTaskRemoveFromEventList>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008066:	f000 fdcd 	bl	8008c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	3b01      	subs	r3, #1
 800806e:	b2db      	uxtb	r3, r3
 8008070:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008076:	2b00      	cmp	r3, #0
 8008078:	dce9      	bgt.n	800804e <prvUnlockQueue+0x16>
 800807a:	e000      	b.n	800807e <prvUnlockQueue+0x46>
					break;
 800807c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	22ff      	movs	r2, #255	; 0xff
 8008082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008086:	f001 fce5 	bl	8009a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800808a:	f001 fcb3 	bl	80099f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008094:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008096:	e011      	b.n	80080bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d012      	beq.n	80080c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3310      	adds	r3, #16
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fcd1 	bl	8008a4c <xTaskRemoveFromEventList>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080b0:	f000 fda8 	bl	8008c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	dce9      	bgt.n	8008098 <prvUnlockQueue+0x60>
 80080c4:	e000      	b.n	80080c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	22ff      	movs	r2, #255	; 0xff
 80080cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080d0:	f001 fcc0 	bl	8009a54 <vPortExitCritical>
}
 80080d4:	bf00      	nop
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080e4:	f001 fc86 	bl	80099f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d102      	bne.n	80080f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080f0:	2301      	movs	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e001      	b.n	80080fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080fa:	f001 fcab 	bl	8009a54 <vPortExitCritical>

	return xReturn;
 80080fe:	68fb      	ldr	r3, [r7, #12]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008110:	f001 fc70 	bl	80099f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811c:	429a      	cmp	r2, r3
 800811e:	d102      	bne.n	8008126 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008120:	2301      	movs	r3, #1
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e001      	b.n	800812a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800812a:	f001 fc93 	bl	8009a54 <vPortExitCritical>

	return xReturn;
 800812e:	68fb      	ldr	r3, [r7, #12]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e014      	b.n	8008172 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008148:	4a0f      	ldr	r2, [pc, #60]	; (8008188 <vQueueAddToRegistry+0x50>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10b      	bne.n	800816c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008154:	490c      	ldr	r1, [pc, #48]	; (8008188 <vQueueAddToRegistry+0x50>)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800815e:	4a0a      	ldr	r2, [pc, #40]	; (8008188 <vQueueAddToRegistry+0x50>)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	4413      	add	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800816a:	e006      	b.n	800817a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3301      	adds	r3, #1
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b07      	cmp	r3, #7
 8008176:	d9e7      	bls.n	8008148 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	24000f28 	.word	0x24000f28

0800818c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800819c:	f001 fc2a 	bl	80099f4 <vPortEnterCritical>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081a6:	b25b      	sxtb	r3, r3
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	d103      	bne.n	80081b6 <vQueueWaitForMessageRestricted+0x2a>
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081bc:	b25b      	sxtb	r3, r3
 80081be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c2:	d103      	bne.n	80081cc <vQueueWaitForMessageRestricted+0x40>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081cc:	f001 fc42 	bl	8009a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d106      	bne.n	80081e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	3324      	adds	r3, #36	; 0x24
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fc07 	bl	80089f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081e6:	6978      	ldr	r0, [r7, #20]
 80081e8:	f7ff ff26 	bl	8008038 <prvUnlockQueue>
	}
 80081ec:	bf00      	nop
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08e      	sub	sp, #56	; 0x38
 80081f8:	af04      	add	r7, sp, #16
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	623b      	str	r3, [r7, #32]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xTaskCreateStatic+0x46>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	61fb      	str	r3, [r7, #28]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800823a:	235c      	movs	r3, #92	; 0x5c
 800823c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b5c      	cmp	r3, #92	; 0x5c
 8008242:	d00a      	beq.n	800825a <xTaskCreateStatic+0x66>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	61bb      	str	r3, [r7, #24]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800825a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01e      	beq.n	80082a0 <xTaskCreateStatic+0xac>
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01b      	beq.n	80082a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008270:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	2202      	movs	r2, #2
 8008276:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800827a:	2300      	movs	r3, #0
 800827c:	9303      	str	r3, [sp, #12]
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	f107 0314 	add.w	r3, r7, #20
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 f850 	bl	8008338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800829a:	f000 f8dd 	bl	8008458 <prvAddNewTaskToReadyList>
 800829e:	e001      	b.n	80082a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082a4:	697b      	ldr	r3, [r7, #20]
	}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3728      	adds	r7, #40	; 0x28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b08c      	sub	sp, #48	; 0x30
 80082b2:	af04      	add	r7, sp, #16
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 fcb8 	bl	8009c38 <pvPortMalloc>
 80082c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00e      	beq.n	80082ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082d0:	205c      	movs	r0, #92	; 0x5c
 80082d2:	f001 fcb1 	bl	8009c38 <pvPortMalloc>
 80082d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30
 80082e4:	e005      	b.n	80082f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082e6:	6978      	ldr	r0, [r7, #20]
 80082e8:	f001 fd72 	bl	8009dd0 <vPortFree>
 80082ec:	e001      	b.n	80082f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d017      	beq.n	8008328 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008300:	88fa      	ldrh	r2, [r7, #6]
 8008302:	2300      	movs	r3, #0
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	9302      	str	r3, [sp, #8]
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f80e 	bl	8008338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800831c:	69f8      	ldr	r0, [r7, #28]
 800831e:	f000 f89b 	bl	8008458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008322:	2301      	movs	r3, #1
 8008324:	61bb      	str	r3, [r7, #24]
 8008326:	e002      	b.n	800832e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008328:	f04f 33ff 	mov.w	r3, #4294967295
 800832c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800832e:	69bb      	ldr	r3, [r7, #24]
	}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	461a      	mov	r2, r3
 8008350:	21a5      	movs	r1, #165	; 0xa5
 8008352:	f001 fe5b 	bl	800a00c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008360:	440b      	add	r3, r1
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	f023 0307 	bic.w	r3, r3, #7
 800836e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <prvInitialiseNewTask+0x58>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	617b      	str	r3, [r7, #20]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01f      	beq.n	80083d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008396:	2300      	movs	r3, #0
 8008398:	61fb      	str	r3, [r7, #28]
 800839a:	e012      	b.n	80083c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	7819      	ldrb	r1, [r3, #0]
 80083a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	3334      	adds	r3, #52	; 0x34
 80083ac:	460a      	mov	r2, r1
 80083ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d006      	beq.n	80083ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	2b0f      	cmp	r3, #15
 80083c6:	d9e9      	bls.n	800839c <prvInitialiseNewTask+0x64>
 80083c8:	e000      	b.n	80083cc <prvInitialiseNewTask+0x94>
			{
				break;
 80083ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083d4:	e003      	b.n	80083de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	2b37      	cmp	r3, #55	; 0x37
 80083e2:	d901      	bls.n	80083e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083e4:	2337      	movs	r3, #55	; 0x37
 80083e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	2200      	movs	r2, #0
 80083f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	3304      	adds	r3, #4
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff f978 	bl	80076f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	3318      	adds	r3, #24
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff f973 	bl	80076f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	2200      	movs	r2, #0
 8008428:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	68f9      	ldr	r1, [r7, #12]
 8008436:	69b8      	ldr	r0, [r7, #24]
 8008438:	f001 f9ae 	bl	8009798 <pxPortInitialiseStack>
 800843c:	4602      	mov	r2, r0
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800844c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800844e:	bf00      	nop
 8008450:	3720      	adds	r7, #32
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008460:	f001 fac8 	bl	80099f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008464:	4b2d      	ldr	r3, [pc, #180]	; (800851c <prvAddNewTaskToReadyList+0xc4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	4a2c      	ldr	r2, [pc, #176]	; (800851c <prvAddNewTaskToReadyList+0xc4>)
 800846c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800846e:	4b2c      	ldr	r3, [pc, #176]	; (8008520 <prvAddNewTaskToReadyList+0xc8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008476:	4a2a      	ldr	r2, [pc, #168]	; (8008520 <prvAddNewTaskToReadyList+0xc8>)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800847c:	4b27      	ldr	r3, [pc, #156]	; (800851c <prvAddNewTaskToReadyList+0xc4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d110      	bne.n	80084a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008484:	f000 fbe2 	bl	8008c4c <prvInitialiseTaskLists>
 8008488:	e00d      	b.n	80084a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800848a:	4b26      	ldr	r3, [pc, #152]	; (8008524 <prvAddNewTaskToReadyList+0xcc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008492:	4b23      	ldr	r3, [pc, #140]	; (8008520 <prvAddNewTaskToReadyList+0xc8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	429a      	cmp	r2, r3
 800849e:	d802      	bhi.n	80084a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084a0:	4a1f      	ldr	r2, [pc, #124]	; (8008520 <prvAddNewTaskToReadyList+0xc8>)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084a6:	4b20      	ldr	r3, [pc, #128]	; (8008528 <prvAddNewTaskToReadyList+0xd0>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3301      	adds	r3, #1
 80084ac:	4a1e      	ldr	r2, [pc, #120]	; (8008528 <prvAddNewTaskToReadyList+0xd0>)
 80084ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084b0:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <prvAddNewTaskToReadyList+0xd0>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084bc:	4b1b      	ldr	r3, [pc, #108]	; (800852c <prvAddNewTaskToReadyList+0xd4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d903      	bls.n	80084cc <prvAddNewTaskToReadyList+0x74>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a18      	ldr	r2, [pc, #96]	; (800852c <prvAddNewTaskToReadyList+0xd4>)
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4a15      	ldr	r2, [pc, #84]	; (8008530 <prvAddNewTaskToReadyList+0xd8>)
 80084da:	441a      	add	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	4619      	mov	r1, r3
 80084e2:	4610      	mov	r0, r2
 80084e4:	f7ff f913 	bl	800770e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084e8:	f001 fab4 	bl	8009a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084ec:	4b0d      	ldr	r3, [pc, #52]	; (8008524 <prvAddNewTaskToReadyList+0xcc>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00e      	beq.n	8008512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084f4:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <prvAddNewTaskToReadyList+0xc8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fe:	429a      	cmp	r2, r3
 8008500:	d207      	bcs.n	8008512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008502:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <prvAddNewTaskToReadyList+0xdc>)
 8008504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	2400143c 	.word	0x2400143c
 8008520:	24000f68 	.word	0x24000f68
 8008524:	24001448 	.word	0x24001448
 8008528:	24001458 	.word	0x24001458
 800852c:	24001444 	.word	0x24001444
 8008530:	24000f6c 	.word	0x24000f6c
 8008534:	e000ed04 	.word	0xe000ed04

08008538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	; 0x28
 800853c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800853e:	2300      	movs	r3, #0
 8008540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008546:	463a      	mov	r2, r7
 8008548:	1d39      	adds	r1, r7, #4
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff f87c 	bl	800764c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	9202      	str	r2, [sp, #8]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	2300      	movs	r3, #0
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	2300      	movs	r3, #0
 8008564:	460a      	mov	r2, r1
 8008566:	4921      	ldr	r1, [pc, #132]	; (80085ec <vTaskStartScheduler+0xb4>)
 8008568:	4821      	ldr	r0, [pc, #132]	; (80085f0 <vTaskStartScheduler+0xb8>)
 800856a:	f7ff fe43 	bl	80081f4 <xTaskCreateStatic>
 800856e:	4603      	mov	r3, r0
 8008570:	4a20      	ldr	r2, [pc, #128]	; (80085f4 <vTaskStartScheduler+0xbc>)
 8008572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008574:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <vTaskStartScheduler+0xbc>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800857c:	2301      	movs	r3, #1
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	e001      	b.n	8008586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d102      	bne.n	8008592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800858c:	f000 fcfc 	bl	8008f88 <xTimerCreateTimerTask>
 8008590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d116      	bne.n	80085c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	613b      	str	r3, [r7, #16]
}
 80085aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085ac:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <vTaskStartScheduler+0xc0>)
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085b4:	4b11      	ldr	r3, [pc, #68]	; (80085fc <vTaskStartScheduler+0xc4>)
 80085b6:	2201      	movs	r2, #1
 80085b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085ba:	4b11      	ldr	r3, [pc, #68]	; (8008600 <vTaskStartScheduler+0xc8>)
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085c0:	f001 f976 	bl	80098b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085c4:	e00e      	b.n	80085e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085cc:	d10a      	bne.n	80085e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	60fb      	str	r3, [r7, #12]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <vTaskStartScheduler+0xaa>
}
 80085e4:	bf00      	nop
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	0800a0c4 	.word	0x0800a0c4
 80085f0:	08008c1d 	.word	0x08008c1d
 80085f4:	24001460 	.word	0x24001460
 80085f8:	2400145c 	.word	0x2400145c
 80085fc:	24001448 	.word	0x24001448
 8008600:	24001440 	.word	0x24001440

08008604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008608:	4b04      	ldr	r3, [pc, #16]	; (800861c <vTaskSuspendAll+0x18>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	4a03      	ldr	r2, [pc, #12]	; (800861c <vTaskSuspendAll+0x18>)
 8008610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008612:	bf00      	nop
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	24001464 	.word	0x24001464

08008620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800862a:	2300      	movs	r3, #0
 800862c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800862e:	4b42      	ldr	r3, [pc, #264]	; (8008738 <xTaskResumeAll+0x118>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10a      	bne.n	800864c <xTaskResumeAll+0x2c>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	603b      	str	r3, [r7, #0]
}
 8008648:	bf00      	nop
 800864a:	e7fe      	b.n	800864a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800864c:	f001 f9d2 	bl	80099f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008650:	4b39      	ldr	r3, [pc, #228]	; (8008738 <xTaskResumeAll+0x118>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3b01      	subs	r3, #1
 8008656:	4a38      	ldr	r2, [pc, #224]	; (8008738 <xTaskResumeAll+0x118>)
 8008658:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865a:	4b37      	ldr	r3, [pc, #220]	; (8008738 <xTaskResumeAll+0x118>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d162      	bne.n	8008728 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008662:	4b36      	ldr	r3, [pc, #216]	; (800873c <xTaskResumeAll+0x11c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d05e      	beq.n	8008728 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800866a:	e02f      	b.n	80086cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800866c:	4b34      	ldr	r3, [pc, #208]	; (8008740 <xTaskResumeAll+0x120>)
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3318      	adds	r3, #24
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff f8a5 	bl	80077c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3304      	adds	r3, #4
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff f8a0 	bl	80077c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4b2d      	ldr	r3, [pc, #180]	; (8008744 <xTaskResumeAll+0x124>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d903      	bls.n	800869c <xTaskResumeAll+0x7c>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a2a      	ldr	r2, [pc, #168]	; (8008744 <xTaskResumeAll+0x124>)
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4a27      	ldr	r2, [pc, #156]	; (8008748 <xTaskResumeAll+0x128>)
 80086aa:	441a      	add	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4610      	mov	r0, r2
 80086b4:	f7ff f82b 	bl	800770e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086bc:	4b23      	ldr	r3, [pc, #140]	; (800874c <xTaskResumeAll+0x12c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d302      	bcc.n	80086cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086c6:	4b22      	ldr	r3, [pc, #136]	; (8008750 <xTaskResumeAll+0x130>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086cc:	4b1c      	ldr	r3, [pc, #112]	; (8008740 <xTaskResumeAll+0x120>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1cb      	bne.n	800866c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086da:	f000 fb55 	bl	8008d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086de:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <xTaskResumeAll+0x134>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d010      	beq.n	800870c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086ea:	f000 f847 	bl	800877c <xTaskIncrementTick>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80086f4:	4b16      	ldr	r3, [pc, #88]	; (8008750 <xTaskResumeAll+0x130>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1f1      	bne.n	80086ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008706:	4b13      	ldr	r3, [pc, #76]	; (8008754 <xTaskResumeAll+0x134>)
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800870c:	4b10      	ldr	r3, [pc, #64]	; (8008750 <xTaskResumeAll+0x130>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d009      	beq.n	8008728 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008714:	2301      	movs	r3, #1
 8008716:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008718:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <xTaskResumeAll+0x138>)
 800871a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008728:	f001 f994 	bl	8009a54 <vPortExitCritical>

	return xAlreadyYielded;
 800872c:	68bb      	ldr	r3, [r7, #8]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	24001464 	.word	0x24001464
 800873c:	2400143c 	.word	0x2400143c
 8008740:	240013fc 	.word	0x240013fc
 8008744:	24001444 	.word	0x24001444
 8008748:	24000f6c 	.word	0x24000f6c
 800874c:	24000f68 	.word	0x24000f68
 8008750:	24001450 	.word	0x24001450
 8008754:	2400144c 	.word	0x2400144c
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008762:	4b05      	ldr	r3, [pc, #20]	; (8008778 <xTaskGetTickCount+0x1c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008768:	687b      	ldr	r3, [r7, #4]
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	24001440 	.word	0x24001440

0800877c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008786:	4b4f      	ldr	r3, [pc, #316]	; (80088c4 <xTaskIncrementTick+0x148>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	f040 808f 	bne.w	80088ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008790:	4b4d      	ldr	r3, [pc, #308]	; (80088c8 <xTaskIncrementTick+0x14c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3301      	adds	r3, #1
 8008796:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008798:	4a4b      	ldr	r2, [pc, #300]	; (80088c8 <xTaskIncrementTick+0x14c>)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d120      	bne.n	80087e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087a4:	4b49      	ldr	r3, [pc, #292]	; (80088cc <xTaskIncrementTick+0x150>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	603b      	str	r3, [r7, #0]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <xTaskIncrementTick+0x46>
 80087c4:	4b41      	ldr	r3, [pc, #260]	; (80088cc <xTaskIncrementTick+0x150>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	60fb      	str	r3, [r7, #12]
 80087ca:	4b41      	ldr	r3, [pc, #260]	; (80088d0 <xTaskIncrementTick+0x154>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a3f      	ldr	r2, [pc, #252]	; (80088cc <xTaskIncrementTick+0x150>)
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4a3f      	ldr	r2, [pc, #252]	; (80088d0 <xTaskIncrementTick+0x154>)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	4b3e      	ldr	r3, [pc, #248]	; (80088d4 <xTaskIncrementTick+0x158>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3301      	adds	r3, #1
 80087de:	4a3d      	ldr	r2, [pc, #244]	; (80088d4 <xTaskIncrementTick+0x158>)
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	f000 fad1 	bl	8008d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087e6:	4b3c      	ldr	r3, [pc, #240]	; (80088d8 <xTaskIncrementTick+0x15c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d349      	bcc.n	8008884 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087f0:	4b36      	ldr	r3, [pc, #216]	; (80088cc <xTaskIncrementTick+0x150>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d104      	bne.n	8008804 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087fa:	4b37      	ldr	r3, [pc, #220]	; (80088d8 <xTaskIncrementTick+0x15c>)
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008800:	601a      	str	r2, [r3, #0]
					break;
 8008802:	e03f      	b.n	8008884 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008804:	4b31      	ldr	r3, [pc, #196]	; (80088cc <xTaskIncrementTick+0x150>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d203      	bcs.n	8008824 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800881c:	4a2e      	ldr	r2, [pc, #184]	; (80088d8 <xTaskIncrementTick+0x15c>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008822:	e02f      	b.n	8008884 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	3304      	adds	r3, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe ffcd 	bl	80077c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	3318      	adds	r3, #24
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe ffc4 	bl	80077c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008844:	4b25      	ldr	r3, [pc, #148]	; (80088dc <xTaskIncrementTick+0x160>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d903      	bls.n	8008854 <xTaskIncrementTick+0xd8>
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	4a22      	ldr	r2, [pc, #136]	; (80088dc <xTaskIncrementTick+0x160>)
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008858:	4613      	mov	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4a1f      	ldr	r2, [pc, #124]	; (80088e0 <xTaskIncrementTick+0x164>)
 8008862:	441a      	add	r2, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f7fe ff4f 	bl	800770e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008874:	4b1b      	ldr	r3, [pc, #108]	; (80088e4 <xTaskIncrementTick+0x168>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	429a      	cmp	r2, r3
 800887c:	d3b8      	bcc.n	80087f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800887e:	2301      	movs	r3, #1
 8008880:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008882:	e7b5      	b.n	80087f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008884:	4b17      	ldr	r3, [pc, #92]	; (80088e4 <xTaskIncrementTick+0x168>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888a:	4915      	ldr	r1, [pc, #84]	; (80088e0 <xTaskIncrementTick+0x164>)
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d901      	bls.n	80088a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800889c:	2301      	movs	r3, #1
 800889e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088a0:	4b11      	ldr	r3, [pc, #68]	; (80088e8 <xTaskIncrementTick+0x16c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d007      	beq.n	80088b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80088a8:	2301      	movs	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	e004      	b.n	80088b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088ae:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <xTaskIncrementTick+0x170>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3301      	adds	r3, #1
 80088b4:	4a0d      	ldr	r2, [pc, #52]	; (80088ec <xTaskIncrementTick+0x170>)
 80088b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088b8:	697b      	ldr	r3, [r7, #20]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	24001464 	.word	0x24001464
 80088c8:	24001440 	.word	0x24001440
 80088cc:	240013f4 	.word	0x240013f4
 80088d0:	240013f8 	.word	0x240013f8
 80088d4:	24001454 	.word	0x24001454
 80088d8:	2400145c 	.word	0x2400145c
 80088dc:	24001444 	.word	0x24001444
 80088e0:	24000f6c 	.word	0x24000f6c
 80088e4:	24000f68 	.word	0x24000f68
 80088e8:	24001450 	.word	0x24001450
 80088ec:	2400144c 	.word	0x2400144c

080088f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088f6:	4b28      	ldr	r3, [pc, #160]	; (8008998 <vTaskSwitchContext+0xa8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088fe:	4b27      	ldr	r3, [pc, #156]	; (800899c <vTaskSwitchContext+0xac>)
 8008900:	2201      	movs	r2, #1
 8008902:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008904:	e041      	b.n	800898a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008906:	4b25      	ldr	r3, [pc, #148]	; (800899c <vTaskSwitchContext+0xac>)
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800890c:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <vTaskSwitchContext+0xb0>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	e010      	b.n	8008936 <vTaskSwitchContext+0x46>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <vTaskSwitchContext+0x40>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	607b      	str	r3, [r7, #4]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <vTaskSwitchContext+0x3e>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3b01      	subs	r3, #1
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	491b      	ldr	r1, [pc, #108]	; (80089a4 <vTaskSwitchContext+0xb4>)
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4613      	mov	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	440b      	add	r3, r1
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0e4      	beq.n	8008914 <vTaskSwitchContext+0x24>
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4a13      	ldr	r2, [pc, #76]	; (80089a4 <vTaskSwitchContext+0xb4>)
 8008956:	4413      	add	r3, r2
 8008958:	60bb      	str	r3, [r7, #8]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	605a      	str	r2, [r3, #4]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	3308      	adds	r3, #8
 800896c:	429a      	cmp	r2, r3
 800896e:	d104      	bne.n	800897a <vTaskSwitchContext+0x8a>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	4a09      	ldr	r2, [pc, #36]	; (80089a8 <vTaskSwitchContext+0xb8>)
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	4a06      	ldr	r2, [pc, #24]	; (80089a0 <vTaskSwitchContext+0xb0>)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6013      	str	r3, [r2, #0]
}
 800898a:	bf00      	nop
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	24001464 	.word	0x24001464
 800899c:	24001450 	.word	0x24001450
 80089a0:	24001444 	.word	0x24001444
 80089a4:	24000f6c 	.word	0x24000f6c
 80089a8:	24000f68 	.word	0x24000f68

080089ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <vTaskPlaceOnEventList+0x44>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3318      	adds	r3, #24
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7fe febb 	bl	8007756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089e0:	2101      	movs	r1, #1
 80089e2:	6838      	ldr	r0, [r7, #0]
 80089e4:	f000 fa7c 	bl	8008ee0 <prvAddCurrentTaskToDelayedList>
}
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	24000f68 	.word	0x24000f68

080089f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	617b      	str	r3, [r7, #20]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3318      	adds	r3, #24
 8008a22:	4619      	mov	r1, r3
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7fe fe72 	bl	800770e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a30:	f04f 33ff 	mov.w	r3, #4294967295
 8008a34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	68b8      	ldr	r0, [r7, #8]
 8008a3a:	f000 fa51 	bl	8008ee0 <prvAddCurrentTaskToDelayedList>
	}
 8008a3e:	bf00      	nop
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	24000f68 	.word	0x24000f68

08008a4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	60fb      	str	r3, [r7, #12]
}
 8008a74:	bf00      	nop
 8008a76:	e7fe      	b.n	8008a76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	3318      	adds	r3, #24
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe fea3 	bl	80077c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a82:	4b1e      	ldr	r3, [pc, #120]	; (8008afc <xTaskRemoveFromEventList+0xb0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d11d      	bne.n	8008ac6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe fe9a 	bl	80077c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a98:	4b19      	ldr	r3, [pc, #100]	; (8008b00 <xTaskRemoveFromEventList+0xb4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d903      	bls.n	8008aa8 <xTaskRemoveFromEventList+0x5c>
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <xTaskRemoveFromEventList+0xb4>)
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4a13      	ldr	r2, [pc, #76]	; (8008b04 <xTaskRemoveFromEventList+0xb8>)
 8008ab6:	441a      	add	r2, r3
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f7fe fe25 	bl	800770e <vListInsertEnd>
 8008ac4:	e005      	b.n	8008ad2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3318      	adds	r3, #24
 8008aca:	4619      	mov	r1, r3
 8008acc:	480e      	ldr	r0, [pc, #56]	; (8008b08 <xTaskRemoveFromEventList+0xbc>)
 8008ace:	f7fe fe1e 	bl	800770e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <xTaskRemoveFromEventList+0xc0>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d905      	bls.n	8008aec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <xTaskRemoveFromEventList+0xc4>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	e001      	b.n	8008af0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008af0:	697b      	ldr	r3, [r7, #20]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	24001464 	.word	0x24001464
 8008b00:	24001444 	.word	0x24001444
 8008b04:	24000f6c 	.word	0x24000f6c
 8008b08:	240013fc 	.word	0x240013fc
 8008b0c:	24000f68 	.word	0x24000f68
 8008b10:	24001450 	.word	0x24001450

08008b14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b1c:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <vTaskInternalSetTimeOutState+0x24>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b24:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <vTaskInternalSetTimeOutState+0x28>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	605a      	str	r2, [r3, #4]
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	24001454 	.word	0x24001454
 8008b3c:	24001440 	.word	0x24001440

08008b40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	613b      	str	r3, [r7, #16]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	60fb      	str	r3, [r7, #12]
}
 8008b7e:	bf00      	nop
 8008b80:	e7fe      	b.n	8008b80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b82:	f000 ff37 	bl	80099f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b86:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <xTaskCheckForTimeOut+0xbc>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9e:	d102      	bne.n	8008ba6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	61fb      	str	r3, [r7, #28]
 8008ba4:	e023      	b.n	8008bee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <xTaskCheckForTimeOut+0xc0>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d007      	beq.n	8008bc2 <xTaskCheckForTimeOut+0x82>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d302      	bcc.n	8008bc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	e015      	b.n	8008bee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d20b      	bcs.n	8008be4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	1ad2      	subs	r2, r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ff9b 	bl	8008b14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61fb      	str	r3, [r7, #28]
 8008be2:	e004      	b.n	8008bee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bea:	2301      	movs	r3, #1
 8008bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008bee:	f000 ff31 	bl	8009a54 <vPortExitCritical>

	return xReturn;
 8008bf2:	69fb      	ldr	r3, [r7, #28]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3720      	adds	r7, #32
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	24001440 	.word	0x24001440
 8008c00:	24001454 	.word	0x24001454

08008c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c08:	4b03      	ldr	r3, [pc, #12]	; (8008c18 <vTaskMissedYield+0x14>)
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]
}
 8008c0e:	bf00      	nop
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	24001450 	.word	0x24001450

08008c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c24:	f000 f852 	bl	8008ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c28:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <prvIdleTask+0x28>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d9f9      	bls.n	8008c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c30:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <prvIdleTask+0x2c>)
 8008c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c40:	e7f0      	b.n	8008c24 <prvIdleTask+0x8>
 8008c42:	bf00      	nop
 8008c44:	24000f6c 	.word	0x24000f6c
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c52:	2300      	movs	r3, #0
 8008c54:	607b      	str	r3, [r7, #4]
 8008c56:	e00c      	b.n	8008c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4a12      	ldr	r2, [pc, #72]	; (8008cac <prvInitialiseTaskLists+0x60>)
 8008c64:	4413      	add	r3, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fd24 	bl	80076b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	607b      	str	r3, [r7, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b37      	cmp	r3, #55	; 0x37
 8008c76:	d9ef      	bls.n	8008c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c78:	480d      	ldr	r0, [pc, #52]	; (8008cb0 <prvInitialiseTaskLists+0x64>)
 8008c7a:	f7fe fd1b 	bl	80076b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c7e:	480d      	ldr	r0, [pc, #52]	; (8008cb4 <prvInitialiseTaskLists+0x68>)
 8008c80:	f7fe fd18 	bl	80076b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c84:	480c      	ldr	r0, [pc, #48]	; (8008cb8 <prvInitialiseTaskLists+0x6c>)
 8008c86:	f7fe fd15 	bl	80076b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c8a:	480c      	ldr	r0, [pc, #48]	; (8008cbc <prvInitialiseTaskLists+0x70>)
 8008c8c:	f7fe fd12 	bl	80076b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c90:	480b      	ldr	r0, [pc, #44]	; (8008cc0 <prvInitialiseTaskLists+0x74>)
 8008c92:	f7fe fd0f 	bl	80076b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c96:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <prvInitialiseTaskLists+0x78>)
 8008c98:	4a05      	ldr	r2, [pc, #20]	; (8008cb0 <prvInitialiseTaskLists+0x64>)
 8008c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <prvInitialiseTaskLists+0x7c>)
 8008c9e:	4a05      	ldr	r2, [pc, #20]	; (8008cb4 <prvInitialiseTaskLists+0x68>)
 8008ca0:	601a      	str	r2, [r3, #0]
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	24000f6c 	.word	0x24000f6c
 8008cb0:	240013cc 	.word	0x240013cc
 8008cb4:	240013e0 	.word	0x240013e0
 8008cb8:	240013fc 	.word	0x240013fc
 8008cbc:	24001410 	.word	0x24001410
 8008cc0:	24001428 	.word	0x24001428
 8008cc4:	240013f4 	.word	0x240013f4
 8008cc8:	240013f8 	.word	0x240013f8

08008ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cd2:	e019      	b.n	8008d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cd4:	f000 fe8e 	bl	80099f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd8:	4b10      	ldr	r3, [pc, #64]	; (8008d1c <prvCheckTasksWaitingTermination+0x50>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fe fd6f 	bl	80077c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cea:	4b0d      	ldr	r3, [pc, #52]	; (8008d20 <prvCheckTasksWaitingTermination+0x54>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	4a0b      	ldr	r2, [pc, #44]	; (8008d20 <prvCheckTasksWaitingTermination+0x54>)
 8008cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cf4:	4b0b      	ldr	r3, [pc, #44]	; (8008d24 <prvCheckTasksWaitingTermination+0x58>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	4a0a      	ldr	r2, [pc, #40]	; (8008d24 <prvCheckTasksWaitingTermination+0x58>)
 8008cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cfe:	f000 fea9 	bl	8009a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f810 	bl	8008d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d08:	4b06      	ldr	r3, [pc, #24]	; (8008d24 <prvCheckTasksWaitingTermination+0x58>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e1      	bne.n	8008cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	24001410 	.word	0x24001410
 8008d20:	2400143c 	.word	0x2400143c
 8008d24:	24001424 	.word	0x24001424

08008d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d108      	bne.n	8008d4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f001 f846 	bl	8009dd0 <vPortFree>
				vPortFree( pxTCB );
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f001 f843 	bl	8009dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d4a:	e018      	b.n	8008d7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d103      	bne.n	8008d5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 f83a 	bl	8009dd0 <vPortFree>
	}
 8008d5c:	e00f      	b.n	8008d7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d00a      	beq.n	8008d7e <prvDeleteTCB+0x56>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	60fb      	str	r3, [r7, #12]
}
 8008d7a:	bf00      	nop
 8008d7c:	e7fe      	b.n	8008d7c <prvDeleteTCB+0x54>
	}
 8008d7e:	bf00      	nop
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d8e:	4b0c      	ldr	r3, [pc, #48]	; (8008dc0 <prvResetNextTaskUnblockTime+0x38>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d104      	bne.n	8008da2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d98:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008da0:	e008      	b.n	8008db4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da2:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <prvResetNextTaskUnblockTime+0x38>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a04      	ldr	r2, [pc, #16]	; (8008dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008db2:	6013      	str	r3, [r2, #0]
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	240013f4 	.word	0x240013f4
 8008dc4:	2400145c 	.word	0x2400145c

08008dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dce:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <xTaskGetSchedulerState+0x34>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d102      	bne.n	8008ddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	607b      	str	r3, [r7, #4]
 8008dda:	e008      	b.n	8008dee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ddc:	4b08      	ldr	r3, [pc, #32]	; (8008e00 <xTaskGetSchedulerState+0x38>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d102      	bne.n	8008dea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008de4:	2302      	movs	r3, #2
 8008de6:	607b      	str	r3, [r7, #4]
 8008de8:	e001      	b.n	8008dee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dea:	2300      	movs	r3, #0
 8008dec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008dee:	687b      	ldr	r3, [r7, #4]
	}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	24001448 	.word	0x24001448
 8008e00:	24001464 	.word	0x24001464

08008e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d056      	beq.n	8008ec8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e1a:	4b2e      	ldr	r3, [pc, #184]	; (8008ed4 <xTaskPriorityDisinherit+0xd0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d00a      	beq.n	8008e3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60fb      	str	r3, [r7, #12]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	60bb      	str	r3, [r7, #8]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e5c:	1e5a      	subs	r2, r3, #1
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d02c      	beq.n	8008ec8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d128      	bne.n	8008ec8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe fca4 	bl	80077c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <xTaskPriorityDisinherit+0xd4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d903      	bls.n	8008ea8 <xTaskPriorityDisinherit+0xa4>
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <xTaskPriorityDisinherit+0xd4>)
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4a09      	ldr	r2, [pc, #36]	; (8008edc <xTaskPriorityDisinherit+0xd8>)
 8008eb6:	441a      	add	r2, r3
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7fe fc25 	bl	800770e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ec8:	697b      	ldr	r3, [r7, #20]
	}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	24000f68 	.word	0x24000f68
 8008ed8:	24001444 	.word	0x24001444
 8008edc:	24000f6c 	.word	0x24000f6c

08008ee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008eea:	4b21      	ldr	r3, [pc, #132]	; (8008f70 <prvAddCurrentTaskToDelayedList+0x90>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ef0:	4b20      	ldr	r3, [pc, #128]	; (8008f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe fc66 	bl	80077c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d10a      	bne.n	8008f1a <prvAddCurrentTaskToDelayedList+0x3a>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d007      	beq.n	8008f1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f0a:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	4619      	mov	r1, r3
 8008f12:	4819      	ldr	r0, [pc, #100]	; (8008f78 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f14:	f7fe fbfb 	bl	800770e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f18:	e026      	b.n	8008f68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4413      	add	r3, r2
 8008f20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f22:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d209      	bcs.n	8008f46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f32:	4b12      	ldr	r3, [pc, #72]	; (8008f7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4610      	mov	r0, r2
 8008f40:	f7fe fc09 	bl	8007756 <vListInsert>
}
 8008f44:	e010      	b.n	8008f68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f46:	4b0e      	ldr	r3, [pc, #56]	; (8008f80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7fe fbff 	bl	8007756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d202      	bcs.n	8008f68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f62:	4a08      	ldr	r2, [pc, #32]	; (8008f84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	6013      	str	r3, [r2, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	24001440 	.word	0x24001440
 8008f74:	24000f68 	.word	0x24000f68
 8008f78:	24001428 	.word	0x24001428
 8008f7c:	240013f8 	.word	0x240013f8
 8008f80:	240013f4 	.word	0x240013f4
 8008f84:	2400145c 	.word	0x2400145c

08008f88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	; 0x28
 8008f8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f92:	f000 fba1 	bl	80096d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f96:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <xTimerCreateTimerTask+0x80>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d021      	beq.n	8008fe2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fa6:	1d3a      	adds	r2, r7, #4
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe fb65 	bl	8007680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	9202      	str	r2, [sp, #8]
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	4910      	ldr	r1, [pc, #64]	; (800900c <xTimerCreateTimerTask+0x84>)
 8008fca:	4811      	ldr	r0, [pc, #68]	; (8009010 <xTimerCreateTimerTask+0x88>)
 8008fcc:	f7ff f912 	bl	80081f4 <xTaskCreateStatic>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	4a10      	ldr	r2, [pc, #64]	; (8009014 <xTimerCreateTimerTask+0x8c>)
 8008fd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <xTimerCreateTimerTask+0x8c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	613b      	str	r3, [r7, #16]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ffe:	697b      	ldr	r3, [r7, #20]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	24001498 	.word	0x24001498
 800900c:	0800a0cc 	.word	0x0800a0cc
 8009010:	08009281 	.word	0x08009281
 8009014:	2400149c 	.word	0x2400149c

08009018 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af02      	add	r7, sp, #8
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009026:	202c      	movs	r0, #44	; 0x2c
 8009028:	f000 fe06 	bl	8009c38 <pvPortMalloc>
 800902c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00d      	beq.n	8009050 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	68b9      	ldr	r1, [r7, #8]
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f000 f843 	bl	80090d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009050:	697b      	ldr	r3, [r7, #20]
	}
 8009052:	4618      	mov	r0, r3
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800905a:	b580      	push	{r7, lr}
 800905c:	b08a      	sub	sp, #40	; 0x28
 800905e:	af02      	add	r7, sp, #8
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009068:	232c      	movs	r3, #44	; 0x2c
 800906a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b2c      	cmp	r3, #44	; 0x2c
 8009070:	d00a      	beq.n	8009088 <xTimerCreateStatic+0x2e>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	61bb      	str	r3, [r7, #24]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009088:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	617b      	str	r3, [r7, #20]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00d      	beq.n	80090cc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 f805 	bl	80090d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80090cc:	69fb      	ldr	r3, [r7, #28]
	}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b086      	sub	sp, #24
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	617b      	str	r3, [r7, #20]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01e      	beq.n	8009144 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009106:	f000 fae7 	bl	80096d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	6a3a      	ldr	r2, [r7, #32]
 8009120:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	3304      	adds	r3, #4
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fae4 	bl	80076f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d008      	beq.n	8009144 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009138:	f043 0304 	orr.w	r3, r3, #4
 800913c:	b2da      	uxtb	r2, r3
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009144:	bf00      	nop
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	; 0x28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800915a:	2300      	movs	r3, #0
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	623b      	str	r3, [r7, #32]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800917a:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <xTimerGenericCommand+0x98>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d02a      	beq.n	80091d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b05      	cmp	r3, #5
 8009192:	dc18      	bgt.n	80091c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009194:	f7ff fe18 	bl	8008dc8 <xTaskGetSchedulerState>
 8009198:	4603      	mov	r3, r0
 800919a:	2b02      	cmp	r3, #2
 800919c:	d109      	bne.n	80091b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800919e:	4b11      	ldr	r3, [pc, #68]	; (80091e4 <xTimerGenericCommand+0x98>)
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	f107 0110 	add.w	r1, r7, #16
 80091a6:	2300      	movs	r3, #0
 80091a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091aa:	f7fe fc3b 	bl	8007a24 <xQueueGenericSend>
 80091ae:	6278      	str	r0, [r7, #36]	; 0x24
 80091b0:	e012      	b.n	80091d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <xTimerGenericCommand+0x98>)
 80091b4:	6818      	ldr	r0, [r3, #0]
 80091b6:	f107 0110 	add.w	r1, r7, #16
 80091ba:	2300      	movs	r3, #0
 80091bc:	2200      	movs	r2, #0
 80091be:	f7fe fc31 	bl	8007a24 <xQueueGenericSend>
 80091c2:	6278      	str	r0, [r7, #36]	; 0x24
 80091c4:	e008      	b.n	80091d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091c6:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <xTimerGenericCommand+0x98>)
 80091c8:	6818      	ldr	r0, [r3, #0]
 80091ca:	f107 0110 	add.w	r1, r7, #16
 80091ce:	2300      	movs	r3, #0
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	f7fe fd25 	bl	8007c20 <xQueueGenericSendFromISR>
 80091d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3728      	adds	r7, #40	; 0x28
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	24001498 	.word	0x24001498

080091e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b088      	sub	sp, #32
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f2:	4b22      	ldr	r3, [pc, #136]	; (800927c <prvProcessExpiredTimer+0x94>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	3304      	adds	r3, #4
 8009200:	4618      	mov	r0, r3
 8009202:	f7fe fae1 	bl	80077c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d022      	beq.n	800925a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	18d1      	adds	r1, r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	6978      	ldr	r0, [r7, #20]
 8009222:	f000 f8d1 	bl	80093c8 <prvInsertTimerInActiveList>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01f      	beq.n	800926c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800922c:	2300      	movs	r3, #0
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	2300      	movs	r3, #0
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	2100      	movs	r1, #0
 8009236:	6978      	ldr	r0, [r7, #20]
 8009238:	f7ff ff88 	bl	800914c <xTimerGenericCommand>
 800923c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d113      	bne.n	800926c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	60fb      	str	r3, [r7, #12]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	b2da      	uxtb	r2, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	6978      	ldr	r0, [r7, #20]
 8009272:	4798      	blx	r3
}
 8009274:	bf00      	nop
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	24001490 	.word	0x24001490

08009280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009288:	f107 0308 	add.w	r3, r7, #8
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f857 	bl	8009340 <prvGetNextExpireTime>
 8009292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4619      	mov	r1, r3
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f803 	bl	80092a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800929e:	f000 f8d5 	bl	800944c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092a2:	e7f1      	b.n	8009288 <prvTimerTask+0x8>

080092a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092ae:	f7ff f9a9 	bl	8008604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092b2:	f107 0308 	add.w	r3, r7, #8
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f866 	bl	8009388 <prvSampleTimeNow>
 80092bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d130      	bne.n	8009326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10a      	bne.n	80092e0 <prvProcessTimerOrBlockTask+0x3c>
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d806      	bhi.n	80092e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092d2:	f7ff f9a5 	bl	8008620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff ff85 	bl	80091e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092de:	e024      	b.n	800932a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d008      	beq.n	80092f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092e6:	4b13      	ldr	r3, [pc, #76]	; (8009334 <prvProcessTimerOrBlockTask+0x90>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <prvProcessTimerOrBlockTask+0x50>
 80092f0:	2301      	movs	r3, #1
 80092f2:	e000      	b.n	80092f6 <prvProcessTimerOrBlockTask+0x52>
 80092f4:	2300      	movs	r3, #0
 80092f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092f8:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <prvProcessTimerOrBlockTask+0x94>)
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4619      	mov	r1, r3
 8009306:	f7fe ff41 	bl	800818c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800930a:	f7ff f989 	bl	8008620 <xTaskResumeAll>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009314:	4b09      	ldr	r3, [pc, #36]	; (800933c <prvProcessTimerOrBlockTask+0x98>)
 8009316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	f3bf 8f6f 	isb	sy
}
 8009324:	e001      	b.n	800932a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009326:	f7ff f97b 	bl	8008620 <xTaskResumeAll>
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	24001494 	.word	0x24001494
 8009338:	24001498 	.word	0x24001498
 800933c:	e000ed04 	.word	0xe000ed04

08009340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009348:	4b0e      	ldr	r3, [pc, #56]	; (8009384 <prvGetNextExpireTime+0x44>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <prvGetNextExpireTime+0x16>
 8009352:	2201      	movs	r2, #1
 8009354:	e000      	b.n	8009358 <prvGetNextExpireTime+0x18>
 8009356:	2200      	movs	r2, #0
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d105      	bne.n	8009370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009364:	4b07      	ldr	r3, [pc, #28]	; (8009384 <prvGetNextExpireTime+0x44>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	e001      	b.n	8009374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009374:	68fb      	ldr	r3, [r7, #12]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	24001490 	.word	0x24001490

08009388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009390:	f7ff f9e4 	bl	800875c <xTaskGetTickCount>
 8009394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009396:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <prvSampleTimeNow+0x3c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	429a      	cmp	r2, r3
 800939e:	d205      	bcs.n	80093ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093a0:	f000 f936 	bl	8009610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093b2:	4a04      	ldr	r2, [pc, #16]	; (80093c4 <prvSampleTimeNow+0x3c>)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093b8:	68fb      	ldr	r3, [r7, #12]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	240014a0 	.word	0x240014a0

080093c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093d6:	2300      	movs	r3, #0
 80093d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d812      	bhi.n	8009414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	1ad2      	subs	r2, r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d302      	bcc.n	8009402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093fc:	2301      	movs	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	e01b      	b.n	800943a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009402:	4b10      	ldr	r3, [pc, #64]	; (8009444 <prvInsertTimerInActiveList+0x7c>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3304      	adds	r3, #4
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f7fe f9a2 	bl	8007756 <vListInsert>
 8009412:	e012      	b.n	800943a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d206      	bcs.n	800942a <prvInsertTimerInActiveList+0x62>
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d302      	bcc.n	800942a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009424:	2301      	movs	r3, #1
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e007      	b.n	800943a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800942a:	4b07      	ldr	r3, [pc, #28]	; (8009448 <prvInsertTimerInActiveList+0x80>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3304      	adds	r3, #4
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f7fe f98e 	bl	8007756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800943a:	697b      	ldr	r3, [r7, #20]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	24001494 	.word	0x24001494
 8009448:	24001490 	.word	0x24001490

0800944c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08e      	sub	sp, #56	; 0x38
 8009450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009452:	e0ca      	b.n	80095ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	da18      	bge.n	800948c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800945a:	1d3b      	adds	r3, r7, #4
 800945c:	3304      	adds	r3, #4
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	61fb      	str	r3, [r7, #28]
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009482:	6850      	ldr	r0, [r2, #4]
 8009484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009486:	6892      	ldr	r2, [r2, #8]
 8009488:	4611      	mov	r1, r2
 800948a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f2c0 80ab 	blt.w	80095ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	3304      	adds	r3, #4
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe f98f 	bl	80077c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094aa:	463b      	mov	r3, r7
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff ff6b 	bl	8009388 <prvSampleTimeNow>
 80094b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b09      	cmp	r3, #9
 80094b8:	f200 8096 	bhi.w	80095e8 <prvProcessReceivedCommands+0x19c>
 80094bc:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <prvProcessReceivedCommands+0x78>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094ed 	.word	0x080094ed
 80094c8:	080094ed 	.word	0x080094ed
 80094cc:	080094ed 	.word	0x080094ed
 80094d0:	08009561 	.word	0x08009561
 80094d4:	08009575 	.word	0x08009575
 80094d8:	080095bf 	.word	0x080095bf
 80094dc:	080094ed 	.word	0x080094ed
 80094e0:	080094ed 	.word	0x080094ed
 80094e4:	08009561 	.word	0x08009561
 80094e8:	08009575 	.word	0x08009575
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094f2:	f043 0301 	orr.w	r3, r3, #1
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	18d1      	adds	r1, r2, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800950a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800950c:	f7ff ff5c 	bl	80093c8 <prvInsertTimerInActiveList>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d069      	beq.n	80095ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800951c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d05e      	beq.n	80095ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	441a      	add	r2, r3
 8009534:	2300      	movs	r3, #0
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	2300      	movs	r3, #0
 800953a:	2100      	movs	r1, #0
 800953c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800953e:	f7ff fe05 	bl	800914c <xTimerGenericCommand>
 8009542:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d14f      	bne.n	80095ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	61bb      	str	r3, [r7, #24]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009566:	f023 0301 	bic.w	r3, r3, #1
 800956a:	b2da      	uxtb	r2, r3
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009572:	e03a      	b.n	80095ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800957a:	f043 0301 	orr.w	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	617b      	str	r3, [r7, #20]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	699a      	ldr	r2, [r3, #24]
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	18d1      	adds	r1, r2, r3
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b8:	f7ff ff06 	bl	80093c8 <prvInsertTimerInActiveList>
					break;
 80095bc:	e015      	b.n	80095ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d103      	bne.n	80095d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ce:	f000 fbff 	bl	8009dd0 <vPortFree>
 80095d2:	e00a      	b.n	80095ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095da:	f023 0301 	bic.w	r3, r3, #1
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095e6:	e000      	b.n	80095ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80095e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095ea:	4b08      	ldr	r3, [pc, #32]	; (800960c <prvProcessReceivedCommands+0x1c0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	1d39      	adds	r1, r7, #4
 80095f0:	2200      	movs	r2, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fbb0 	bl	8007d58 <xQueueReceive>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f47f af2a 	bne.w	8009454 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	3730      	adds	r7, #48	; 0x30
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	24001498 	.word	0x24001498

08009610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009616:	e048      	b.n	80096aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009618:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <prvSwitchTimerLists+0xc0>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009622:	4b2b      	ldr	r3, [pc, #172]	; (80096d0 <prvSwitchTimerLists+0xc0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3304      	adds	r3, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe f8c9 	bl	80077c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	d02e      	beq.n	80096aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4413      	add	r3, r2
 8009654:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	429a      	cmp	r2, r3
 800965c:	d90e      	bls.n	800967c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800966a:	4b19      	ldr	r3, [pc, #100]	; (80096d0 <prvSwitchTimerLists+0xc0>)
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3304      	adds	r3, #4
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f7fe f86e 	bl	8007756 <vListInsert>
 800967a:	e016      	b.n	80096aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800967c:	2300      	movs	r3, #0
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	2300      	movs	r3, #0
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	2100      	movs	r1, #0
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fd60 	bl	800914c <xTimerGenericCommand>
 800968c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	603b      	str	r3, [r7, #0]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096aa:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <prvSwitchTimerLists+0xc0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1b1      	bne.n	8009618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <prvSwitchTimerLists+0xc0>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096ba:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <prvSwitchTimerLists+0xc4>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a04      	ldr	r2, [pc, #16]	; (80096d0 <prvSwitchTimerLists+0xc0>)
 80096c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096c2:	4a04      	ldr	r2, [pc, #16]	; (80096d4 <prvSwitchTimerLists+0xc4>)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	6013      	str	r3, [r2, #0]
}
 80096c8:	bf00      	nop
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	24001490 	.word	0x24001490
 80096d4:	24001494 	.word	0x24001494

080096d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096de:	f000 f989 	bl	80099f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096e2:	4b15      	ldr	r3, [pc, #84]	; (8009738 <prvCheckForValidListAndQueue+0x60>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d120      	bne.n	800972c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096ea:	4814      	ldr	r0, [pc, #80]	; (800973c <prvCheckForValidListAndQueue+0x64>)
 80096ec:	f7fd ffe2 	bl	80076b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096f0:	4813      	ldr	r0, [pc, #76]	; (8009740 <prvCheckForValidListAndQueue+0x68>)
 80096f2:	f7fd ffdf 	bl	80076b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096f6:	4b13      	ldr	r3, [pc, #76]	; (8009744 <prvCheckForValidListAndQueue+0x6c>)
 80096f8:	4a10      	ldr	r2, [pc, #64]	; (800973c <prvCheckForValidListAndQueue+0x64>)
 80096fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096fc:	4b12      	ldr	r3, [pc, #72]	; (8009748 <prvCheckForValidListAndQueue+0x70>)
 80096fe:	4a10      	ldr	r2, [pc, #64]	; (8009740 <prvCheckForValidListAndQueue+0x68>)
 8009700:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009702:	2300      	movs	r3, #0
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	4b11      	ldr	r3, [pc, #68]	; (800974c <prvCheckForValidListAndQueue+0x74>)
 8009708:	4a11      	ldr	r2, [pc, #68]	; (8009750 <prvCheckForValidListAndQueue+0x78>)
 800970a:	2110      	movs	r1, #16
 800970c:	200a      	movs	r0, #10
 800970e:	f7fe f8ed 	bl	80078ec <xQueueGenericCreateStatic>
 8009712:	4603      	mov	r3, r0
 8009714:	4a08      	ldr	r2, [pc, #32]	; (8009738 <prvCheckForValidListAndQueue+0x60>)
 8009716:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009718:	4b07      	ldr	r3, [pc, #28]	; (8009738 <prvCheckForValidListAndQueue+0x60>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d005      	beq.n	800972c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009720:	4b05      	ldr	r3, [pc, #20]	; (8009738 <prvCheckForValidListAndQueue+0x60>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	490b      	ldr	r1, [pc, #44]	; (8009754 <prvCheckForValidListAndQueue+0x7c>)
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fd06 	bl	8008138 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800972c:	f000 f992 	bl	8009a54 <vPortExitCritical>
}
 8009730:	bf00      	nop
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	24001498 	.word	0x24001498
 800973c:	24001468 	.word	0x24001468
 8009740:	2400147c 	.word	0x2400147c
 8009744:	24001490 	.word	0x24001490
 8009748:	24001494 	.word	0x24001494
 800974c:	24001544 	.word	0x24001544
 8009750:	240014a4 	.word	0x240014a4
 8009754:	0800a0d4 	.word	0x0800a0d4

08009758 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <pvTimerGetTimerID+0x28>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	60fb      	str	r3, [r7, #12]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009780:	f000 f938 	bl	80099f4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800978a:	f000 f963 	bl	8009a54 <vPortExitCritical>

	return pvReturn;
 800978e:	693b      	ldr	r3, [r7, #16]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	3b04      	subs	r3, #4
 80097a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3b04      	subs	r3, #4
 80097b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	f023 0201 	bic.w	r2, r3, #1
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3b04      	subs	r3, #4
 80097c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097c8:	4a0c      	ldr	r2, [pc, #48]	; (80097fc <pxPortInitialiseStack+0x64>)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3b14      	subs	r3, #20
 80097d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3b04      	subs	r3, #4
 80097de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f06f 0202 	mvn.w	r2, #2
 80097e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3b20      	subs	r3, #32
 80097ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097ee:	68fb      	ldr	r3, [r7, #12]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	08009801 	.word	0x08009801

08009800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800980a:	4b12      	ldr	r3, [pc, #72]	; (8009854 <prvTaskExitError+0x54>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009812:	d00a      	beq.n	800982a <prvTaskExitError+0x2a>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	60fb      	str	r3, [r7, #12]
}
 8009826:	bf00      	nop
 8009828:	e7fe      	b.n	8009828 <prvTaskExitError+0x28>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	60bb      	str	r3, [r7, #8]
}
 800983c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800983e:	bf00      	nop
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0fc      	beq.n	8009840 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009846:	bf00      	nop
 8009848:	bf00      	nop
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	24000010 	.word	0x24000010
	...

08009860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <pxCurrentTCBConst2>)
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	6808      	ldr	r0, [r1, #0]
 8009866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986a:	f380 8809 	msr	PSP, r0
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f380 8811 	msr	BASEPRI, r0
 800987a:	4770      	bx	lr
 800987c:	f3af 8000 	nop.w

08009880 <pxCurrentTCBConst2>:
 8009880:	24000f68 	.word	0x24000f68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop

08009888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009888:	4808      	ldr	r0, [pc, #32]	; (80098ac <prvPortStartFirstTask+0x24>)
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	6800      	ldr	r0, [r0, #0]
 800988e:	f380 8808 	msr	MSP, r0
 8009892:	f04f 0000 	mov.w	r0, #0
 8009896:	f380 8814 	msr	CONTROL, r0
 800989a:	b662      	cpsie	i
 800989c:	b661      	cpsie	f
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	df00      	svc	0
 80098a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098aa:	bf00      	nop
 80098ac:	e000ed08 	.word	0xe000ed08

080098b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098b6:	4b46      	ldr	r3, [pc, #280]	; (80099d0 <xPortStartScheduler+0x120>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a46      	ldr	r2, [pc, #280]	; (80099d4 <xPortStartScheduler+0x124>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d10a      	bne.n	80098d6 <xPortStartScheduler+0x26>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	613b      	str	r3, [r7, #16]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098d6:	4b3e      	ldr	r3, [pc, #248]	; (80099d0 <xPortStartScheduler+0x120>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a3f      	ldr	r2, [pc, #252]	; (80099d8 <xPortStartScheduler+0x128>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d10a      	bne.n	80098f6 <xPortStartScheduler+0x46>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	60fb      	str	r3, [r7, #12]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098f6:	4b39      	ldr	r3, [pc, #228]	; (80099dc <xPortStartScheduler+0x12c>)
 80098f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	22ff      	movs	r2, #255	; 0xff
 8009906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	b2db      	uxtb	r3, r3
 800990e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009918:	b2da      	uxtb	r2, r3
 800991a:	4b31      	ldr	r3, [pc, #196]	; (80099e0 <xPortStartScheduler+0x130>)
 800991c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800991e:	4b31      	ldr	r3, [pc, #196]	; (80099e4 <xPortStartScheduler+0x134>)
 8009920:	2207      	movs	r2, #7
 8009922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009924:	e009      	b.n	800993a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009926:	4b2f      	ldr	r3, [pc, #188]	; (80099e4 <xPortStartScheduler+0x134>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3b01      	subs	r3, #1
 800992c:	4a2d      	ldr	r2, [pc, #180]	; (80099e4 <xPortStartScheduler+0x134>)
 800992e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	b2db      	uxtb	r3, r3
 8009938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009942:	2b80      	cmp	r3, #128	; 0x80
 8009944:	d0ef      	beq.n	8009926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009946:	4b27      	ldr	r3, [pc, #156]	; (80099e4 <xPortStartScheduler+0x134>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f1c3 0307 	rsb	r3, r3, #7
 800994e:	2b04      	cmp	r3, #4
 8009950:	d00a      	beq.n	8009968 <xPortStartScheduler+0xb8>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	60bb      	str	r3, [r7, #8]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009968:	4b1e      	ldr	r3, [pc, #120]	; (80099e4 <xPortStartScheduler+0x134>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	4a1d      	ldr	r2, [pc, #116]	; (80099e4 <xPortStartScheduler+0x134>)
 8009970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009972:	4b1c      	ldr	r3, [pc, #112]	; (80099e4 <xPortStartScheduler+0x134>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800997a:	4a1a      	ldr	r2, [pc, #104]	; (80099e4 <xPortStartScheduler+0x134>)
 800997c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009986:	4b18      	ldr	r3, [pc, #96]	; (80099e8 <xPortStartScheduler+0x138>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a17      	ldr	r2, [pc, #92]	; (80099e8 <xPortStartScheduler+0x138>)
 800998c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <xPortStartScheduler+0x138>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a14      	ldr	r2, [pc, #80]	; (80099e8 <xPortStartScheduler+0x138>)
 8009998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800999c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800999e:	f000 f8dd 	bl	8009b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099a2:	4b12      	ldr	r3, [pc, #72]	; (80099ec <xPortStartScheduler+0x13c>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099a8:	f000 f8fc 	bl	8009ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099ac:	4b10      	ldr	r3, [pc, #64]	; (80099f0 <xPortStartScheduler+0x140>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a0f      	ldr	r2, [pc, #60]	; (80099f0 <xPortStartScheduler+0x140>)
 80099b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099b8:	f7ff ff66 	bl	8009888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099bc:	f7fe ff98 	bl	80088f0 <vTaskSwitchContext>
	prvTaskExitError();
 80099c0:	f7ff ff1e 	bl	8009800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	e000ed00 	.word	0xe000ed00
 80099d4:	410fc271 	.word	0x410fc271
 80099d8:	410fc270 	.word	0x410fc270
 80099dc:	e000e400 	.word	0xe000e400
 80099e0:	24001594 	.word	0x24001594
 80099e4:	24001598 	.word	0x24001598
 80099e8:	e000ed20 	.word	0xe000ed20
 80099ec:	24000010 	.word	0x24000010
 80099f0:	e000ef34 	.word	0xe000ef34

080099f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	607b      	str	r3, [r7, #4]
}
 8009a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a0e:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <vPortEnterCritical+0x58>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3301      	adds	r3, #1
 8009a14:	4a0d      	ldr	r2, [pc, #52]	; (8009a4c <vPortEnterCritical+0x58>)
 8009a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a18:	4b0c      	ldr	r3, [pc, #48]	; (8009a4c <vPortEnterCritical+0x58>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d10f      	bne.n	8009a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <vPortEnterCritical+0x5c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	603b      	str	r3, [r7, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <vPortEnterCritical+0x4a>
	}
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	24000010 	.word	0x24000010
 8009a50:	e000ed04 	.word	0xe000ed04

08009a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a5a:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <vPortExitCritical+0x50>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10a      	bne.n	8009a78 <vPortExitCritical+0x24>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	607b      	str	r3, [r7, #4]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a78:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <vPortExitCritical+0x50>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <vPortExitCritical+0x50>)
 8009a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a82:	4b08      	ldr	r3, [pc, #32]	; (8009aa4 <vPortExitCritical+0x50>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d105      	bne.n	8009a96 <vPortExitCritical+0x42>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	f383 8811 	msr	BASEPRI, r3
}
 8009a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a96:	bf00      	nop
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	24000010 	.word	0x24000010
	...

08009ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ab0:	f3ef 8009 	mrs	r0, PSP
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <pxCurrentTCBConst>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	f01e 0f10 	tst.w	lr, #16
 8009ac0:	bf08      	it	eq
 8009ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aca:	6010      	str	r0, [r2, #0]
 8009acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ad4:	f380 8811 	msr	BASEPRI, r0
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f7fe ff06 	bl	80088f0 <vTaskSwitchContext>
 8009ae4:	f04f 0000 	mov.w	r0, #0
 8009ae8:	f380 8811 	msr	BASEPRI, r0
 8009aec:	bc09      	pop	{r0, r3}
 8009aee:	6819      	ldr	r1, [r3, #0]
 8009af0:	6808      	ldr	r0, [r1, #0]
 8009af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af6:	f01e 0f10 	tst.w	lr, #16
 8009afa:	bf08      	it	eq
 8009afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b00:	f380 8809 	msr	PSP, r0
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst>:
 8009b10:	24000f68 	.word	0x24000f68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
}
 8009b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b32:	f7fe fe23 	bl	800877c <xTaskIncrementTick>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b3c:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <xPortSysTickHandler+0x40>)
 8009b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	2300      	movs	r3, #0
 8009b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	f383 8811 	msr	BASEPRI, r3
}
 8009b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <vPortSetupTimerInterrupt+0x34>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b66:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <vPortSetupTimerInterrupt+0x38>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b6c:	4b0a      	ldr	r3, [pc, #40]	; (8009b98 <vPortSetupTimerInterrupt+0x3c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a0a      	ldr	r2, [pc, #40]	; (8009b9c <vPortSetupTimerInterrupt+0x40>)
 8009b72:	fba2 2303 	umull	r2, r3, r2, r3
 8009b76:	099b      	lsrs	r3, r3, #6
 8009b78:	4a09      	ldr	r2, [pc, #36]	; (8009ba0 <vPortSetupTimerInterrupt+0x44>)
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b7e:	4b04      	ldr	r3, [pc, #16]	; (8009b90 <vPortSetupTimerInterrupt+0x34>)
 8009b80:	2207      	movs	r2, #7
 8009b82:	601a      	str	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	e000e010 	.word	0xe000e010
 8009b94:	e000e018 	.word	0xe000e018
 8009b98:	24000000 	.word	0x24000000
 8009b9c:	10624dd3 	.word	0x10624dd3
 8009ba0:	e000e014 	.word	0xe000e014

08009ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009bb4 <vPortEnableVFP+0x10>
 8009ba8:	6801      	ldr	r1, [r0, #0]
 8009baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009bae:	6001      	str	r1, [r0, #0]
 8009bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bb2:	bf00      	nop
 8009bb4:	e000ed88 	.word	0xe000ed88

08009bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bbe:	f3ef 8305 	mrs	r3, IPSR
 8009bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b0f      	cmp	r3, #15
 8009bc8:	d914      	bls.n	8009bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bca:	4a17      	ldr	r2, [pc, #92]	; (8009c28 <vPortValidateInterruptPriority+0x70>)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bd4:	4b15      	ldr	r3, [pc, #84]	; (8009c2c <vPortValidateInterruptPriority+0x74>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	7afa      	ldrb	r2, [r7, #11]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d20a      	bcs.n	8009bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	607b      	str	r3, [r7, #4]
}
 8009bf0:	bf00      	nop
 8009bf2:	e7fe      	b.n	8009bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bf4:	4b0e      	ldr	r3, [pc, #56]	; (8009c30 <vPortValidateInterruptPriority+0x78>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bfc:	4b0d      	ldr	r3, [pc, #52]	; (8009c34 <vPortValidateInterruptPriority+0x7c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d90a      	bls.n	8009c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	603b      	str	r3, [r7, #0]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <vPortValidateInterruptPriority+0x60>
	}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	e000e3f0 	.word	0xe000e3f0
 8009c2c:	24001594 	.word	0x24001594
 8009c30:	e000ed0c 	.word	0xe000ed0c
 8009c34:	24001598 	.word	0x24001598

08009c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08a      	sub	sp, #40	; 0x28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c40:	2300      	movs	r3, #0
 8009c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c44:	f7fe fcde 	bl	8008604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c48:	4b5b      	ldr	r3, [pc, #364]	; (8009db8 <pvPortMalloc+0x180>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c50:	f000 f920 	bl	8009e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c54:	4b59      	ldr	r3, [pc, #356]	; (8009dbc <pvPortMalloc+0x184>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 8093 	bne.w	8009d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01d      	beq.n	8009ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c68:	2208      	movs	r2, #8
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d014      	beq.n	8009ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f023 0307 	bic.w	r3, r3, #7
 8009c80:	3308      	adds	r3, #8
 8009c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	617b      	str	r3, [r7, #20]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d06e      	beq.n	8009d88 <pvPortMalloc+0x150>
 8009caa:	4b45      	ldr	r3, [pc, #276]	; (8009dc0 <pvPortMalloc+0x188>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d869      	bhi.n	8009d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cb4:	4b43      	ldr	r3, [pc, #268]	; (8009dc4 <pvPortMalloc+0x18c>)
 8009cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cb8:	4b42      	ldr	r3, [pc, #264]	; (8009dc4 <pvPortMalloc+0x18c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cbe:	e004      	b.n	8009cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d903      	bls.n	8009cdc <pvPortMalloc+0xa4>
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f1      	bne.n	8009cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cdc:	4b36      	ldr	r3, [pc, #216]	; (8009db8 <pvPortMalloc+0x180>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d050      	beq.n	8009d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2208      	movs	r2, #8
 8009cec:	4413      	add	r3, r2
 8009cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	2308      	movs	r3, #8
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d91f      	bls.n	8009d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00a      	beq.n	8009d30 <pvPortMalloc+0xf8>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	613b      	str	r3, [r7, #16]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d42:	69b8      	ldr	r0, [r7, #24]
 8009d44:	f000 f908 	bl	8009f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d48:	4b1d      	ldr	r3, [pc, #116]	; (8009dc0 <pvPortMalloc+0x188>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	4a1b      	ldr	r2, [pc, #108]	; (8009dc0 <pvPortMalloc+0x188>)
 8009d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d56:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <pvPortMalloc+0x188>)
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	4b1b      	ldr	r3, [pc, #108]	; (8009dc8 <pvPortMalloc+0x190>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d203      	bcs.n	8009d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d62:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <pvPortMalloc+0x188>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a18      	ldr	r2, [pc, #96]	; (8009dc8 <pvPortMalloc+0x190>)
 8009d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <pvPortMalloc+0x184>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	431a      	orrs	r2, r3
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d7e:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <pvPortMalloc+0x194>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3301      	adds	r3, #1
 8009d84:	4a11      	ldr	r2, [pc, #68]	; (8009dcc <pvPortMalloc+0x194>)
 8009d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d88:	f7fe fc4a 	bl	8008620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f003 0307 	and.w	r3, r3, #7
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <pvPortMalloc+0x174>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	60fb      	str	r3, [r7, #12]
}
 8009da8:	bf00      	nop
 8009daa:	e7fe      	b.n	8009daa <pvPortMalloc+0x172>
	return pvReturn;
 8009dac:	69fb      	ldr	r3, [r7, #28]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3728      	adds	r7, #40	; 0x28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	240051a4 	.word	0x240051a4
 8009dbc:	240051b8 	.word	0x240051b8
 8009dc0:	240051a8 	.word	0x240051a8
 8009dc4:	2400519c 	.word	0x2400519c
 8009dc8:	240051ac 	.word	0x240051ac
 8009dcc:	240051b0 	.word	0x240051b0

08009dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d04d      	beq.n	8009e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009de2:	2308      	movs	r3, #8
 8009de4:	425b      	negs	r3, r3
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	4413      	add	r3, r2
 8009dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	4b24      	ldr	r3, [pc, #144]	; (8009e88 <vPortFree+0xb8>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <vPortFree+0x44>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	60fb      	str	r3, [r7, #12]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00a      	beq.n	8009e32 <vPortFree+0x62>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	60bb      	str	r3, [r7, #8]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	4b14      	ldr	r3, [pc, #80]	; (8009e88 <vPortFree+0xb8>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01e      	beq.n	8009e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d11a      	bne.n	8009e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	4b0e      	ldr	r3, [pc, #56]	; (8009e88 <vPortFree+0xb8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	43db      	mvns	r3, r3
 8009e52:	401a      	ands	r2, r3
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e58:	f7fe fbd4 	bl	8008604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <vPortFree+0xbc>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4413      	add	r3, r2
 8009e66:	4a09      	ldr	r2, [pc, #36]	; (8009e8c <vPortFree+0xbc>)
 8009e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e6a:	6938      	ldr	r0, [r7, #16]
 8009e6c:	f000 f874 	bl	8009f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e70:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <vPortFree+0xc0>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3301      	adds	r3, #1
 8009e76:	4a06      	ldr	r2, [pc, #24]	; (8009e90 <vPortFree+0xc0>)
 8009e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e7a:	f7fe fbd1 	bl	8008620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e7e:	bf00      	nop
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	240051b8 	.word	0x240051b8
 8009e8c:	240051a8 	.word	0x240051a8
 8009e90:	240051b4 	.word	0x240051b4

08009e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ea0:	4b27      	ldr	r3, [pc, #156]	; (8009f40 <prvHeapInit+0xac>)
 8009ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f003 0307 	and.w	r3, r3, #7
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00c      	beq.n	8009ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3307      	adds	r3, #7
 8009eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f023 0307 	bic.w	r3, r3, #7
 8009eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	4a1f      	ldr	r2, [pc, #124]	; (8009f40 <prvHeapInit+0xac>)
 8009ec4:	4413      	add	r3, r2
 8009ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ecc:	4a1d      	ldr	r2, [pc, #116]	; (8009f44 <prvHeapInit+0xb0>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ed2:	4b1c      	ldr	r3, [pc, #112]	; (8009f44 <prvHeapInit+0xb0>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	4413      	add	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ee0:	2208      	movs	r2, #8
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0307 	bic.w	r3, r3, #7
 8009eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4a15      	ldr	r2, [pc, #84]	; (8009f48 <prvHeapInit+0xb4>)
 8009ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ef6:	4b14      	ldr	r3, [pc, #80]	; (8009f48 <prvHeapInit+0xb4>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2200      	movs	r2, #0
 8009efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009efe:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <prvHeapInit+0xb4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	1ad2      	subs	r2, r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f14:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <prvHeapInit+0xb4>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	4a0a      	ldr	r2, [pc, #40]	; (8009f4c <prvHeapInit+0xb8>)
 8009f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	4a09      	ldr	r2, [pc, #36]	; (8009f50 <prvHeapInit+0xbc>)
 8009f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f2c:	4b09      	ldr	r3, [pc, #36]	; (8009f54 <prvHeapInit+0xc0>)
 8009f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f32:	601a      	str	r2, [r3, #0]
}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	2400159c 	.word	0x2400159c
 8009f44:	2400519c 	.word	0x2400519c
 8009f48:	240051a4 	.word	0x240051a4
 8009f4c:	240051ac 	.word	0x240051ac
 8009f50:	240051a8 	.word	0x240051a8
 8009f54:	240051b8 	.word	0x240051b8

08009f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f60:	4b28      	ldr	r3, [pc, #160]	; (800a004 <prvInsertBlockIntoFreeList+0xac>)
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e002      	b.n	8009f6c <prvInsertBlockIntoFreeList+0x14>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d8f7      	bhi.n	8009f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	4413      	add	r3, r2
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d108      	bne.n	8009f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	441a      	add	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	441a      	add	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d118      	bne.n	8009fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	4b15      	ldr	r3, [pc, #84]	; (800a008 <prvInsertBlockIntoFreeList+0xb0>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d00d      	beq.n	8009fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	441a      	add	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	e008      	b.n	8009fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <prvInsertBlockIntoFreeList+0xb0>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	e003      	b.n	8009fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d002      	beq.n	8009ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ff6:	bf00      	nop
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	2400519c 	.word	0x2400519c
 800a008:	240051a4 	.word	0x240051a4

0800a00c <memset>:
 800a00c:	4402      	add	r2, r0
 800a00e:	4603      	mov	r3, r0
 800a010:	4293      	cmp	r3, r2
 800a012:	d100      	bne.n	800a016 <memset+0xa>
 800a014:	4770      	bx	lr
 800a016:	f803 1b01 	strb.w	r1, [r3], #1
 800a01a:	e7f9      	b.n	800a010 <memset+0x4>

0800a01c <__libc_init_array>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4d0d      	ldr	r5, [pc, #52]	; (800a054 <__libc_init_array+0x38>)
 800a020:	4c0d      	ldr	r4, [pc, #52]	; (800a058 <__libc_init_array+0x3c>)
 800a022:	1b64      	subs	r4, r4, r5
 800a024:	10a4      	asrs	r4, r4, #2
 800a026:	2600      	movs	r6, #0
 800a028:	42a6      	cmp	r6, r4
 800a02a:	d109      	bne.n	800a040 <__libc_init_array+0x24>
 800a02c:	4d0b      	ldr	r5, [pc, #44]	; (800a05c <__libc_init_array+0x40>)
 800a02e:	4c0c      	ldr	r4, [pc, #48]	; (800a060 <__libc_init_array+0x44>)
 800a030:	f000 f826 	bl	800a080 <_init>
 800a034:	1b64      	subs	r4, r4, r5
 800a036:	10a4      	asrs	r4, r4, #2
 800a038:	2600      	movs	r6, #0
 800a03a:	42a6      	cmp	r6, r4
 800a03c:	d105      	bne.n	800a04a <__libc_init_array+0x2e>
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	f855 3b04 	ldr.w	r3, [r5], #4
 800a044:	4798      	blx	r3
 800a046:	3601      	adds	r6, #1
 800a048:	e7ee      	b.n	800a028 <__libc_init_array+0xc>
 800a04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a04e:	4798      	blx	r3
 800a050:	3601      	adds	r6, #1
 800a052:	e7f2      	b.n	800a03a <__libc_init_array+0x1e>
 800a054:	0800a160 	.word	0x0800a160
 800a058:	0800a160 	.word	0x0800a160
 800a05c:	0800a160 	.word	0x0800a160
 800a060:	0800a164 	.word	0x0800a164

0800a064 <memcpy>:
 800a064:	440a      	add	r2, r1
 800a066:	4291      	cmp	r1, r2
 800a068:	f100 33ff 	add.w	r3, r0, #4294967295
 800a06c:	d100      	bne.n	800a070 <memcpy+0xc>
 800a06e:	4770      	bx	lr
 800a070:	b510      	push	{r4, lr}
 800a072:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a07a:	4291      	cmp	r1, r2
 800a07c:	d1f9      	bne.n	800a072 <memcpy+0xe>
 800a07e:	bd10      	pop	{r4, pc}

0800a080 <_init>:
 800a080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a082:	bf00      	nop
 800a084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a086:	bc08      	pop	{r3}
 800a088:	469e      	mov	lr, r3
 800a08a:	4770      	bx	lr

0800a08c <_fini>:
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	bf00      	nop
 800a090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a092:	bc08      	pop	{r3}
 800a094:	469e      	mov	lr, r3
 800a096:	4770      	bx	lr
