
weatherballoon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d558  0800d558  0001d558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d628  0800d628  0001d628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800d630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800d694  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800d6f4  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005370  24000124  0800d754  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005494  0800d754  00025494  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020152  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d11d  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d68  00000000  00000000  0004d2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fe8  00000000  00000000  00052020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018db  00000000  00000000  00054008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003b574  00000000  00000000  000558e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000276ff  00000000  00000000  00090e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00179d7d  00000000  00000000  000b8556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008cc0  00000000  00000000  002322d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0023af94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d540 	.word	0x0800d540

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800d540 	.word	0x0800d540

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <getLocation>:
 * @param[in] hspi: SPI handle to grab data from.
 * @param[out] pos: The Position variable to store data in.
 *
 * @return The status of the SPI peripheral.
*/
HAL_StatusTypeDef getLocation(SPI_HandleTypeDef* hspi, Position* pos) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
    return HAL_SPI_Receive_DMA(hspi, (uint8_t*)pos, sizeof(Position));
 80005e6:	220c      	movs	r2, #12
 80005e8:	6839      	ldr	r1, [r7, #0]
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f007 fc96 	bl	8007f1c <HAL_SPI_Receive_DMA>
 80005f0:	4603      	mov	r3, r0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <getLocationClbk>:
/**
 * @brief A callback function that reads the big endian data from the APRS
 * 
 * @param[in,out] hspi: SPI handle to grab data from.
 */
void getLocationClbk(SPI_HandleTypeDef* hspi) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b084      	sub	sp, #16
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; ++i) {
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	e00a      	b.n	800061e <getLocationClbk+0x24>
        readBE4SPI(&hspi->pRxBuffPtr[i*4]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	0092      	lsls	r2, r2, #2
 8000610:	4413      	add	r3, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f80b 	bl	800062e <readBE4SPI>
    for (int i = 0; i < 3; ++i) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b02      	cmp	r3, #2
 8000622:	ddf1      	ble.n	8000608 <getLocationClbk+0xe>
    }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <readBE4SPI>:
/**
 * @brief Helper function to read big endian 4 byte data types.
 * 
 * @param[in,out] data: Pointer to 4 byte buffer.
 */
static void readBE4SPI(uint8_t* data) {
 800062e:	b480      	push	{r7}
 8000630:	b085      	sub	sp, #20
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
    uint32_t temp;

    temp = (((uint32_t)((uint32_t)data[0]) << 24) | ((uint32_t)((uint32_t)data[1]) << 16) | ((uint32_t)((uint32_t)data[2]) << 8) | ((uint32_t)((uint32_t)data[3]) << 0));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	061a      	lsls	r2, r3, #24
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	041b      	lsls	r3, r3, #16
 8000644:	431a      	orrs	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3302      	adds	r3, #2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	4313      	orrs	r3, r2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	3203      	adds	r2, #3
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	4313      	orrs	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fa      	ldr	r2, [r7, #12]

    memcpy(data, &temp, 4);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <cutBalloon>:
/* USER CODE BEGIN 0 */




void cutBalloon(){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	//set to pin to high HAL FUNCTION WITH PIN
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <cutBalloon+0x14>)
 8000676:	f004 fa2f 	bl	8004ad8 <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	58020400 	.word	0x58020400

08000684 <lowPowerMode>:

void lowPowerMode(){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	int time10Min = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
    //stopTransmitter();
	//log data()
    while(1){
    	if(HAL_GetTick() - time10Min >= 600000){
 800068e:	f000 fff5 	bl	800167c <HAL_GetTick>
 8000692:	4602      	mov	r2, r0
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <lowPowerMode+0x24>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d9f7      	bls.n	800068e <lowPowerMode+0xa>
    		time10Min = HAL_GetTick();
 800069e:	f000 ffed 	bl	800167c <HAL_GetTick>
 80006a2:	4603      	mov	r3, r0
 80006a4:	607b      	str	r3, [r7, #4]
    	if(HAL_GetTick() - time10Min >= 600000){
 80006a6:	e7f2      	b.n	800068e <lowPowerMode+0xa>
 80006a8:	000927bf 	.word	0x000927bf

080006ac <checkBattery>:

    	}
    }
}

void checkBattery(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	float batteryVoltage = 0;
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]

		if (batteryVoltage <= powMin){
 80006b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80006bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80006c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c8:	d900      	bls.n	80006cc <checkBattery+0x20>
			lowPowerMode();
		}
}
 80006ca:	e001      	b.n	80006d0 <checkBattery+0x24>
			lowPowerMode();
 80006cc:	f7ff ffda 	bl	8000684 <lowPowerMode>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <checkAltitude>:



int checkAltitude(float altitude){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	ed87 0a01 	vstr	s0, [r7, #4]
	if (altitude < prevAltitude){
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <checkAltitude+0x50>)
 80006e4:	edd3 7a00 	vldr	s15, [r3]
 80006e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80006ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f4:	d504      	bpl.n	8000700 <checkAltitude+0x28>
		descendFlag+= 1;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <checkAltitude+0x54>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a0b      	ldr	r2, [pc, #44]	; (800072c <checkAltitude+0x54>)
 80006fe:	6013      	str	r3, [r2, #0]
	}
    if (altitude >= maxAltitude){
 8000700:	edd7 7a01 	vldr	s15, [r7, #4]
 8000704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070c:	db01      	blt.n	8000712 <checkAltitude+0x3a>
        return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e003      	b.n	800071a <checkAltitude+0x42>
    }
    prevAltitude = altitude;
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <checkAltitude+0x50>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6013      	str	r3, [r2, #0]
    return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000144 	.word	0x24000144
 800072c:	24000140 	.word	0x24000140

08000730 <checkLocation>:


void checkLocation(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
    // getLongitude(), getLatitude(), getAltitude(), and locationDisplay() are placeholders
   // int longitude = function.longitude();
   // int latitude = function.latitude();
   // int altitude = function.altitude();

    float longitude = 0;
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
    float latitude = 0;
 800073c:	f04f 0300 	mov.w	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
    float altitude = 0;
 8000742:	f04f 0300 	mov.w	r3, #0
 8000746:	607b      	str	r3, [r7, #4]


    if (longitude < maxLongitude && longitude > minLongitude){
 8000748:	edd7 7a03 	vldr	s15, [r7, #12]
 800074c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	d51e      	bpl.n	8000794 <checkLocation+0x64>
 8000756:	edd7 7a03 	vldr	s15, [r7, #12]
 800075a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000762:	dd17      	ble.n	8000794 <checkLocation+0x64>
        if(latitude < maxLatitude && latitude > minLatitude){
 8000764:	edd7 7a02 	vldr	s15, [r7, #8]
 8000768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000770:	d510      	bpl.n	8000794 <checkLocation+0x64>
 8000772:	edd7 7a02 	vldr	s15, [r7, #8]
 8000776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800077a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077e:	dd09      	ble.n	8000794 <checkLocation+0x64>
            if(checkAltitude(altitude) == 1){
 8000780:	ed97 0a01 	vldr	s0, [r7, #4]
 8000784:	f7ff ffa8 	bl	80006d8 <checkAltitude>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d105      	bne.n	800079a <checkLocation+0x6a>
                cutBalloon();
 800078e:	f7ff ff6d 	bl	800066c <cutBalloon>
            }
            return;
 8000792:	e002      	b.n	800079a <checkLocation+0x6a>
        }
    }

    cutBalloon();
 8000794:	f7ff ff6a 	bl	800066c <cutBalloon>
 8000798:	e000      	b.n	800079c <checkLocation+0x6c>
            return;
 800079a:	bf00      	nop
}
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 ff18 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f84c 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 fa0e 	bl	8000bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b4:	f000 f9e4 	bl	8000b80 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007b8:	f000 f964 	bl	8000a84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007bc:	f000 f9ae 	bl	8000b1c <MX_USB_OTG_FS_PCD_Init>
  MX_ETH_Init();
 80007c0:	f000 f8c2 	bl	8000948 <MX_ETH_Init>
  MX_SPI1_Init();
 80007c4:	f000 f90c 	bl	80009e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  getLocation(&hspi1, &position);
 80007c8:	4913      	ldr	r1, [pc, #76]	; (8000818 <main+0x74>)
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <main+0x78>)
 80007cc:	f7ff ff06 	bl	80005dc <getLocation>
  HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_RX_COMPLETE_CB_ID, getLocationClbk);
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <main+0x7c>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <main+0x78>)
 80007d6:	f007 fae5 	bl	8007da4 <HAL_SPI_RegisterCallback>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007da:	f009 ff53 	bl	800a684 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of batteryTimer */
  batteryTimerHandle = osTimerNew(BatteryCallback, osTimerPeriodic, NULL, &batteryTimer_attributes);
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <main+0x80>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	2101      	movs	r1, #1
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <main+0x84>)
 80007e6:	f00a f83f 	bl	800a868 <osTimerNew>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a0f      	ldr	r2, [pc, #60]	; (800082c <main+0x88>)
 80007ee:	6013      	str	r3, [r2, #0]

  /* creation of descensionTimer */
  descensionTimerHandle = osTimerNew(DescensionCallback, osTimerPeriodic, NULL, &descensionTimer_attributes);
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <main+0x8c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	2101      	movs	r1, #1
 80007f6:	480f      	ldr	r0, [pc, #60]	; (8000834 <main+0x90>)
 80007f8:	f00a f836 	bl	800a868 <osTimerNew>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <main+0x94>)
 8000800:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PollingLoop */
  PollingLoopHandle = osThreadNew(StartPollingLoop, NULL, &PollingLoop_attributes);
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <main+0x98>)
 8000804:	2100      	movs	r1, #0
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <main+0x9c>)
 8000808:	f009 ff86 	bl	800a718 <osThreadNew>
 800080c:	4603      	mov	r3, r0
 800080e:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <main+0xa0>)
 8000810:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000812:	f009 ff5b 	bl	800a6cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000816:	e7fe      	b.n	8000816 <main+0x72>
 8000818:	24000908 	.word	0x24000908
 800081c:	24000230 	.word	0x24000230
 8000820:	080005fb 	.word	0x080005fb
 8000824:	0800d5c0 	.word	0x0800d5c0
 8000828:	08000de9 	.word	0x08000de9
 800082c:	24000900 	.word	0x24000900
 8000830:	0800d5d0 	.word	0x0800d5d0
 8000834:	08000dfd 	.word	0x08000dfd
 8000838:	24000904 	.word	0x24000904
 800083c:	0800d59c 	.word	0x0800d59c
 8000840:	08000d89 	.word	0x08000d89
 8000844:	240008fc 	.word	0x240008fc

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09c      	sub	sp, #112	; 0x70
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	224c      	movs	r2, #76	; 0x4c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f00c fd88 	bl	800d36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f00c fd82 	bl	800d36c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000868:	2002      	movs	r0, #2
 800086a:	f004 fa97 	bl	8004d9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b33      	ldr	r3, [pc, #204]	; (8000940 <SystemClock_Config+0xf8>)
 8000874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000876:	4a32      	ldr	r2, [pc, #200]	; (8000940 <SystemClock_Config+0xf8>)
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <SystemClock_Config+0xf8>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <SystemClock_Config+0xfc>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000890:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <SystemClock_Config+0xfc>)
 8000892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <SystemClock_Config+0xfc>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a4:	bf00      	nop
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <SystemClock_Config+0xfc>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b2:	d1f8      	bne.n	80008a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008b4:	2303      	movs	r3, #3
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008be:	2301      	movs	r3, #1
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008d2:	2318      	movs	r3, #24
 80008d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008da:	2304      	movs	r3, #4
 80008dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008e2:	230c      	movs	r3, #12
 80008e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 fa9c 	bl	8004e30 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008fe:	f000 fa99 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	233f      	movs	r3, #63	; 0x3f
 8000904:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2101      	movs	r1, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fedc 	bl	80056e4 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000932:	f000 fa7f 	bl	8000e34 <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3770      	adds	r7, #112	; 0x70
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	58000400 	.word	0x58000400
 8000944:	58024800 	.word	0x58024800

08000948 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_ETH_Init+0x80>)
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <MX_ETH_Init+0x84>)
 8000950:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_ETH_Init+0x88>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_ETH_Init+0x88>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_ETH_Init+0x88>)
 8000960:	22e1      	movs	r2, #225	; 0xe1
 8000962:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_ETH_Init+0x88>)
 8000966:	2200      	movs	r2, #0
 8000968:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_ETH_Init+0x88>)
 800096c:	2200      	movs	r2, #0
 800096e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_ETH_Init+0x88>)
 8000972:	2200      	movs	r2, #0
 8000974:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_ETH_Init+0x80>)
 8000978:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_ETH_Init+0x88>)
 800097a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_ETH_Init+0x80>)
 800097e:	2201      	movs	r2, #1
 8000980:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_ETH_Init+0x80>)
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_ETH_Init+0x8c>)
 8000986:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_ETH_Init+0x80>)
 800098a:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <MX_ETH_Init+0x90>)
 800098c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_ETH_Init+0x80>)
 8000990:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000994:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_ETH_Init+0x80>)
 8000998:	f003 faca 	bl	8003f30 <HAL_ETH_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009a2:	f000 fa47 	bl	8000e34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009a6:	2238      	movs	r2, #56	; 0x38
 80009a8:	2100      	movs	r1, #0
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_ETH_Init+0x94>)
 80009ac:	f00c fcde 	bl	800d36c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_ETH_Init+0x94>)
 80009b2:	2221      	movs	r2, #33	; 0x21
 80009b4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_ETH_Init+0x94>)
 80009b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009bc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_ETH_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	24000180 	.word	0x24000180
 80009cc:	40028000 	.word	0x40028000
 80009d0:	24000914 	.word	0x24000914
 80009d4:	240000c4 	.word	0x240000c4
 80009d8:	24000064 	.word	0x24000064
 80009dc:	24000148 	.word	0x24000148

080009e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_SPI1_Init+0x9c>)
 80009e6:	4a26      	ldr	r2, [pc, #152]	; (8000a80 <MX_SPI1_Init+0xa0>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_SPI1_Init+0x9c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_SPI1_Init+0x9c>)
 80009f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_SPI1_Init+0x9c>)
 80009fa:	2207      	movs	r2, #7
 80009fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_SPI1_Init+0x9c>)
 8000a68:	f007 f836 	bl	8007ad8 <HAL_SPI_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_SPI1_Init+0x96>
  {
    Error_Handler();
 8000a72:	f000 f9df 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000230 	.word	0x24000230
 8000a80:	40013000 	.word	0x40013000

08000a84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000a8a:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <MX_USART3_UART_Init+0x94>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000ace:	f008 f9b5 	bl	8008e3c <HAL_UART_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ad8:	f000 f9ac 	bl	8000e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000adc:	2100      	movs	r1, #0
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000ae0:	f009 f9b7 	bl	8009e52 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aea:	f000 f9a3 	bl	8000e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4808      	ldr	r0, [pc, #32]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000af2:	f009 f9ec 	bl	8009ece <HAL_UARTEx_SetRxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000afc:	f000 f99a 	bl	8000e34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_USART3_UART_Init+0x90>)
 8000b02:	f009 f96d 	bl	8009de0 <HAL_UARTEx_DisableFifoMode>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b0c:	f000 f992 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2400035c 	.word	0x2400035c
 8000b18:	40004800 	.word	0x40004800

08000b1c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b28:	2209      	movs	r2, #9
 8000b2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	f003 ffd1 	bl	8004b0a <HAL_PCD_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b6e:	f000 f961 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	240003f0 	.word	0x240003f0
 8000b7c:	40080000 	.word	0x40080000

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_DMA_Init+0x4c>)
 8000b88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b8c:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <MX_DMA_Init+0x4c>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <MX_DMA_Init+0x4c>)
 8000b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2105      	movs	r1, #5
 8000ba8:	200b      	movs	r0, #11
 8000baa:	f000 fe6f 	bl	800188c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bae:	200b      	movs	r0, #11
 8000bb0:	f000 fe86 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2105      	movs	r1, #5
 8000bb8:	2066      	movs	r0, #102	; 0x66
 8000bba:	f000 fe67 	bl	800188c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000bbe:	2066      	movs	r0, #102	; 0x66
 8000bc0:	f000 fe7e 	bl	80018c0 <HAL_NVIC_EnableIRQ>

}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58024400 	.word	0x58024400

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a60      	ldr	r2, [pc, #384]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b5e      	ldr	r3, [pc, #376]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c04:	4b5a      	ldr	r3, [pc, #360]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a59      	ldr	r2, [pc, #356]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a51      	ldr	r2, [pc, #324]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b4f      	ldr	r3, [pc, #316]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a4a      	ldr	r2, [pc, #296]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b44      	ldr	r3, [pc, #272]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a42      	ldr	r2, [pc, #264]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	4a3b      	ldr	r2, [pc, #236]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9a:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a33      	ldr	r2, [pc, #204]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cbe:	482d      	ldr	r0, [pc, #180]	; (8000d74 <MX_GPIO_Init+0x1a4>)
 8000cc0:	f003 ff0a 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cca:	482b      	ldr	r0, [pc, #172]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000ccc:	f003 ff04 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4829      	ldr	r0, [pc, #164]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000cd6:	f003 feff 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4824      	ldr	r0, [pc, #144]	; (8000d80 <MX_GPIO_Init+0x1b0>)
 8000cf0:	f003 fd42 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cf4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4819      	ldr	r0, [pc, #100]	; (8000d74 <MX_GPIO_Init+0x1a4>)
 8000d0e:	f003 fd33 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_GPIO_Init+0x1a8>)
 8000d2c:	f003 fd24 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <MX_GPIO_Init+0x1b4>)
 8000d46:	f003 fd17 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000d62:	f003 fd09 	bl	8004778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d66:	bf00      	nop
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020400 	.word	0x58020400
 8000d78:	58020c00 	.word	0x58020c00
 8000d7c:	58021000 	.word	0x58021000
 8000d80:	58020800 	.word	0x58020800
 8000d84:	58021800 	.word	0x58021800

08000d88 <StartPollingLoop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPollingLoop */
void StartPollingLoop(void *argument)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int time1Min = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
	int time10Min = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
	for(;;){

		if(HAL_GetTick() - time1Min >= 60000){
 8000d98:	f000 fc70 	bl	800167c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d907      	bls.n	8000dba <StartPollingLoop+0x32>
		time1Min = HAL_GetTick();
 8000daa:	f000 fc67 	bl	800167c <HAL_GetTick>
 8000dae:	4603      	mov	r3, r0
 8000db0:	60fb      	str	r3, [r7, #12]
		checkBattery();
 8000db2:	f7ff fc7b 	bl	80006ac <checkBattery>
		checkLocation();
 8000db6:	f7ff fcbb 	bl	8000730 <checkLocation>
		//logData(longitude, latitude, altitude);
	}

	if(HAL_GetTick() - time10Min >= 600000){
 8000dba:	f000 fc5f 	bl	800167c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <StartPollingLoop+0x58>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d9e6      	bls.n	8000d98 <StartPollingLoop+0x10>
		time10Min = HAL_GetTick();
 8000dca:	f000 fc57 	bl	800167c <HAL_GetTick>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	60bb      	str	r3, [r7, #8]
		if(descendFlag >= 10){
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <StartPollingLoop+0x5c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b09      	cmp	r3, #9
 8000dd8:	ddde      	ble.n	8000d98 <StartPollingLoop+0x10>
				cutBalloon();
 8000dda:	f7ff fc47 	bl	800066c <cutBalloon>
		if(HAL_GetTick() - time1Min >= 60000){
 8000dde:	e7db      	b.n	8000d98 <StartPollingLoop+0x10>
 8000de0:	000927bf 	.word	0x000927bf
 8000de4:	24000140 	.word	0x24000140

08000de8 <BatteryCallback>:
  /* USER CODE END 5 */
}

/* BatteryCallback function */
void BatteryCallback(void *argument)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BatteryCallback */

  /* USER CODE END BatteryCallback */
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DescensionCallback>:

/* DescensionCallback function */
void DescensionCallback(void *argument)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DescensionCallback */

  /* USER CODE END DescensionCallback */
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e22:	f000 fc17 	bl	8001654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40001000 	.word	0x40001000

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_MspInit+0x38>)
 8000e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_MspInit+0x38>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_MspInit+0x38>)
 8000e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	210f      	movs	r1, #15
 8000e68:	f06f 0001 	mvn.w	r0, #1
 8000e6c:	f000 fd0e 	bl	800188c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400

08000e7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a59      	ldr	r2, [pc, #356]	; (8001000 <HAL_ETH_MspInit+0x184>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	f040 80ab 	bne.w	8000ff6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ea0:	4b58      	ldr	r3, [pc, #352]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea6:	4a57      	ldr	r2, [pc, #348]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eb0:	4b54      	ldr	r3, [pc, #336]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ebe:	4b51      	ldr	r3, [pc, #324]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec4:	4a4f      	ldr	r2, [pc, #316]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ece:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000edc:	4b49      	ldr	r3, [pc, #292]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ee2:	4a48      	ldr	r2, [pc, #288]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eec:	4b45      	ldr	r3, [pc, #276]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b42      	ldr	r3, [pc, #264]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	4a40      	ldr	r2, [pc, #256]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a39      	ldr	r2, [pc, #228]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b36      	ldr	r3, [pc, #216]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a31      	ldr	r2, [pc, #196]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f54:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f72:	2332      	movs	r3, #50	; 0x32
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f82:	230b      	movs	r3, #11
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481e      	ldr	r0, [pc, #120]	; (8001008 <HAL_ETH_MspInit+0x18c>)
 8000f8e:	f003 fbf3 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f92:	2386      	movs	r3, #134	; 0x86
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa2:	230b      	movs	r3, #11
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4817      	ldr	r0, [pc, #92]	; (800100c <HAL_ETH_MspInit+0x190>)
 8000fae:	f003 fbe3 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc4:	230b      	movs	r3, #11
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4810      	ldr	r0, [pc, #64]	; (8001010 <HAL_ETH_MspInit+0x194>)
 8000fd0:	f003 fbd2 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4808      	ldr	r0, [pc, #32]	; (8001014 <HAL_ETH_MspInit+0x198>)
 8000ff2:	f003 fbc1 	bl	8004778 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3738      	adds	r7, #56	; 0x38
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40028000 	.word	0x40028000
 8001004:	58024400 	.word	0x58024400
 8001008:	58020800 	.word	0x58020800
 800100c:	58020000 	.word	0x58020000
 8001010:	58020400 	.word	0x58020400
 8001014:	58021800 	.word	0x58021800

08001018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ba      	sub	sp, #232	; 0xe8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	22c0      	movs	r2, #192	; 0xc0
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00c f997 	bl	800d36c <memset>
  if(hspi->Instance==SPI1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a41      	ldr	r2, [pc, #260]	; (8001148 <HAL_SPI_MspInit+0x130>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d17a      	bne.n	800113e <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001054:	2300      	movs	r3, #0
 8001056:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f004 ff0f 	bl	8005e80 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001068:	f7ff fee4 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <HAL_SPI_MspInit+0x134>)
 800106e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001072:	4a36      	ldr	r2, [pc, #216]	; (800114c <HAL_SPI_MspInit+0x134>)
 8001074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001078:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <HAL_SPI_MspInit+0x134>)
 800107e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_SPI_MspInit+0x134>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a2e      	ldr	r2, [pc, #184]	; (800114c <HAL_SPI_MspInit+0x134>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_SPI_MspInit+0x134>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80010a8:	2328      	movs	r3, #40	; 0x28
 80010aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c0:	2305      	movs	r3, #5
 80010c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4820      	ldr	r0, [pc, #128]	; (8001150 <HAL_SPI_MspInit+0x138>)
 80010ce:	f003 fb53 	bl	8004778 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <HAL_SPI_MspInit+0x140>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 80010da:	2225      	movs	r2, #37	; 0x25
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 8001100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001104:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001112:	4810      	ldr	r0, [pc, #64]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 8001114:	f000 fbe2 	bl	80018dc <HAL_DMA_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800111e:	f7ff fe89 	bl	8000e34 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 8001126:	67da      	str	r2, [r3, #124]	; 0x7c
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_SPI_MspInit+0x13c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2105      	movs	r1, #5
 8001132:	2023      	movs	r0, #35	; 0x23
 8001134:	f000 fbaa 	bl	800188c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001138:	2023      	movs	r0, #35	; 0x23
 800113a:	f000 fbc1 	bl	80018c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	37e8      	adds	r7, #232	; 0xe8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40013000 	.word	0x40013000
 800114c:	58024400 	.word	0x58024400
 8001150:	58020400 	.word	0x58020400
 8001154:	240002e4 	.word	0x240002e4
 8001158:	40020010 	.word	0x40020010

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ba      	sub	sp, #232	; 0xe8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	22c0      	movs	r2, #192	; 0xc0
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00c f8f5 	bl	800d36c <memset>
  if(huart->Instance==USART3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_UART_MspInit+0xc8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d146      	bne.n	800121a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800118c:	f04f 0202 	mov.w	r2, #2
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 fe6c 	bl	8005e80 <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011ae:	f7ff fe41 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_UART_MspInit+0xcc>)
 80011b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <HAL_UART_MspInit+0xcc>)
 80011ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_UART_MspInit+0xcc>)
 80011c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0xcc>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_UART_MspInit+0xcc>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_UART_MspInit+0xcc>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001208:	2307      	movs	r3, #7
 800120a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_UART_MspInit+0xd0>)
 8001216:	f003 faaf 	bl	8004778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	37e8      	adds	r7, #232	; 0xe8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40004800 	.word	0x40004800
 8001228:	58024400 	.word	0x58024400
 800122c:	58020c00 	.word	0x58020c00

08001230 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ba      	sub	sp, #232	; 0xe8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	22c0      	movs	r2, #192	; 0xc0
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00c f88b 	bl	800d36c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_PCD_MspInit+0xec>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d159      	bne.n	8001314 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001260:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800126c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fe01 	bl	8005e80 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001284:	f7ff fdd6 	bl	8000e34 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001288:	f003 fdc2 	bl	8004e10 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_PCD_MspInit+0xf0>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <HAL_PCD_MspInit+0xf0>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_PCD_MspInit+0xf0>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012aa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012c4:	230a      	movs	r3, #10
 80012c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4814      	ldr	r0, [pc, #80]	; (8001324 <HAL_PCD_MspInit+0xf4>)
 80012d2:	f003 fa51 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <HAL_PCD_MspInit+0xf4>)
 80012f2:	f003 fa41 	bl	8004778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_PCD_MspInit+0xf0>)
 80012f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_PCD_MspInit+0xf0>)
 80012fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001302:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_PCD_MspInit+0xf0>)
 8001308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800130c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	37e8      	adds	r7, #232	; 0xe8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40080000 	.word	0x40080000
 8001320:	58024400 	.word	0x58024400
 8001324:	58020000 	.word	0x58020000

08001328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b090      	sub	sp, #64	; 0x40
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	d827      	bhi.n	8001386 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001336:	2200      	movs	r2, #0
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	2036      	movs	r0, #54	; 0x36
 800133c:	f000 faa6 	bl	800188c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001340:	2036      	movs	r0, #54	; 0x36
 8001342:	f000 fabd 	bl	80018c0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <HAL_InitTick+0xc4>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_InitTick+0xc8>)
 800134e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <HAL_InitTick+0xc8>)
 8001354:	f043 0310 	orr.w	r3, r3, #16
 8001358:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_InitTick+0xc8>)
 800135e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136a:	f107 0210 	add.w	r2, r7, #16
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fd41 	bl	8005dfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001380:	2b00      	cmp	r3, #0
 8001382:	d106      	bne.n	8001392 <HAL_InitTick+0x6a>
 8001384:	e001      	b.n	800138a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e02b      	b.n	80013e2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800138a:	f004 fd0b 	bl	8005da4 <HAL_RCC_GetPCLK1Freq>
 800138e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001390:	e004      	b.n	800139c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001392:	f004 fd07 	bl	8005da4 <HAL_RCC_GetPCLK1Freq>
 8001396:	4603      	mov	r3, r0
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800139c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <HAL_InitTick+0xcc>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	3b01      	subs	r3, #1
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <HAL_InitTick+0xd0>)
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_InitTick+0xd4>)
 80013ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_InitTick+0xd0>)
 80013b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_InitTick+0xd0>)
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_InitTick+0xd0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_InitTick+0xd0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013ca:	480b      	ldr	r0, [pc, #44]	; (80013f8 <HAL_InitTick+0xd0>)
 80013cc:	f007 fa5d 	bl	800888a <HAL_TIM_Base_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d104      	bne.n	80013e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <HAL_InitTick+0xd0>)
 80013d8:	f007 fab8 	bl	800894c <HAL_TIM_Base_Start_IT>
 80013dc:	4603      	mov	r3, r0
 80013de:	e000      	b.n	80013e2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3740      	adds	r7, #64	; 0x40
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	24000008 	.word	0x24000008
 80013f0:	58024400 	.word	0x58024400
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	2400091c 	.word	0x2400091c
 80013fc:	40001000 	.word	0x40001000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA1_Stream0_IRQHandler+0x10>)
 8001432:	f001 fa5f 	bl	80028f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	240002e4 	.word	0x240002e4

08001440 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <SPI1_IRQHandler+0x10>)
 8001446:	f006 febb 	bl	80081c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	24000230 	.word	0x24000230

08001454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <TIM6_DAC_IRQHandler+0x10>)
 800145a:	f007 faef 	bl	8008a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2400091c 	.word	0x2400091c

08001468 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <SystemInit+0xe4>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a36      	ldr	r2, [pc, #216]	; (800155c <SystemInit+0xe4>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <SystemInit+0xe8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	2b06      	cmp	r3, #6
 8001496:	d807      	bhi.n	80014a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <SystemInit+0xe8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 030f 	bic.w	r3, r3, #15
 80014a0:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <SystemInit+0xe8>)
 80014a2:	f043 0307 	orr.w	r3, r3, #7
 80014a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <SystemInit+0xec>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a2d      	ldr	r2, [pc, #180]	; (8001564 <SystemInit+0xec>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <SystemInit+0xec>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <SystemInit+0xec>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4929      	ldr	r1, [pc, #164]	; (8001564 <SystemInit+0xec>)
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <SystemInit+0xf0>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <SystemInit+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <SystemInit+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 030f 	bic.w	r3, r3, #15
 80014da:	4a21      	ldr	r2, [pc, #132]	; (8001560 <SystemInit+0xe8>)
 80014dc:	f043 0307 	orr.w	r3, r3, #7
 80014e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <SystemInit+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <SystemInit+0xec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <SystemInit+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <SystemInit+0xec>)
 80014f6:	4a1d      	ldr	r2, [pc, #116]	; (800156c <SystemInit+0xf4>)
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <SystemInit+0xec>)
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <SystemInit+0xf8>)
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <SystemInit+0xec>)
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <SystemInit+0xfc>)
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <SystemInit+0xec>)
 8001508:	2200      	movs	r2, #0
 800150a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <SystemInit+0xec>)
 800150e:	4a19      	ldr	r2, [pc, #100]	; (8001574 <SystemInit+0xfc>)
 8001510:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <SystemInit+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <SystemInit+0xec>)
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <SystemInit+0xfc>)
 800151c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <SystemInit+0xec>)
 8001520:	2200      	movs	r2, #0
 8001522:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <SystemInit+0xec>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <SystemInit+0xec>)
 800152a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <SystemInit+0xec>)
 8001532:	2200      	movs	r2, #0
 8001534:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <SystemInit+0x100>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <SystemInit+0x104>)
 800153c:	4013      	ands	r3, r2
 800153e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001542:	d202      	bcs.n	800154a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <SystemInit+0x108>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <SystemInit+0x10c>)
 800154c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001550:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	52002000 	.word	0x52002000
 8001564:	58024400 	.word	0x58024400
 8001568:	eaf6ed7f 	.word	0xeaf6ed7f
 800156c:	02020200 	.word	0x02020200
 8001570:	01ff0000 	.word	0x01ff0000
 8001574:	01010280 	.word	0x01010280
 8001578:	5c001000 	.word	0x5c001000
 800157c:	ffff0000 	.word	0xffff0000
 8001580:	51008108 	.word	0x51008108
 8001584:	52004000 	.word	0x52004000

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800158c:	f7ff ff74 	bl	8001478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b6:	f00b ff37 	bl	800d428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ba:	f7ff f8f3 	bl	80007a4 <main>
  bx  lr
 80015be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015c8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80015cc:	0800d630 	.word	0x0800d630
  ldr r2, =_sbss
 80015d0:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80015d4:	24005494 	.word	0x24005494

080015d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC3_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e2:	2003      	movs	r0, #3
 80015e4:	f000 f947 	bl	8001876 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015e8:	f004 fa32 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_Init+0x68>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	4913      	ldr	r1, [pc, #76]	; (8001648 <HAL_Init+0x6c>)
 80015fa:	5ccb      	ldrb	r3, [r1, r3]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_Init+0x68>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_Init+0x6c>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_Init+0x70>)
 800161e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_Init+0x74>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001626:	200f      	movs	r0, #15
 8001628:	f7ff fe7e 	bl	8001328 <HAL_InitTick>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e002      	b.n	800163c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001636:	f7ff fc03 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58024400 	.word	0x58024400
 8001648:	0800d5e0 	.word	0x0800d5e0
 800164c:	24000004 	.word	0x24000004
 8001650:	24000000 	.word	0x24000000

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2400000c 	.word	0x2400000c
 8001678:	24000968 	.word	0x24000968

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	24000968 	.word	0x24000968

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2400000c 	.word	0x2400000c

080016dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetREVID+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0c1b      	lsrs	r3, r3, #16
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	5c001000 	.word	0x5c001000

080016f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001704:	4904      	ldr	r1, [pc, #16]	; (8001718 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	58000400 	.word	0x58000400

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <__NVIC_SetPriorityGrouping+0x40>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	4313      	orrs	r3, r2
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x40>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	05fa0000 	.word	0x05fa0000

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <__NVIC_EnableIRQ+0x38>)
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff4c 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800189a:	f7ff ff63 	bl	8001764 <__NVIC_GetPriorityGrouping>
 800189e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	6978      	ldr	r0, [r7, #20]
 80018a6:	f7ff ffb3 	bl	8001810 <NVIC_EncodePriority>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff82 	bl	80017bc <__NVIC_SetPriority>
}
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff56 	bl	8001780 <__NVIC_EnableIRQ>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff feca 	bl	800167c <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e316      	b.n	8001f22 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a66      	ldr	r2, [pc, #408]	; (8001a94 <HAL_DMA_Init+0x1b8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d04a      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <HAL_DMA_Init+0x1bc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d045      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a63      	ldr	r2, [pc, #396]	; (8001a9c <HAL_DMA_Init+0x1c0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d040      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a62      	ldr	r2, [pc, #392]	; (8001aa0 <HAL_DMA_Init+0x1c4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d03b      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a60      	ldr	r2, [pc, #384]	; (8001aa4 <HAL_DMA_Init+0x1c8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d036      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a5f      	ldr	r2, [pc, #380]	; (8001aa8 <HAL_DMA_Init+0x1cc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d031      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5d      	ldr	r2, [pc, #372]	; (8001aac <HAL_DMA_Init+0x1d0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d02c      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5c      	ldr	r2, [pc, #368]	; (8001ab0 <HAL_DMA_Init+0x1d4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d027      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_DMA_Init+0x1d8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d022      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a59      	ldr	r2, [pc, #356]	; (8001ab8 <HAL_DMA_Init+0x1dc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d01d      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a57      	ldr	r2, [pc, #348]	; (8001abc <HAL_DMA_Init+0x1e0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d018      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <HAL_DMA_Init+0x1e4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a54      	ldr	r2, [pc, #336]	; (8001ac4 <HAL_DMA_Init+0x1e8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00e      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a53      	ldr	r2, [pc, #332]	; (8001ac8 <HAL_DMA_Init+0x1ec>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a51      	ldr	r2, [pc, #324]	; (8001acc <HAL_DMA_Init+0x1f0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d004      	beq.n	8001994 <HAL_DMA_Init+0xb8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a50      	ldr	r2, [pc, #320]	; (8001ad0 <HAL_DMA_Init+0x1f4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_DMA_Init+0xbc>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_DMA_Init+0xbe>
 8001998:	2300      	movs	r3, #0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 813b 	beq.w	8001c16 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a37      	ldr	r2, [pc, #220]	; (8001a94 <HAL_DMA_Init+0x1b8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d04a      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a36      	ldr	r2, [pc, #216]	; (8001a98 <HAL_DMA_Init+0x1bc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d045      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <HAL_DMA_Init+0x1c0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d040      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a33      	ldr	r2, [pc, #204]	; (8001aa0 <HAL_DMA_Init+0x1c4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d03b      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <HAL_DMA_Init+0x1c8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d036      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a30      	ldr	r2, [pc, #192]	; (8001aa8 <HAL_DMA_Init+0x1cc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d031      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <HAL_DMA_Init+0x1d0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d02c      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <HAL_DMA_Init+0x1d4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d027      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <HAL_DMA_Init+0x1d8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d022      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a2a      	ldr	r2, [pc, #168]	; (8001ab8 <HAL_DMA_Init+0x1dc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d01d      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a28      	ldr	r2, [pc, #160]	; (8001abc <HAL_DMA_Init+0x1e0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d018      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <HAL_DMA_Init+0x1e4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d013      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <HAL_DMA_Init+0x1e8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00e      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_DMA_Init+0x1ec>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d009      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a22      	ldr	r2, [pc, #136]	; (8001acc <HAL_DMA_Init+0x1f0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d004      	beq.n	8001a50 <HAL_DMA_Init+0x174>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <HAL_DMA_Init+0x1f4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d108      	bne.n	8001a62 <HAL_DMA_Init+0x186>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_DMA_Init+0x196>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a72:	e02f      	b.n	8001ad4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a74:	f7ff fe02 	bl	800167c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d928      	bls.n	8001ad4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2220      	movs	r2, #32
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e246      	b.n	8001f22 <HAL_DMA_Init+0x646>
 8001a94:	40020010 	.word	0x40020010
 8001a98:	40020028 	.word	0x40020028
 8001a9c:	40020040 	.word	0x40020040
 8001aa0:	40020058 	.word	0x40020058
 8001aa4:	40020070 	.word	0x40020070
 8001aa8:	40020088 	.word	0x40020088
 8001aac:	400200a0 	.word	0x400200a0
 8001ab0:	400200b8 	.word	0x400200b8
 8001ab4:	40020410 	.word	0x40020410
 8001ab8:	40020428 	.word	0x40020428
 8001abc:	40020440 	.word	0x40020440
 8001ac0:	40020458 	.word	0x40020458
 8001ac4:	40020470 	.word	0x40020470
 8001ac8:	40020488 	.word	0x40020488
 8001acc:	400204a0 	.word	0x400204a0
 8001ad0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1c8      	bne.n	8001a74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <HAL_DMA_Init+0x420>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001afa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d107      	bne.n	8001b38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4313      	orrs	r3, r2
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b38:	4b71      	ldr	r3, [pc, #452]	; (8001d00 <HAL_DMA_Init+0x424>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b71      	ldr	r3, [pc, #452]	; (8001d04 <HAL_DMA_Init+0x428>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b44:	d328      	bcc.n	8001b98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b28      	cmp	r3, #40	; 0x28
 8001b4c:	d903      	bls.n	8001b56 <HAL_DMA_Init+0x27a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b2e      	cmp	r3, #46	; 0x2e
 8001b54:	d917      	bls.n	8001b86 <HAL_DMA_Init+0x2aa>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b5c:	d903      	bls.n	8001b66 <HAL_DMA_Init+0x28a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b42      	cmp	r3, #66	; 0x42
 8001b64:	d90f      	bls.n	8001b86 <HAL_DMA_Init+0x2aa>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b46      	cmp	r3, #70	; 0x46
 8001b6c:	d903      	bls.n	8001b76 <HAL_DMA_Init+0x29a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b48      	cmp	r3, #72	; 0x48
 8001b74:	d907      	bls.n	8001b86 <HAL_DMA_Init+0x2aa>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b4e      	cmp	r3, #78	; 0x4e
 8001b7c:	d905      	bls.n	8001b8a <HAL_DMA_Init+0x2ae>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b52      	cmp	r3, #82	; 0x52
 8001b84:	d801      	bhi.n	8001b8a <HAL_DMA_Init+0x2ae>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_DMA_Init+0x2b0>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f023 0307 	bic.w	r3, r3, #7
 8001bae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d117      	bne.n	8001bf2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f002 f821 	bl	8003c1c <DMA_CheckFifoParam>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2240      	movs	r2, #64	; 0x40
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e197      	b.n	8001f22 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f001 ff5c 	bl	8003ab8 <DMA_CalcBaseAndBitshift>
 8001c00:	4603      	mov	r3, r0
 8001c02:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	223f      	movs	r2, #63	; 0x3f
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	e0cd      	b.n	8001db2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a3b      	ldr	r2, [pc, #236]	; (8001d08 <HAL_DMA_Init+0x42c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <HAL_DMA_Init+0x38a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a39      	ldr	r2, [pc, #228]	; (8001d0c <HAL_DMA_Init+0x430>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01d      	beq.n	8001c66 <HAL_DMA_Init+0x38a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a38      	ldr	r2, [pc, #224]	; (8001d10 <HAL_DMA_Init+0x434>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d018      	beq.n	8001c66 <HAL_DMA_Init+0x38a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a36      	ldr	r2, [pc, #216]	; (8001d14 <HAL_DMA_Init+0x438>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_DMA_Init+0x38a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a35      	ldr	r2, [pc, #212]	; (8001d18 <HAL_DMA_Init+0x43c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00e      	beq.n	8001c66 <HAL_DMA_Init+0x38a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <HAL_DMA_Init+0x440>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d009      	beq.n	8001c66 <HAL_DMA_Init+0x38a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a32      	ldr	r2, [pc, #200]	; (8001d20 <HAL_DMA_Init+0x444>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_DMA_Init+0x38a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a30      	ldr	r2, [pc, #192]	; (8001d24 <HAL_DMA_Init+0x448>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_Init+0x38e>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_DMA_Init+0x390>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8097 	beq.w	8001da0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a24      	ldr	r2, [pc, #144]	; (8001d08 <HAL_DMA_Init+0x42c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d021      	beq.n	8001cc0 <HAL_DMA_Init+0x3e4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_DMA_Init+0x430>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01c      	beq.n	8001cc0 <HAL_DMA_Init+0x3e4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_DMA_Init+0x434>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d017      	beq.n	8001cc0 <HAL_DMA_Init+0x3e4>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_DMA_Init+0x438>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d012      	beq.n	8001cc0 <HAL_DMA_Init+0x3e4>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_DMA_Init+0x43c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_DMA_Init+0x3e4>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_DMA_Init+0x440>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d008      	beq.n	8001cc0 <HAL_DMA_Init+0x3e4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_DMA_Init+0x444>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA_Init+0x3e4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_DMA_Init+0x448>)
 8001cbe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_DMA_Init+0x44c>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d021      	beq.n	8001d2c <HAL_DMA_Init+0x450>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d102      	bne.n	8001cf6 <HAL_DMA_Init+0x41a>
 8001cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cf4:	e01b      	b.n	8001d2e <HAL_DMA_Init+0x452>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e019      	b.n	8001d2e <HAL_DMA_Init+0x452>
 8001cfa:	bf00      	nop
 8001cfc:	fe10803f 	.word	0xfe10803f
 8001d00:	5c001000 	.word	0x5c001000
 8001d04:	ffff0000 	.word	0xffff0000
 8001d08:	58025408 	.word	0x58025408
 8001d0c:	5802541c 	.word	0x5802541c
 8001d10:	58025430 	.word	0x58025430
 8001d14:	58025444 	.word	0x58025444
 8001d18:	58025458 	.word	0x58025458
 8001d1c:	5802546c 	.word	0x5802546c
 8001d20:	58025480 	.word	0x58025480
 8001d24:	58025494 	.word	0x58025494
 8001d28:	fffe000f 	.word	0xfffe000f
 8001d2c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d5c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b6e      	ldr	r3, [pc, #440]	; (8001f2c <HAL_DMA_Init+0x650>)
 8001d74:	4413      	add	r3, r2
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_DMA_Init+0x654>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	009a      	lsls	r2, r3, #2
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f001 fe97 	bl	8003ab8 <DMA_CalcBaseAndBitshift>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	2201      	movs	r2, #1
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	e008      	b.n	8001db2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0b7      	b.n	8001f22 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a5f      	ldr	r2, [pc, #380]	; (8001f34 <HAL_DMA_Init+0x658>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d072      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a5d      	ldr	r2, [pc, #372]	; (8001f38 <HAL_DMA_Init+0x65c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d06d      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a5c      	ldr	r2, [pc, #368]	; (8001f3c <HAL_DMA_Init+0x660>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d068      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a5a      	ldr	r2, [pc, #360]	; (8001f40 <HAL_DMA_Init+0x664>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d063      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a59      	ldr	r2, [pc, #356]	; (8001f44 <HAL_DMA_Init+0x668>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d05e      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a57      	ldr	r2, [pc, #348]	; (8001f48 <HAL_DMA_Init+0x66c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d059      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_DMA_Init+0x670>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d054      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a54      	ldr	r2, [pc, #336]	; (8001f50 <HAL_DMA_Init+0x674>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d04f      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a53      	ldr	r2, [pc, #332]	; (8001f54 <HAL_DMA_Init+0x678>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04a      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a51      	ldr	r2, [pc, #324]	; (8001f58 <HAL_DMA_Init+0x67c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d045      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a50      	ldr	r2, [pc, #320]	; (8001f5c <HAL_DMA_Init+0x680>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d040      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a4e      	ldr	r2, [pc, #312]	; (8001f60 <HAL_DMA_Init+0x684>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d03b      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <HAL_DMA_Init+0x688>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d036      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a4b      	ldr	r2, [pc, #300]	; (8001f68 <HAL_DMA_Init+0x68c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d031      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_DMA_Init+0x690>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d02c      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a48      	ldr	r2, [pc, #288]	; (8001f70 <HAL_DMA_Init+0x694>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d027      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_DMA_Init+0x698>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a45      	ldr	r2, [pc, #276]	; (8001f78 <HAL_DMA_Init+0x69c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01d      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a44      	ldr	r2, [pc, #272]	; (8001f7c <HAL_DMA_Init+0x6a0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d018      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a42      	ldr	r2, [pc, #264]	; (8001f80 <HAL_DMA_Init+0x6a4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a41      	ldr	r2, [pc, #260]	; (8001f84 <HAL_DMA_Init+0x6a8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00e      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3f      	ldr	r2, [pc, #252]	; (8001f88 <HAL_DMA_Init+0x6ac>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a3e      	ldr	r2, [pc, #248]	; (8001f8c <HAL_DMA_Init+0x6b0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_DMA_Init+0x5c6>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <HAL_DMA_Init+0x6b4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Init+0x5ca>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_DMA_Init+0x5cc>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d032      	beq.n	8001f12 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f001 ff31 	bl	8003d14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d102      	bne.n	8001ec0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ed4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <HAL_DMA_Init+0x624>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d80c      	bhi.n	8001f00 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f001 ffae 	bl	8003e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e008      	b.n	8001f12 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	a7fdabf8 	.word	0xa7fdabf8
 8001f30:	cccccccd 	.word	0xcccccccd
 8001f34:	40020010 	.word	0x40020010
 8001f38:	40020028 	.word	0x40020028
 8001f3c:	40020040 	.word	0x40020040
 8001f40:	40020058 	.word	0x40020058
 8001f44:	40020070 	.word	0x40020070
 8001f48:	40020088 	.word	0x40020088
 8001f4c:	400200a0 	.word	0x400200a0
 8001f50:	400200b8 	.word	0x400200b8
 8001f54:	40020410 	.word	0x40020410
 8001f58:	40020428 	.word	0x40020428
 8001f5c:	40020440 	.word	0x40020440
 8001f60:	40020458 	.word	0x40020458
 8001f64:	40020470 	.word	0x40020470
 8001f68:	40020488 	.word	0x40020488
 8001f6c:	400204a0 	.word	0x400204a0
 8001f70:	400204b8 	.word	0x400204b8
 8001f74:	58025408 	.word	0x58025408
 8001f78:	5802541c 	.word	0x5802541c
 8001f7c:	58025430 	.word	0x58025430
 8001f80:	58025444 	.word	0x58025444
 8001f84:	58025458 	.word	0x58025458
 8001f88:	5802546c 	.word	0x5802546c
 8001f8c:	58025480 	.word	0x58025480
 8001f90:	58025494 	.word	0x58025494

08001f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e226      	b.n	80023fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_DMA_Start_IT+0x2a>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e21f      	b.n	80023fe <HAL_DMA_Start_IT+0x46a>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	f040 820a 	bne.w	80023e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_DMA_Start_IT+0x1f4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d04a      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a66      	ldr	r2, [pc, #408]	; (800218c <HAL_DMA_Start_IT+0x1f8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d045      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_DMA_Start_IT+0x1fc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d040      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_DMA_Start_IT+0x200>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d03b      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a62      	ldr	r2, [pc, #392]	; (8002198 <HAL_DMA_Start_IT+0x204>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d036      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a60      	ldr	r2, [pc, #384]	; (800219c <HAL_DMA_Start_IT+0x208>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d031      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a5f      	ldr	r2, [pc, #380]	; (80021a0 <HAL_DMA_Start_IT+0x20c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d02c      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <HAL_DMA_Start_IT+0x210>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d027      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a5c      	ldr	r2, [pc, #368]	; (80021a8 <HAL_DMA_Start_IT+0x214>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d022      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <HAL_DMA_Start_IT+0x218>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01d      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a59      	ldr	r2, [pc, #356]	; (80021b0 <HAL_DMA_Start_IT+0x21c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d018      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a57      	ldr	r2, [pc, #348]	; (80021b4 <HAL_DMA_Start_IT+0x220>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <HAL_DMA_Start_IT+0x224>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00e      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a54      	ldr	r2, [pc, #336]	; (80021bc <HAL_DMA_Start_IT+0x228>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d009      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a53      	ldr	r2, [pc, #332]	; (80021c0 <HAL_DMA_Start_IT+0x22c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d004      	beq.n	8002082 <HAL_DMA_Start_IT+0xee>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <HAL_DMA_Start_IT+0x230>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d108      	bne.n	8002094 <HAL_DMA_Start_IT+0x100>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e007      	b.n	80020a4 <HAL_DMA_Start_IT+0x110>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f001 fb58 	bl	8003760 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a34      	ldr	r2, [pc, #208]	; (8002188 <HAL_DMA_Start_IT+0x1f4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d04a      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a33      	ldr	r2, [pc, #204]	; (800218c <HAL_DMA_Start_IT+0x1f8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d045      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a31      	ldr	r2, [pc, #196]	; (8002190 <HAL_DMA_Start_IT+0x1fc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d040      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a30      	ldr	r2, [pc, #192]	; (8002194 <HAL_DMA_Start_IT+0x200>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d03b      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_DMA_Start_IT+0x204>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d036      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2d      	ldr	r2, [pc, #180]	; (800219c <HAL_DMA_Start_IT+0x208>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d031      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_DMA_Start_IT+0x20c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02c      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <HAL_DMA_Start_IT+0x210>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d027      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <HAL_DMA_Start_IT+0x214>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d022      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_DMA_Start_IT+0x218>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d01d      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_DMA_Start_IT+0x21c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d018      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_DMA_Start_IT+0x220>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_DMA_Start_IT+0x224>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a21      	ldr	r2, [pc, #132]	; (80021bc <HAL_DMA_Start_IT+0x228>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_DMA_Start_IT+0x22c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Start_IT+0x1bc>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_DMA_Start_IT+0x230>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_DMA_Start_IT+0x1c0>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_DMA_Start_IT+0x1c2>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d036      	beq.n	80021c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 021e 	bic.w	r2, r3, #30
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0216 	orr.w	r2, r2, #22
 800216c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03e      	beq.n	80021f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0208 	orr.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e035      	b.n	80021f4 <HAL_DMA_Start_IT+0x260>
 8002188:	40020010 	.word	0x40020010
 800218c:	40020028 	.word	0x40020028
 8002190:	40020040 	.word	0x40020040
 8002194:	40020058 	.word	0x40020058
 8002198:	40020070 	.word	0x40020070
 800219c:	40020088 	.word	0x40020088
 80021a0:	400200a0 	.word	0x400200a0
 80021a4:	400200b8 	.word	0x400200b8
 80021a8:	40020410 	.word	0x40020410
 80021ac:	40020428 	.word	0x40020428
 80021b0:	40020440 	.word	0x40020440
 80021b4:	40020458 	.word	0x40020458
 80021b8:	40020470 	.word	0x40020470
 80021bc:	40020488 	.word	0x40020488
 80021c0:	400204a0 	.word	0x400204a0
 80021c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 020e 	bic.w	r2, r3, #14
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 020a 	orr.w	r2, r2, #10
 80021da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0204 	orr.w	r2, r2, #4
 80021f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a83      	ldr	r2, [pc, #524]	; (8002408 <HAL_DMA_Start_IT+0x474>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d072      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a82      	ldr	r2, [pc, #520]	; (800240c <HAL_DMA_Start_IT+0x478>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d06d      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a80      	ldr	r2, [pc, #512]	; (8002410 <HAL_DMA_Start_IT+0x47c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d068      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7f      	ldr	r2, [pc, #508]	; (8002414 <HAL_DMA_Start_IT+0x480>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d063      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a7d      	ldr	r2, [pc, #500]	; (8002418 <HAL_DMA_Start_IT+0x484>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d05e      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7c      	ldr	r2, [pc, #496]	; (800241c <HAL_DMA_Start_IT+0x488>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d059      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_DMA_Start_IT+0x48c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d054      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a79      	ldr	r2, [pc, #484]	; (8002424 <HAL_DMA_Start_IT+0x490>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d04f      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_DMA_Start_IT+0x494>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d04a      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a76      	ldr	r2, [pc, #472]	; (800242c <HAL_DMA_Start_IT+0x498>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d045      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a74      	ldr	r2, [pc, #464]	; (8002430 <HAL_DMA_Start_IT+0x49c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d040      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a73      	ldr	r2, [pc, #460]	; (8002434 <HAL_DMA_Start_IT+0x4a0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d03b      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a71      	ldr	r2, [pc, #452]	; (8002438 <HAL_DMA_Start_IT+0x4a4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d036      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a70      	ldr	r2, [pc, #448]	; (800243c <HAL_DMA_Start_IT+0x4a8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d031      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_DMA_Start_IT+0x4ac>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02c      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6d      	ldr	r2, [pc, #436]	; (8002444 <HAL_DMA_Start_IT+0x4b0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d027      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6b      	ldr	r2, [pc, #428]	; (8002448 <HAL_DMA_Start_IT+0x4b4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d022      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6a      	ldr	r2, [pc, #424]	; (800244c <HAL_DMA_Start_IT+0x4b8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d01d      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a68      	ldr	r2, [pc, #416]	; (8002450 <HAL_DMA_Start_IT+0x4bc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d018      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a67      	ldr	r2, [pc, #412]	; (8002454 <HAL_DMA_Start_IT+0x4c0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a65      	ldr	r2, [pc, #404]	; (8002458 <HAL_DMA_Start_IT+0x4c4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00e      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a64      	ldr	r2, [pc, #400]	; (800245c <HAL_DMA_Start_IT+0x4c8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a62      	ldr	r2, [pc, #392]	; (8002460 <HAL_DMA_Start_IT+0x4cc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_DMA_Start_IT+0x350>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a61      	ldr	r2, [pc, #388]	; (8002464 <HAL_DMA_Start_IT+0x4d0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_DMA_Start_IT+0x354>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_DMA_Start_IT+0x356>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01a      	beq.n	8002324 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002322:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a37      	ldr	r2, [pc, #220]	; (8002408 <HAL_DMA_Start_IT+0x474>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d04a      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a36      	ldr	r2, [pc, #216]	; (800240c <HAL_DMA_Start_IT+0x478>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d045      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a34      	ldr	r2, [pc, #208]	; (8002410 <HAL_DMA_Start_IT+0x47c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d040      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a33      	ldr	r2, [pc, #204]	; (8002414 <HAL_DMA_Start_IT+0x480>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d03b      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a31      	ldr	r2, [pc, #196]	; (8002418 <HAL_DMA_Start_IT+0x484>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d036      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a30      	ldr	r2, [pc, #192]	; (800241c <HAL_DMA_Start_IT+0x488>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d031      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2e      	ldr	r2, [pc, #184]	; (8002420 <HAL_DMA_Start_IT+0x48c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02c      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2d      	ldr	r2, [pc, #180]	; (8002424 <HAL_DMA_Start_IT+0x490>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d027      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <HAL_DMA_Start_IT+0x494>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d022      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2a      	ldr	r2, [pc, #168]	; (800242c <HAL_DMA_Start_IT+0x498>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d01d      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a28      	ldr	r2, [pc, #160]	; (8002430 <HAL_DMA_Start_IT+0x49c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d018      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a27      	ldr	r2, [pc, #156]	; (8002434 <HAL_DMA_Start_IT+0x4a0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a25      	ldr	r2, [pc, #148]	; (8002438 <HAL_DMA_Start_IT+0x4a4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00e      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a24      	ldr	r2, [pc, #144]	; (800243c <HAL_DMA_Start_IT+0x4a8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d009      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_DMA_Start_IT+0x4ac>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_DMA_Start_IT+0x430>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a21      	ldr	r2, [pc, #132]	; (8002444 <HAL_DMA_Start_IT+0x4b0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d108      	bne.n	80023d6 <HAL_DMA_Start_IT+0x442>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e012      	b.n	80023fc <HAL_DMA_Start_IT+0x468>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e009      	b.n	80023fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40020010 	.word	0x40020010
 800240c:	40020028 	.word	0x40020028
 8002410:	40020040 	.word	0x40020040
 8002414:	40020058 	.word	0x40020058
 8002418:	40020070 	.word	0x40020070
 800241c:	40020088 	.word	0x40020088
 8002420:	400200a0 	.word	0x400200a0
 8002424:	400200b8 	.word	0x400200b8
 8002428:	40020410 	.word	0x40020410
 800242c:	40020428 	.word	0x40020428
 8002430:	40020440 	.word	0x40020440
 8002434:	40020458 	.word	0x40020458
 8002438:	40020470 	.word	0x40020470
 800243c:	40020488 	.word	0x40020488
 8002440:	400204a0 	.word	0x400204a0
 8002444:	400204b8 	.word	0x400204b8
 8002448:	58025408 	.word	0x58025408
 800244c:	5802541c 	.word	0x5802541c
 8002450:	58025430 	.word	0x58025430
 8002454:	58025444 	.word	0x58025444
 8002458:	58025458 	.word	0x58025458
 800245c:	5802546c 	.word	0x5802546c
 8002460:	58025480 	.word	0x58025480
 8002464:	58025494 	.word	0x58025494

08002468 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e237      	b.n	80028ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d004      	beq.n	8002490 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e22c      	b.n	80028ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a5c      	ldr	r2, [pc, #368]	; (8002608 <HAL_DMA_Abort_IT+0x1a0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04a      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a5b      	ldr	r2, [pc, #364]	; (800260c <HAL_DMA_Abort_IT+0x1a4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d045      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a59      	ldr	r2, [pc, #356]	; (8002610 <HAL_DMA_Abort_IT+0x1a8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d040      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_DMA_Abort_IT+0x1ac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d03b      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a56      	ldr	r2, [pc, #344]	; (8002618 <HAL_DMA_Abort_IT+0x1b0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d036      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a55      	ldr	r2, [pc, #340]	; (800261c <HAL_DMA_Abort_IT+0x1b4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d031      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a53      	ldr	r2, [pc, #332]	; (8002620 <HAL_DMA_Abort_IT+0x1b8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02c      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a52      	ldr	r2, [pc, #328]	; (8002624 <HAL_DMA_Abort_IT+0x1bc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d027      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a50      	ldr	r2, [pc, #320]	; (8002628 <HAL_DMA_Abort_IT+0x1c0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a4f      	ldr	r2, [pc, #316]	; (800262c <HAL_DMA_Abort_IT+0x1c4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d01d      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <HAL_DMA_Abort_IT+0x1c8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <HAL_DMA_Abort_IT+0x1cc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <HAL_DMA_Abort_IT+0x1d0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_DMA_Abort_IT+0x1d4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a47      	ldr	r2, [pc, #284]	; (8002640 <HAL_DMA_Abort_IT+0x1d8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_DMA_Abort_IT+0xc8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a46      	ldr	r2, [pc, #280]	; (8002644 <HAL_DMA_Abort_IT+0x1dc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Abort_IT+0xcc>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_DMA_Abort_IT+0xce>
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8086 	beq.w	8002648 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2204      	movs	r2, #4
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_DMA_Abort_IT+0x1a0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d04a      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2e      	ldr	r2, [pc, #184]	; (800260c <HAL_DMA_Abort_IT+0x1a4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d045      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <HAL_DMA_Abort_IT+0x1a8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d040      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_DMA_Abort_IT+0x1ac>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d03b      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a29      	ldr	r2, [pc, #164]	; (8002618 <HAL_DMA_Abort_IT+0x1b0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d036      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a28      	ldr	r2, [pc, #160]	; (800261c <HAL_DMA_Abort_IT+0x1b4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d031      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_DMA_Abort_IT+0x1b8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d02c      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a25      	ldr	r2, [pc, #148]	; (8002624 <HAL_DMA_Abort_IT+0x1bc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d027      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_DMA_Abort_IT+0x1c0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d022      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_DMA_Abort_IT+0x1c4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d01d      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a20      	ldr	r2, [pc, #128]	; (8002630 <HAL_DMA_Abort_IT+0x1c8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d018      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <HAL_DMA_Abort_IT+0x1cc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_DMA_Abort_IT+0x1d0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00e      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_DMA_Abort_IT+0x1d4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <HAL_DMA_Abort_IT+0x1d8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x17c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_DMA_Abort_IT+0x1dc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <HAL_DMA_Abort_IT+0x18e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e178      	b.n	80028e8 <HAL_DMA_Abort_IT+0x480>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e16f      	b.n	80028e8 <HAL_DMA_Abort_IT+0x480>
 8002608:	40020010 	.word	0x40020010
 800260c:	40020028 	.word	0x40020028
 8002610:	40020040 	.word	0x40020040
 8002614:	40020058 	.word	0x40020058
 8002618:	40020070 	.word	0x40020070
 800261c:	40020088 	.word	0x40020088
 8002620:	400200a0 	.word	0x400200a0
 8002624:	400200b8 	.word	0x400200b8
 8002628:	40020410 	.word	0x40020410
 800262c:	40020428 	.word	0x40020428
 8002630:	40020440 	.word	0x40020440
 8002634:	40020458 	.word	0x40020458
 8002638:	40020470 	.word	0x40020470
 800263c:	40020488 	.word	0x40020488
 8002640:	400204a0 	.word	0x400204a0
 8002644:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 020e 	bic.w	r2, r2, #14
 8002656:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6c      	ldr	r2, [pc, #432]	; (8002810 <HAL_DMA_Abort_IT+0x3a8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d04a      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6b      	ldr	r2, [pc, #428]	; (8002814 <HAL_DMA_Abort_IT+0x3ac>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d045      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a69      	ldr	r2, [pc, #420]	; (8002818 <HAL_DMA_Abort_IT+0x3b0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d040      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a68      	ldr	r2, [pc, #416]	; (800281c <HAL_DMA_Abort_IT+0x3b4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d03b      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a66      	ldr	r2, [pc, #408]	; (8002820 <HAL_DMA_Abort_IT+0x3b8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d036      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a65      	ldr	r2, [pc, #404]	; (8002824 <HAL_DMA_Abort_IT+0x3bc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d031      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a63      	ldr	r2, [pc, #396]	; (8002828 <HAL_DMA_Abort_IT+0x3c0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02c      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a62      	ldr	r2, [pc, #392]	; (800282c <HAL_DMA_Abort_IT+0x3c4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d027      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a60      	ldr	r2, [pc, #384]	; (8002830 <HAL_DMA_Abort_IT+0x3c8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a5f      	ldr	r2, [pc, #380]	; (8002834 <HAL_DMA_Abort_IT+0x3cc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01d      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <HAL_DMA_Abort_IT+0x3d0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5c      	ldr	r2, [pc, #368]	; (800283c <HAL_DMA_Abort_IT+0x3d4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5a      	ldr	r2, [pc, #360]	; (8002840 <HAL_DMA_Abort_IT+0x3d8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a59      	ldr	r2, [pc, #356]	; (8002844 <HAL_DMA_Abort_IT+0x3dc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a57      	ldr	r2, [pc, #348]	; (8002848 <HAL_DMA_Abort_IT+0x3e0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x290>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a56      	ldr	r2, [pc, #344]	; (800284c <HAL_DMA_Abort_IT+0x3e4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <HAL_DMA_Abort_IT+0x2a2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e007      	b.n	800271a <HAL_DMA_Abort_IT+0x2b2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a3c      	ldr	r2, [pc, #240]	; (8002810 <HAL_DMA_Abort_IT+0x3a8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d072      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <HAL_DMA_Abort_IT+0x3ac>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d06d      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a39      	ldr	r2, [pc, #228]	; (8002818 <HAL_DMA_Abort_IT+0x3b0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d068      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a37      	ldr	r2, [pc, #220]	; (800281c <HAL_DMA_Abort_IT+0x3b4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d063      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a36      	ldr	r2, [pc, #216]	; (8002820 <HAL_DMA_Abort_IT+0x3b8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d05e      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a34      	ldr	r2, [pc, #208]	; (8002824 <HAL_DMA_Abort_IT+0x3bc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d059      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a33      	ldr	r2, [pc, #204]	; (8002828 <HAL_DMA_Abort_IT+0x3c0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d054      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_DMA_Abort_IT+0x3c4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d04f      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a30      	ldr	r2, [pc, #192]	; (8002830 <HAL_DMA_Abort_IT+0x3c8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04a      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2e      	ldr	r2, [pc, #184]	; (8002834 <HAL_DMA_Abort_IT+0x3cc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d045      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_DMA_Abort_IT+0x3d0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d040      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <HAL_DMA_Abort_IT+0x3d4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03b      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <HAL_DMA_Abort_IT+0x3d8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d036      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a28      	ldr	r2, [pc, #160]	; (8002844 <HAL_DMA_Abort_IT+0x3dc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a27      	ldr	r2, [pc, #156]	; (8002848 <HAL_DMA_Abort_IT+0x3e0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d02c      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a25      	ldr	r2, [pc, #148]	; (800284c <HAL_DMA_Abort_IT+0x3e4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d027      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a24      	ldr	r2, [pc, #144]	; (8002850 <HAL_DMA_Abort_IT+0x3e8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <HAL_DMA_Abort_IT+0x3ec>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01d      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_DMA_Abort_IT+0x3f0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_DMA_Abort_IT+0x3f4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_DMA_Abort_IT+0x3f8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_DMA_Abort_IT+0x3fc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_DMA_Abort_IT+0x400>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_Abort_IT+0x3a2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a19      	ldr	r2, [pc, #100]	; (800286c <HAL_DMA_Abort_IT+0x404>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d132      	bne.n	8002870 <HAL_DMA_Abort_IT+0x408>
 800280a:	2301      	movs	r3, #1
 800280c:	e031      	b.n	8002872 <HAL_DMA_Abort_IT+0x40a>
 800280e:	bf00      	nop
 8002810:	40020010 	.word	0x40020010
 8002814:	40020028 	.word	0x40020028
 8002818:	40020040 	.word	0x40020040
 800281c:	40020058 	.word	0x40020058
 8002820:	40020070 	.word	0x40020070
 8002824:	40020088 	.word	0x40020088
 8002828:	400200a0 	.word	0x400200a0
 800282c:	400200b8 	.word	0x400200b8
 8002830:	40020410 	.word	0x40020410
 8002834:	40020428 	.word	0x40020428
 8002838:	40020440 	.word	0x40020440
 800283c:	40020458 	.word	0x40020458
 8002840:	40020470 	.word	0x40020470
 8002844:	40020488 	.word	0x40020488
 8002848:	400204a0 	.word	0x400204a0
 800284c:	400204b8 	.word	0x400204b8
 8002850:	58025408 	.word	0x58025408
 8002854:	5802541c 	.word	0x5802541c
 8002858:	58025430 	.word	0x58025430
 800285c:	58025444 	.word	0x58025444
 8002860:	58025458 	.word	0x58025458
 8002864:	5802546c 	.word	0x5802546c
 8002868:	58025480 	.word	0x58025480
 800286c:	58025494 	.word	0x58025494
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d028      	beq.n	80028c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002884:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2201      	movs	r2, #1
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00c      	beq.n	80028c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop

080028f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002900:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_DMA_IRQHandler+0x1ac>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a67      	ldr	r2, [pc, #412]	; (8002aa4 <HAL_DMA_IRQHandler+0x1b0>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0a9b      	lsrs	r3, r3, #10
 800290c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5f      	ldr	r2, [pc, #380]	; (8002aa8 <HAL_DMA_IRQHandler+0x1b4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d04a      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5d      	ldr	r2, [pc, #372]	; (8002aac <HAL_DMA_IRQHandler+0x1b8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d045      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5c      	ldr	r2, [pc, #368]	; (8002ab0 <HAL_DMA_IRQHandler+0x1bc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d040      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5a      	ldr	r2, [pc, #360]	; (8002ab4 <HAL_DMA_IRQHandler+0x1c0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d03b      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a59      	ldr	r2, [pc, #356]	; (8002ab8 <HAL_DMA_IRQHandler+0x1c4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d036      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a57      	ldr	r2, [pc, #348]	; (8002abc <HAL_DMA_IRQHandler+0x1c8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_DMA_IRQHandler+0x1cc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d02c      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_DMA_IRQHandler+0x1d0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d027      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a53      	ldr	r2, [pc, #332]	; (8002ac8 <HAL_DMA_IRQHandler+0x1d4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a51      	ldr	r2, [pc, #324]	; (8002acc <HAL_DMA_IRQHandler+0x1d8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01d      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <HAL_DMA_IRQHandler+0x1dc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d018      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <HAL_DMA_IRQHandler+0x1e0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_DMA_IRQHandler+0x1e4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a4b      	ldr	r2, [pc, #300]	; (8002adc <HAL_DMA_IRQHandler+0x1e8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a4a      	ldr	r2, [pc, #296]	; (8002ae0 <HAL_DMA_IRQHandler+0x1ec>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xd2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a48      	ldr	r2, [pc, #288]	; (8002ae4 <HAL_DMA_IRQHandler+0x1f0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_DMA_IRQHandler+0xd6>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_DMA_IRQHandler+0xd8>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 842b 	beq.w	8003228 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2208      	movs	r2, #8
 80029dc:	409a      	lsls	r2, r3
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a2 	beq.w	8002b2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <HAL_DMA_IRQHandler+0x1b4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d04a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <HAL_DMA_IRQHandler+0x1b8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d045      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2b      	ldr	r2, [pc, #172]	; (8002ab0 <HAL_DMA_IRQHandler+0x1bc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d040      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2a      	ldr	r2, [pc, #168]	; (8002ab4 <HAL_DMA_IRQHandler+0x1c0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d03b      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a28      	ldr	r2, [pc, #160]	; (8002ab8 <HAL_DMA_IRQHandler+0x1c4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d036      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a27      	ldr	r2, [pc, #156]	; (8002abc <HAL_DMA_IRQHandler+0x1c8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d031      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <HAL_DMA_IRQHandler+0x1cc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02c      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <HAL_DMA_IRQHandler+0x1d0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d027      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <HAL_DMA_IRQHandler+0x1d4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d022      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a21      	ldr	r2, [pc, #132]	; (8002acc <HAL_DMA_IRQHandler+0x1d8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d01d      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_DMA_IRQHandler+0x1dc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d018      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_DMA_IRQHandler+0x1e0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_DMA_IRQHandler+0x1e4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00e      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <HAL_DMA_IRQHandler+0x1e8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d009      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_DMA_IRQHandler+0x1ec>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x194>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d12f      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x1f4>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e02e      	b.n	8002afc <HAL_DMA_IRQHandler+0x208>
 8002a9e:	bf00      	nop
 8002aa0:	24000000 	.word	0x24000000
 8002aa4:	1b4e81b5 	.word	0x1b4e81b5
 8002aa8:	40020010 	.word	0x40020010
 8002aac:	40020028 	.word	0x40020028
 8002ab0:	40020040 	.word	0x40020040
 8002ab4:	40020058 	.word	0x40020058
 8002ab8:	40020070 	.word	0x40020070
 8002abc:	40020088 	.word	0x40020088
 8002ac0:	400200a0 	.word	0x400200a0
 8002ac4:	400200b8 	.word	0x400200b8
 8002ac8:	40020410 	.word	0x40020410
 8002acc:	40020428 	.word	0x40020428
 8002ad0:	40020440 	.word	0x40020440
 8002ad4:	40020458 	.word	0x40020458
 8002ad8:	40020470 	.word	0x40020470
 8002adc:	40020488 	.word	0x40020488
 8002ae0:	400204a0 	.word	0x400204a0
 8002ae4:	400204b8 	.word	0x400204b8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0204 	bic.w	r2, r2, #4
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2208      	movs	r2, #8
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d06e      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a69      	ldr	r2, [pc, #420]	; (8002cec <HAL_DMA_IRQHandler+0x3f8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d04a      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a67      	ldr	r2, [pc, #412]	; (8002cf0 <HAL_DMA_IRQHandler+0x3fc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d045      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_DMA_IRQHandler+0x400>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d040      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a64      	ldr	r2, [pc, #400]	; (8002cf8 <HAL_DMA_IRQHandler+0x404>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d03b      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a63      	ldr	r2, [pc, #396]	; (8002cfc <HAL_DMA_IRQHandler+0x408>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d036      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a61      	ldr	r2, [pc, #388]	; (8002d00 <HAL_DMA_IRQHandler+0x40c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d031      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a60      	ldr	r2, [pc, #384]	; (8002d04 <HAL_DMA_IRQHandler+0x410>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d02c      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5e      	ldr	r2, [pc, #376]	; (8002d08 <HAL_DMA_IRQHandler+0x414>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d027      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5d      	ldr	r2, [pc, #372]	; (8002d0c <HAL_DMA_IRQHandler+0x418>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d022      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5b      	ldr	r2, [pc, #364]	; (8002d10 <HAL_DMA_IRQHandler+0x41c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01d      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5a      	ldr	r2, [pc, #360]	; (8002d14 <HAL_DMA_IRQHandler+0x420>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d018      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a58      	ldr	r2, [pc, #352]	; (8002d18 <HAL_DMA_IRQHandler+0x424>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a57      	ldr	r2, [pc, #348]	; (8002d1c <HAL_DMA_IRQHandler+0x428>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00e      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a55      	ldr	r2, [pc, #340]	; (8002d20 <HAL_DMA_IRQHandler+0x42c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a54      	ldr	r2, [pc, #336]	; (8002d24 <HAL_DMA_IRQHandler+0x430>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2ee>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_DMA_IRQHandler+0x434>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10a      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0x304>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e003      	b.n	8002c00 <HAL_DMA_IRQHandler+0x30c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00d      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c18:	f043 0202 	orr.w	r2, r3, #2
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	2204      	movs	r2, #4
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 808f 	beq.w	8002d54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2c      	ldr	r2, [pc, #176]	; (8002cec <HAL_DMA_IRQHandler+0x3f8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d04a      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <HAL_DMA_IRQHandler+0x3fc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d045      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_DMA_IRQHandler+0x400>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d040      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <HAL_DMA_IRQHandler+0x404>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d03b      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <HAL_DMA_IRQHandler+0x408>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d036      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <HAL_DMA_IRQHandler+0x40c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d031      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <HAL_DMA_IRQHandler+0x410>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d02c      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <HAL_DMA_IRQHandler+0x414>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d027      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <HAL_DMA_IRQHandler+0x418>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <HAL_DMA_IRQHandler+0x41c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01d      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_DMA_IRQHandler+0x420>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d018      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <HAL_DMA_IRQHandler+0x424>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <HAL_DMA_IRQHandler+0x428>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_DMA_IRQHandler+0x42c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_DMA_IRQHandler+0x430>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x3e2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_DMA_IRQHandler+0x434>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d12a      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x438>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e023      	b.n	8002d34 <HAL_DMA_IRQHandler+0x440>
 8002cec:	40020010 	.word	0x40020010
 8002cf0:	40020028 	.word	0x40020028
 8002cf4:	40020040 	.word	0x40020040
 8002cf8:	40020058 	.word	0x40020058
 8002cfc:	40020070 	.word	0x40020070
 8002d00:	40020088 	.word	0x40020088
 8002d04:	400200a0 	.word	0x400200a0
 8002d08:	400200b8 	.word	0x400200b8
 8002d0c:	40020410 	.word	0x40020410
 8002d10:	40020428 	.word	0x40020428
 8002d14:	40020440 	.word	0x40020440
 8002d18:	40020458 	.word	0x40020458
 8002d1c:	40020470 	.word	0x40020470
 8002d20:	40020488 	.word	0x40020488
 8002d24:	400204a0 	.word	0x400204a0
 8002d28:	400204b8 	.word	0x400204b8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2204      	movs	r2, #4
 8002d42:	409a      	lsls	r2, r3
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f043 0204 	orr.w	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80a6 	beq.w	8002eb6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a85      	ldr	r2, [pc, #532]	; (8002f84 <HAL_DMA_IRQHandler+0x690>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d04a      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a83      	ldr	r2, [pc, #524]	; (8002f88 <HAL_DMA_IRQHandler+0x694>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d045      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a82      	ldr	r2, [pc, #520]	; (8002f8c <HAL_DMA_IRQHandler+0x698>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d040      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a80      	ldr	r2, [pc, #512]	; (8002f90 <HAL_DMA_IRQHandler+0x69c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d03b      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7f      	ldr	r2, [pc, #508]	; (8002f94 <HAL_DMA_IRQHandler+0x6a0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d036      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a7d      	ldr	r2, [pc, #500]	; (8002f98 <HAL_DMA_IRQHandler+0x6a4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d031      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7c      	ldr	r2, [pc, #496]	; (8002f9c <HAL_DMA_IRQHandler+0x6a8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d02c      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a7a      	ldr	r2, [pc, #488]	; (8002fa0 <HAL_DMA_IRQHandler+0x6ac>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d027      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a79      	ldr	r2, [pc, #484]	; (8002fa4 <HAL_DMA_IRQHandler+0x6b0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a77      	ldr	r2, [pc, #476]	; (8002fa8 <HAL_DMA_IRQHandler+0x6b4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a76      	ldr	r2, [pc, #472]	; (8002fac <HAL_DMA_IRQHandler+0x6b8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a74      	ldr	r2, [pc, #464]	; (8002fb0 <HAL_DMA_IRQHandler+0x6bc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	; (8002fb4 <HAL_DMA_IRQHandler+0x6c0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a71      	ldr	r2, [pc, #452]	; (8002fb8 <HAL_DMA_IRQHandler+0x6c4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a70      	ldr	r2, [pc, #448]	; (8002fbc <HAL_DMA_IRQHandler+0x6c8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x516>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6e      	ldr	r2, [pc, #440]	; (8002fc0 <HAL_DMA_IRQHandler+0x6cc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10a      	bne.n	8002e20 <HAL_DMA_IRQHandler+0x52c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e009      	b.n	8002e34 <HAL_DMA_IRQHandler+0x540>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03e      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2210      	movs	r2, #16
 8002e42:	409a      	lsls	r2, r3
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d024      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
 8002e74:	e01f      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01b      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
 8002e86:	e016      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d107      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8110 	beq.w	80030ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2c      	ldr	r2, [pc, #176]	; (8002f84 <HAL_DMA_IRQHandler+0x690>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04a      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <HAL_DMA_IRQHandler+0x694>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d045      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <HAL_DMA_IRQHandler+0x698>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d040      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <HAL_DMA_IRQHandler+0x69c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d03b      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <HAL_DMA_IRQHandler+0x6a0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d036      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <HAL_DMA_IRQHandler+0x6a4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d031      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <HAL_DMA_IRQHandler+0x6a8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02c      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_DMA_IRQHandler+0x6ac>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d027      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a20      	ldr	r2, [pc, #128]	; (8002fa4 <HAL_DMA_IRQHandler+0x6b0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d022      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <HAL_DMA_IRQHandler+0x6b4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d01d      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_DMA_IRQHandler+0x6b8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d018      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <HAL_DMA_IRQHandler+0x6bc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <HAL_DMA_IRQHandler+0x6c0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00e      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_DMA_IRQHandler+0x6c4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_DMA_IRQHandler+0x6c8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x678>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <HAL_DMA_IRQHandler+0x6cc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d12b      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x6d0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	e02a      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x6e4>
 8002f82:	bf00      	nop
 8002f84:	40020010 	.word	0x40020010
 8002f88:	40020028 	.word	0x40020028
 8002f8c:	40020040 	.word	0x40020040
 8002f90:	40020058 	.word	0x40020058
 8002f94:	40020070 	.word	0x40020070
 8002f98:	40020088 	.word	0x40020088
 8002f9c:	400200a0 	.word	0x400200a0
 8002fa0:	400200b8 	.word	0x400200b8
 8002fa4:	40020410 	.word	0x40020410
 8002fa8:	40020428 	.word	0x40020428
 8002fac:	40020440 	.word	0x40020440
 8002fb0:	40020458 	.word	0x40020458
 8002fb4:	40020470 	.word	0x40020470
 8002fb8:	40020488 	.word	0x40020488
 8002fbc:	400204a0 	.word	0x400204a0
 8002fc0:	400204b8 	.word	0x400204b8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8087 	beq.w	80030ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d139      	bne.n	800306e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0216 	bic.w	r2, r2, #22
 8003008:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003018:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <HAL_DMA_IRQHandler+0x736>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0208 	bic.w	r2, r2, #8
 8003038:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	223f      	movs	r2, #63	; 0x3f
 8003044:	409a      	lsls	r2, r3
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 834a 	beq.w	80036f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
          }
          return;
 800306c:	e344      	b.n	80036f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d018      	beq.n	80030ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	2b00      	cmp	r3, #0
 8003090:	d02c      	beq.n	80030ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
 800309a:	e027      	b.n	80030ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
 80030ac:	e01e      	b.n	80030ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10f      	bne.n	80030dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0210 	bic.w	r2, r2, #16
 80030ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8306 	beq.w	8003702 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8088 	beq.w	8003214 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2204      	movs	r2, #4
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a7a      	ldr	r2, [pc, #488]	; (80032fc <HAL_DMA_IRQHandler+0xa08>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d04a      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a79      	ldr	r2, [pc, #484]	; (8003300 <HAL_DMA_IRQHandler+0xa0c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d045      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a77      	ldr	r2, [pc, #476]	; (8003304 <HAL_DMA_IRQHandler+0xa10>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d040      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a76      	ldr	r2, [pc, #472]	; (8003308 <HAL_DMA_IRQHandler+0xa14>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d03b      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a74      	ldr	r2, [pc, #464]	; (800330c <HAL_DMA_IRQHandler+0xa18>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d036      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a73      	ldr	r2, [pc, #460]	; (8003310 <HAL_DMA_IRQHandler+0xa1c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d031      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a71      	ldr	r2, [pc, #452]	; (8003314 <HAL_DMA_IRQHandler+0xa20>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d02c      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a70      	ldr	r2, [pc, #448]	; (8003318 <HAL_DMA_IRQHandler+0xa24>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d027      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6e      	ldr	r2, [pc, #440]	; (800331c <HAL_DMA_IRQHandler+0xa28>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d022      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6d      	ldr	r2, [pc, #436]	; (8003320 <HAL_DMA_IRQHandler+0xa2c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d01d      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6b      	ldr	r2, [pc, #428]	; (8003324 <HAL_DMA_IRQHandler+0xa30>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d018      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6a      	ldr	r2, [pc, #424]	; (8003328 <HAL_DMA_IRQHandler+0xa34>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a68      	ldr	r2, [pc, #416]	; (800332c <HAL_DMA_IRQHandler+0xa38>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a67      	ldr	r2, [pc, #412]	; (8003330 <HAL_DMA_IRQHandler+0xa3c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a65      	ldr	r2, [pc, #404]	; (8003334 <HAL_DMA_IRQHandler+0xa40>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_DMA_IRQHandler+0x8b8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a64      	ldr	r2, [pc, #400]	; (8003338 <HAL_DMA_IRQHandler+0xa44>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d108      	bne.n	80031be <HAL_DMA_IRQHandler+0x8ca>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e007      	b.n	80031ce <HAL_DMA_IRQHandler+0x8da>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3301      	adds	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d307      	bcc.n	80031ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f2      	bne.n	80031ce <HAL_DMA_IRQHandler+0x8da>
 80031e8:	e000      	b.n	80031ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80031ea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003202:	e003      	b.n	800320c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8272 	beq.w	8003702 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
 8003226:	e26c      	b.n	8003702 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a43      	ldr	r2, [pc, #268]	; (800333c <HAL_DMA_IRQHandler+0xa48>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d022      	beq.n	8003278 <HAL_DMA_IRQHandler+0x984>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a42      	ldr	r2, [pc, #264]	; (8003340 <HAL_DMA_IRQHandler+0xa4c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d01d      	beq.n	8003278 <HAL_DMA_IRQHandler+0x984>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a40      	ldr	r2, [pc, #256]	; (8003344 <HAL_DMA_IRQHandler+0xa50>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d018      	beq.n	8003278 <HAL_DMA_IRQHandler+0x984>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a3f      	ldr	r2, [pc, #252]	; (8003348 <HAL_DMA_IRQHandler+0xa54>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <HAL_DMA_IRQHandler+0x984>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3d      	ldr	r2, [pc, #244]	; (800334c <HAL_DMA_IRQHandler+0xa58>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00e      	beq.n	8003278 <HAL_DMA_IRQHandler+0x984>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3c      	ldr	r2, [pc, #240]	; (8003350 <HAL_DMA_IRQHandler+0xa5c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_DMA_IRQHandler+0x984>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a3a      	ldr	r2, [pc, #232]	; (8003354 <HAL_DMA_IRQHandler+0xa60>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_DMA_IRQHandler+0x984>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a39      	ldr	r2, [pc, #228]	; (8003358 <HAL_DMA_IRQHandler+0xa64>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_DMA_IRQHandler+0x988>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_DMA_IRQHandler+0x98a>
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 823f 	beq.w	8003702 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2204      	movs	r2, #4
 8003296:	409a      	lsls	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80cd 	beq.w	800343c <HAL_DMA_IRQHandler+0xb48>
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80c7 	beq.w	800343c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2204      	movs	r2, #4
 80032b8:	409a      	lsls	r2, r3
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d049      	beq.n	800335c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8210 	beq.w	80036fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032e4:	e20a      	b.n	80036fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8206 	beq.w	80036fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032f8:	e200      	b.n	80036fc <HAL_DMA_IRQHandler+0xe08>
 80032fa:	bf00      	nop
 80032fc:	40020010 	.word	0x40020010
 8003300:	40020028 	.word	0x40020028
 8003304:	40020040 	.word	0x40020040
 8003308:	40020058 	.word	0x40020058
 800330c:	40020070 	.word	0x40020070
 8003310:	40020088 	.word	0x40020088
 8003314:	400200a0 	.word	0x400200a0
 8003318:	400200b8 	.word	0x400200b8
 800331c:	40020410 	.word	0x40020410
 8003320:	40020428 	.word	0x40020428
 8003324:	40020440 	.word	0x40020440
 8003328:	40020458 	.word	0x40020458
 800332c:	40020470 	.word	0x40020470
 8003330:	40020488 	.word	0x40020488
 8003334:	400204a0 	.word	0x400204a0
 8003338:	400204b8 	.word	0x400204b8
 800333c:	58025408 	.word	0x58025408
 8003340:	5802541c 	.word	0x5802541c
 8003344:	58025430 	.word	0x58025430
 8003348:	58025444 	.word	0x58025444
 800334c:	58025458 	.word	0x58025458
 8003350:	5802546c 	.word	0x5802546c
 8003354:	58025480 	.word	0x58025480
 8003358:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d160      	bne.n	8003428 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7f      	ldr	r2, [pc, #508]	; (8003568 <HAL_DMA_IRQHandler+0xc74>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d04a      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a7d      	ldr	r2, [pc, #500]	; (800356c <HAL_DMA_IRQHandler+0xc78>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d045      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7c      	ldr	r2, [pc, #496]	; (8003570 <HAL_DMA_IRQHandler+0xc7c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d040      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a7a      	ldr	r2, [pc, #488]	; (8003574 <HAL_DMA_IRQHandler+0xc80>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d03b      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a79      	ldr	r2, [pc, #484]	; (8003578 <HAL_DMA_IRQHandler+0xc84>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d036      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a77      	ldr	r2, [pc, #476]	; (800357c <HAL_DMA_IRQHandler+0xc88>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d031      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a76      	ldr	r2, [pc, #472]	; (8003580 <HAL_DMA_IRQHandler+0xc8c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d02c      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a74      	ldr	r2, [pc, #464]	; (8003584 <HAL_DMA_IRQHandler+0xc90>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d027      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a73      	ldr	r2, [pc, #460]	; (8003588 <HAL_DMA_IRQHandler+0xc94>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d022      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a71      	ldr	r2, [pc, #452]	; (800358c <HAL_DMA_IRQHandler+0xc98>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01d      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a70      	ldr	r2, [pc, #448]	; (8003590 <HAL_DMA_IRQHandler+0xc9c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d018      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <HAL_DMA_IRQHandler+0xca0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6d      	ldr	r2, [pc, #436]	; (8003598 <HAL_DMA_IRQHandler+0xca4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00e      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6b      	ldr	r2, [pc, #428]	; (800359c <HAL_DMA_IRQHandler+0xca8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6a      	ldr	r2, [pc, #424]	; (80035a0 <HAL_DMA_IRQHandler+0xcac>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_DMA_IRQHandler+0xb12>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a68      	ldr	r2, [pc, #416]	; (80035a4 <HAL_DMA_IRQHandler+0xcb0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d108      	bne.n	8003418 <HAL_DMA_IRQHandler+0xb24>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0208 	bic.w	r2, r2, #8
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e007      	b.n	8003428 <HAL_DMA_IRQHandler+0xb34>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0204 	bic.w	r2, r2, #4
 8003426:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8165 	beq.w	80036fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800343a:	e15f      	b.n	80036fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	2202      	movs	r2, #2
 8003446:	409a      	lsls	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80c5 	beq.w	80035dc <HAL_DMA_IRQHandler+0xce8>
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80bf 	beq.w	80035dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2202      	movs	r2, #2
 8003468:	409a      	lsls	r2, r3
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d018      	beq.n	80034aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 813a 	beq.w	8003700 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003494:	e134      	b.n	8003700 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8130 	beq.w	8003700 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034a8:	e12a      	b.n	8003700 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 8089 	bne.w	80035c8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2b      	ldr	r2, [pc, #172]	; (8003568 <HAL_DMA_IRQHandler+0xc74>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d04a      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a29      	ldr	r2, [pc, #164]	; (800356c <HAL_DMA_IRQHandler+0xc78>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d045      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a28      	ldr	r2, [pc, #160]	; (8003570 <HAL_DMA_IRQHandler+0xc7c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d040      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a26      	ldr	r2, [pc, #152]	; (8003574 <HAL_DMA_IRQHandler+0xc80>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d03b      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a25      	ldr	r2, [pc, #148]	; (8003578 <HAL_DMA_IRQHandler+0xc84>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d036      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a23      	ldr	r2, [pc, #140]	; (800357c <HAL_DMA_IRQHandler+0xc88>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d031      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a22      	ldr	r2, [pc, #136]	; (8003580 <HAL_DMA_IRQHandler+0xc8c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d02c      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <HAL_DMA_IRQHandler+0xc90>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d027      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <HAL_DMA_IRQHandler+0xc94>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_DMA_IRQHandler+0xc98>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01d      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <HAL_DMA_IRQHandler+0xc9c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <HAL_DMA_IRQHandler+0xca0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a19      	ldr	r2, [pc, #100]	; (8003598 <HAL_DMA_IRQHandler+0xca4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_DMA_IRQHandler+0xca8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <HAL_DMA_IRQHandler+0xcac>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_DMA_IRQHandler+0xc62>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_DMA_IRQHandler+0xcb0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d128      	bne.n	80035a8 <HAL_DMA_IRQHandler+0xcb4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0214 	bic.w	r2, r2, #20
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e027      	b.n	80035b8 <HAL_DMA_IRQHandler+0xcc4>
 8003568:	40020010 	.word	0x40020010
 800356c:	40020028 	.word	0x40020028
 8003570:	40020040 	.word	0x40020040
 8003574:	40020058 	.word	0x40020058
 8003578:	40020070 	.word	0x40020070
 800357c:	40020088 	.word	0x40020088
 8003580:	400200a0 	.word	0x400200a0
 8003584:	400200b8 	.word	0x400200b8
 8003588:	40020410 	.word	0x40020410
 800358c:	40020428 	.word	0x40020428
 8003590:	40020440 	.word	0x40020440
 8003594:	40020458 	.word	0x40020458
 8003598:	40020470 	.word	0x40020470
 800359c:	40020488 	.word	0x40020488
 80035a0:	400204a0 	.word	0x400204a0
 80035a4:	400204b8 	.word	0x400204b8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 020a 	bic.w	r2, r2, #10
 80035b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8097 	beq.w	8003700 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035da:	e091      	b.n	8003700 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2208      	movs	r2, #8
 80035e6:	409a      	lsls	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8088 	beq.w	8003702 <HAL_DMA_IRQHandler+0xe0e>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8082 	beq.w	8003702 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a41      	ldr	r2, [pc, #260]	; (8003708 <HAL_DMA_IRQHandler+0xe14>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d04a      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3f      	ldr	r2, [pc, #252]	; (800370c <HAL_DMA_IRQHandler+0xe18>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d045      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a3e      	ldr	r2, [pc, #248]	; (8003710 <HAL_DMA_IRQHandler+0xe1c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d040      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3c      	ldr	r2, [pc, #240]	; (8003714 <HAL_DMA_IRQHandler+0xe20>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d03b      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a3b      	ldr	r2, [pc, #236]	; (8003718 <HAL_DMA_IRQHandler+0xe24>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d036      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a39      	ldr	r2, [pc, #228]	; (800371c <HAL_DMA_IRQHandler+0xe28>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d031      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a38      	ldr	r2, [pc, #224]	; (8003720 <HAL_DMA_IRQHandler+0xe2c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d02c      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a36      	ldr	r2, [pc, #216]	; (8003724 <HAL_DMA_IRQHandler+0xe30>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d027      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a35      	ldr	r2, [pc, #212]	; (8003728 <HAL_DMA_IRQHandler+0xe34>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a33      	ldr	r2, [pc, #204]	; (800372c <HAL_DMA_IRQHandler+0xe38>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01d      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a32      	ldr	r2, [pc, #200]	; (8003730 <HAL_DMA_IRQHandler+0xe3c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d018      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a30      	ldr	r2, [pc, #192]	; (8003734 <HAL_DMA_IRQHandler+0xe40>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2f      	ldr	r2, [pc, #188]	; (8003738 <HAL_DMA_IRQHandler+0xe44>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00e      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2d      	ldr	r2, [pc, #180]	; (800373c <HAL_DMA_IRQHandler+0xe48>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <HAL_DMA_IRQHandler+0xe4c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d004      	beq.n	800369e <HAL_DMA_IRQHandler+0xdaa>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <HAL_DMA_IRQHandler+0xe50>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <HAL_DMA_IRQHandler+0xdbc>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 021c 	bic.w	r2, r2, #28
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e007      	b.n	80036c0 <HAL_DMA_IRQHandler+0xdcc>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020e 	bic.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2201      	movs	r2, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
 80036f6:	e004      	b.n	8003702 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80036f8:	bf00      	nop
 80036fa:	e002      	b.n	8003702 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003700:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40020010 	.word	0x40020010
 800370c:	40020028 	.word	0x40020028
 8003710:	40020040 	.word	0x40020040
 8003714:	40020058 	.word	0x40020058
 8003718:	40020070 	.word	0x40020070
 800371c:	40020088 	.word	0x40020088
 8003720:	400200a0 	.word	0x400200a0
 8003724:	400200b8 	.word	0x400200b8
 8003728:	40020410 	.word	0x40020410
 800372c:	40020428 	.word	0x40020428
 8003730:	40020440 	.word	0x40020440
 8003734:	40020458 	.word	0x40020458
 8003738:	40020470 	.word	0x40020470
 800373c:	40020488 	.word	0x40020488
 8003740:	400204a0 	.word	0x400204a0
 8003744:	400204b8 	.word	0x400204b8

08003748 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7f      	ldr	r2, [pc, #508]	; (800397c <DMA_SetConfig+0x21c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d072      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7d      	ldr	r2, [pc, #500]	; (8003980 <DMA_SetConfig+0x220>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d06d      	beq.n	800386a <DMA_SetConfig+0x10a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7c      	ldr	r2, [pc, #496]	; (8003984 <DMA_SetConfig+0x224>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d068      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7a      	ldr	r2, [pc, #488]	; (8003988 <DMA_SetConfig+0x228>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d063      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a79      	ldr	r2, [pc, #484]	; (800398c <DMA_SetConfig+0x22c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d05e      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a77      	ldr	r2, [pc, #476]	; (8003990 <DMA_SetConfig+0x230>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d059      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a76      	ldr	r2, [pc, #472]	; (8003994 <DMA_SetConfig+0x234>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d054      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a74      	ldr	r2, [pc, #464]	; (8003998 <DMA_SetConfig+0x238>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d04f      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a73      	ldr	r2, [pc, #460]	; (800399c <DMA_SetConfig+0x23c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d04a      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a71      	ldr	r2, [pc, #452]	; (80039a0 <DMA_SetConfig+0x240>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d045      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a70      	ldr	r2, [pc, #448]	; (80039a4 <DMA_SetConfig+0x244>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d040      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <DMA_SetConfig+0x248>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d03b      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6d      	ldr	r2, [pc, #436]	; (80039ac <DMA_SetConfig+0x24c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d036      	beq.n	800386a <DMA_SetConfig+0x10a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6b      	ldr	r2, [pc, #428]	; (80039b0 <DMA_SetConfig+0x250>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d031      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6a      	ldr	r2, [pc, #424]	; (80039b4 <DMA_SetConfig+0x254>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d02c      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a68      	ldr	r2, [pc, #416]	; (80039b8 <DMA_SetConfig+0x258>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d027      	beq.n	800386a <DMA_SetConfig+0x10a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a67      	ldr	r2, [pc, #412]	; (80039bc <DMA_SetConfig+0x25c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a65      	ldr	r2, [pc, #404]	; (80039c0 <DMA_SetConfig+0x260>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01d      	beq.n	800386a <DMA_SetConfig+0x10a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a64      	ldr	r2, [pc, #400]	; (80039c4 <DMA_SetConfig+0x264>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a62      	ldr	r2, [pc, #392]	; (80039c8 <DMA_SetConfig+0x268>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a61      	ldr	r2, [pc, #388]	; (80039cc <DMA_SetConfig+0x26c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <DMA_SetConfig+0x10a>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5f      	ldr	r2, [pc, #380]	; (80039d0 <DMA_SetConfig+0x270>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5e      	ldr	r2, [pc, #376]	; (80039d4 <DMA_SetConfig+0x274>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <DMA_SetConfig+0x10a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5c      	ldr	r2, [pc, #368]	; (80039d8 <DMA_SetConfig+0x278>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <DMA_SetConfig+0x10e>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <DMA_SetConfig+0x110>
 800386e:	2300      	movs	r3, #0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800387c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800388e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a39      	ldr	r2, [pc, #228]	; (800397c <DMA_SetConfig+0x21c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04a      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a38      	ldr	r2, [pc, #224]	; (8003980 <DMA_SetConfig+0x220>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d045      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a36      	ldr	r2, [pc, #216]	; (8003984 <DMA_SetConfig+0x224>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d040      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a35      	ldr	r2, [pc, #212]	; (8003988 <DMA_SetConfig+0x228>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d03b      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a33      	ldr	r2, [pc, #204]	; (800398c <DMA_SetConfig+0x22c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d036      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a32      	ldr	r2, [pc, #200]	; (8003990 <DMA_SetConfig+0x230>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d031      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a30      	ldr	r2, [pc, #192]	; (8003994 <DMA_SetConfig+0x234>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02c      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <DMA_SetConfig+0x238>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d027      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2d      	ldr	r2, [pc, #180]	; (800399c <DMA_SetConfig+0x23c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <DMA_SetConfig+0x240>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01d      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <DMA_SetConfig+0x244>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a29      	ldr	r2, [pc, #164]	; (80039a8 <DMA_SetConfig+0x248>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <DMA_SetConfig+0x24c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <DMA_SetConfig+0x250>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <DMA_SetConfig+0x254>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <DMA_SetConfig+0x1d0>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <DMA_SetConfig+0x258>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <DMA_SetConfig+0x1d4>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <DMA_SetConfig+0x1d6>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d059      	beq.n	80039ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	223f      	movs	r2, #63	; 0x3f
 8003944:	409a      	lsls	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003958:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d138      	bne.n	80039dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800397a:	e086      	b.n	8003a8a <DMA_SetConfig+0x32a>
 800397c:	40020010 	.word	0x40020010
 8003980:	40020028 	.word	0x40020028
 8003984:	40020040 	.word	0x40020040
 8003988:	40020058 	.word	0x40020058
 800398c:	40020070 	.word	0x40020070
 8003990:	40020088 	.word	0x40020088
 8003994:	400200a0 	.word	0x400200a0
 8003998:	400200b8 	.word	0x400200b8
 800399c:	40020410 	.word	0x40020410
 80039a0:	40020428 	.word	0x40020428
 80039a4:	40020440 	.word	0x40020440
 80039a8:	40020458 	.word	0x40020458
 80039ac:	40020470 	.word	0x40020470
 80039b0:	40020488 	.word	0x40020488
 80039b4:	400204a0 	.word	0x400204a0
 80039b8:	400204b8 	.word	0x400204b8
 80039bc:	58025408 	.word	0x58025408
 80039c0:	5802541c 	.word	0x5802541c
 80039c4:	58025430 	.word	0x58025430
 80039c8:	58025444 	.word	0x58025444
 80039cc:	58025458 	.word	0x58025458
 80039d0:	5802546c 	.word	0x5802546c
 80039d4:	58025480 	.word	0x58025480
 80039d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
}
 80039ec:	e04d      	b.n	8003a8a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a29      	ldr	r2, [pc, #164]	; (8003a98 <DMA_SetConfig+0x338>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <DMA_SetConfig+0x2de>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a27      	ldr	r2, [pc, #156]	; (8003a9c <DMA_SetConfig+0x33c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01d      	beq.n	8003a3e <DMA_SetConfig+0x2de>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a26      	ldr	r2, [pc, #152]	; (8003aa0 <DMA_SetConfig+0x340>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <DMA_SetConfig+0x2de>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a24      	ldr	r2, [pc, #144]	; (8003aa4 <DMA_SetConfig+0x344>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <DMA_SetConfig+0x2de>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a23      	ldr	r2, [pc, #140]	; (8003aa8 <DMA_SetConfig+0x348>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <DMA_SetConfig+0x2de>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a21      	ldr	r2, [pc, #132]	; (8003aac <DMA_SetConfig+0x34c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <DMA_SetConfig+0x2de>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a20      	ldr	r2, [pc, #128]	; (8003ab0 <DMA_SetConfig+0x350>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <DMA_SetConfig+0x2de>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <DMA_SetConfig+0x354>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <DMA_SetConfig+0x2e2>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <DMA_SetConfig+0x2e4>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2201      	movs	r2, #1
 8003a52:	409a      	lsls	r2, r3
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d108      	bne.n	8003a7a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	60da      	str	r2, [r3, #12]
}
 8003a78:	e007      	b.n	8003a8a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	60da      	str	r2, [r3, #12]
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	58025408 	.word	0x58025408
 8003a9c:	5802541c 	.word	0x5802541c
 8003aa0:	58025430 	.word	0x58025430
 8003aa4:	58025444 	.word	0x58025444
 8003aa8:	58025458 	.word	0x58025458
 8003aac:	5802546c 	.word	0x5802546c
 8003ab0:	58025480 	.word	0x58025480
 8003ab4:	58025494 	.word	0x58025494

08003ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a42      	ldr	r2, [pc, #264]	; (8003bd0 <DMA_CalcBaseAndBitshift+0x118>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d04a      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a41      	ldr	r2, [pc, #260]	; (8003bd4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d045      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3f      	ldr	r2, [pc, #252]	; (8003bd8 <DMA_CalcBaseAndBitshift+0x120>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d040      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a3e      	ldr	r2, [pc, #248]	; (8003bdc <DMA_CalcBaseAndBitshift+0x124>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d03b      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a3c      	ldr	r2, [pc, #240]	; (8003be0 <DMA_CalcBaseAndBitshift+0x128>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d036      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3b      	ldr	r2, [pc, #236]	; (8003be4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d031      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a39      	ldr	r2, [pc, #228]	; (8003be8 <DMA_CalcBaseAndBitshift+0x130>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02c      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a38      	ldr	r2, [pc, #224]	; (8003bec <DMA_CalcBaseAndBitshift+0x134>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d027      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a36      	ldr	r2, [pc, #216]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x138>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d022      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a35      	ldr	r2, [pc, #212]	; (8003bf4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d01d      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a33      	ldr	r2, [pc, #204]	; (8003bf8 <DMA_CalcBaseAndBitshift+0x140>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d018      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a32      	ldr	r2, [pc, #200]	; (8003bfc <DMA_CalcBaseAndBitshift+0x144>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <DMA_CalcBaseAndBitshift+0x148>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00e      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d009      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <DMA_CalcBaseAndBitshift+0x150>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <DMA_CalcBaseAndBitshift+0xa8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <DMA_CalcBaseAndBitshift+0x154>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d101      	bne.n	8003b64 <DMA_CalcBaseAndBitshift+0xac>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <DMA_CalcBaseAndBitshift+0xae>
 8003b64:	2300      	movs	r3, #0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d024      	beq.n	8003bb4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3b10      	subs	r3, #16
 8003b72:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <DMA_CalcBaseAndBitshift+0x158>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b84:	5cd3      	ldrb	r3, [r2, r3]
 8003b86:	461a      	mov	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d908      	bls.n	8003ba4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <DMA_CalcBaseAndBitshift+0x160>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	1d1a      	adds	r2, r3, #4
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ba2:	e00d      	b.n	8003bc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <DMA_CalcBaseAndBitshift+0x160>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb2:	e005      	b.n	8003bc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40020010 	.word	0x40020010
 8003bd4:	40020028 	.word	0x40020028
 8003bd8:	40020040 	.word	0x40020040
 8003bdc:	40020058 	.word	0x40020058
 8003be0:	40020070 	.word	0x40020070
 8003be4:	40020088 	.word	0x40020088
 8003be8:	400200a0 	.word	0x400200a0
 8003bec:	400200b8 	.word	0x400200b8
 8003bf0:	40020410 	.word	0x40020410
 8003bf4:	40020428 	.word	0x40020428
 8003bf8:	40020440 	.word	0x40020440
 8003bfc:	40020458 	.word	0x40020458
 8003c00:	40020470 	.word	0x40020470
 8003c04:	40020488 	.word	0x40020488
 8003c08:	400204a0 	.word	0x400204a0
 8003c0c:	400204b8 	.word	0x400204b8
 8003c10:	aaaaaaab 	.word	0xaaaaaaab
 8003c14:	0800d5f0 	.word	0x0800d5f0
 8003c18:	fffffc00 	.word	0xfffffc00

08003c1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d120      	bne.n	8003c72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d858      	bhi.n	8003cea <DMA_CheckFifoParam+0xce>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <DMA_CheckFifoParam+0x24>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c63 	.word	0x08003c63
 8003c48:	08003c51 	.word	0x08003c51
 8003c4c:	08003ceb 	.word	0x08003ceb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d048      	beq.n	8003cee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c60:	e045      	b.n	8003cee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c6a:	d142      	bne.n	8003cf2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c70:	e03f      	b.n	8003cf2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7a:	d123      	bne.n	8003cc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d838      	bhi.n	8003cf6 <DMA_CheckFifoParam+0xda>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <DMA_CheckFifoParam+0x70>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003ca3 	.word	0x08003ca3
 8003c94:	08003c9d 	.word	0x08003c9d
 8003c98:	08003cb5 	.word	0x08003cb5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8003ca0:	e030      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d025      	beq.n	8003cfa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cb2:	e022      	b.n	8003cfa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cbc:	d11f      	bne.n	8003cfe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cc2:	e01c      	b.n	8003cfe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d902      	bls.n	8003cd2 <DMA_CheckFifoParam+0xb6>
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d003      	beq.n	8003cd8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003cd0:	e018      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd6:	e015      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00e      	beq.n	8003d02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8003ce8:	e00b      	b.n	8003d02 <DMA_CheckFifoParam+0xe6>
        break;
 8003cea:	bf00      	nop
 8003cec:	e00a      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>
        break;
 8003cee:	bf00      	nop
 8003cf0:	e008      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>
        break;
 8003cf2:	bf00      	nop
 8003cf4:	e006      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>
        break;
 8003cf6:	bf00      	nop
 8003cf8:	e004      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>
        break;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <DMA_CheckFifoParam+0xe8>
    break;
 8003d02:	bf00      	nop
    }
  }

  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop

08003d14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a38      	ldr	r2, [pc, #224]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a36      	ldr	r2, [pc, #216]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a35      	ldr	r2, [pc, #212]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a33      	ldr	r2, [pc, #204]	; (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a32      	ldr	r2, [pc, #200]	; (8003e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a30      	ldr	r2, [pc, #192]	; (8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2f      	ldr	r2, [pc, #188]	; (8003e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2d      	ldr	r2, [pc, #180]	; (8003e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01a      	beq.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	3b08      	subs	r3, #8
 8003d84:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003db0:	e024      	b.n	8003dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3b10      	subs	r3, #16
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d806      	bhi.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d902      	bls.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003dec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	58025408 	.word	0x58025408
 8003e0c:	5802541c 	.word	0x5802541c
 8003e10:	58025430 	.word	0x58025430
 8003e14:	58025444 	.word	0x58025444
 8003e18:	58025458 	.word	0x58025458
 8003e1c:	5802546c 	.word	0x5802546c
 8003e20:	58025480 	.word	0x58025480
 8003e24:	58025494 	.word	0x58025494
 8003e28:	cccccccd 	.word	0xcccccccd
 8003e2c:	16009600 	.word	0x16009600
 8003e30:	58025880 	.word	0x58025880
 8003e34:	aaaaaaab 	.word	0xaaaaaaab
 8003e38:	400204b8 	.word	0x400204b8
 8003e3c:	4002040f 	.word	0x4002040f
 8003e40:	10008200 	.word	0x10008200
 8003e44:	40020880 	.word	0x40020880

08003e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d04a      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d847      	bhi.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a25      	ldr	r2, [pc, #148]	; (8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a21      	ldr	r2, [pc, #132]	; (8003f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1e      	ldr	r2, [pc, #120]	; (8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ed0:	671a      	str	r2, [r3, #112]	; 0x70
 8003ed2:	e009      	b.n	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	461a      	mov	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ee6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	2201      	movs	r2, #1
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	58025408 	.word	0x58025408
 8003f04:	5802541c 	.word	0x5802541c
 8003f08:	58025430 	.word	0x58025430
 8003f0c:	58025444 	.word	0x58025444
 8003f10:	58025458 	.word	0x58025458
 8003f14:	5802546c 	.word	0x5802546c
 8003f18:	58025480 	.word	0x58025480
 8003f1c:	58025494 	.word	0x58025494
 8003f20:	1600963f 	.word	0x1600963f
 8003f24:	58025940 	.word	0x58025940
 8003f28:	1000823f 	.word	0x1000823f
 8003f2c:	40020940 	.word	0x40020940

08003f30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0cf      	b.n	80040e2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2223      	movs	r2, #35	; 0x23
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fc ff91 	bl	8000e7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5a:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_ETH_Init+0x1bc>)
 8003f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f60:	4a62      	ldr	r2, [pc, #392]	; (80040ec <HAL_ETH_Init+0x1bc>)
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f6a:	4b60      	ldr	r3, [pc, #384]	; (80040ec <HAL_ETH_Init+0x1bc>)
 8003f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7a1b      	ldrb	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7fd fbb7 	bl	80016f4 <HAL_SYSCFG_ETHInterfaceSelect>
 8003f86:	e003      	b.n	8003f90 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003f88:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f8c:	f7fd fbb2 	bl	80016f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003f90:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <HAL_ETH_Init+0x1c0>)
 8003f92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003faa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fac:	f7fd fb66 	bl	800167c <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fb2:	e011      	b.n	8003fd8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fb4:	f7fd fb62 	bl	800167c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fc2:	d909      	bls.n	8003fd8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	22e0      	movs	r2, #224	; 0xe0
 8003fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e084      	b.n	80040e2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e4      	bne.n	8003fb4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f886 	bl	80040fc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003ff0:	f001 fea8 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4a3f      	ldr	r2, [pc, #252]	; (80040f4 <HAL_ETH_Init+0x1c4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	0c9a      	lsrs	r2, r3, #18
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3a01      	subs	r2, #1
 8004004:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fa71 	bl	80044f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800401a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004026:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800402a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	22e0      	movs	r2, #224	; 0xe0
 8004046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e049      	b.n	80040e2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_ETH_Init+0x1c8>)
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6952      	ldr	r2, [r2, #20]
 8004062:	0051      	lsls	r1, r2, #1
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	430b      	orrs	r3, r1
 800406a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800406e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fad9 	bl	800462a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fb1f 	bl	80046bc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	3305      	adds	r3, #5
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	4619      	mov	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	3303      	adds	r3, #3
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	061a      	lsls	r2, r3, #24
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	3302      	adds	r3, #2
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	3301      	adds	r3, #1
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040ca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2210      	movs	r2, #16
 80040dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	58024400 	.word	0x58024400
 80040f0:	58000400 	.word	0x58000400
 80040f4:	431bde83 	.word	0x431bde83
 80040f8:	ffff8001 	.word	0xffff8001

080040fc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800410c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004114:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004116:	f001 fe15 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 800411a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d908      	bls.n	8004136 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d804      	bhi.n	8004136 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e027      	b.n	8004186 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a18      	ldr	r2, [pc, #96]	; (800419c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d908      	bls.n	8004150 <HAL_ETH_SetMDIOClockRange+0x54>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d204      	bcs.n	8004150 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e01a      	b.n	8004186 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d303      	bcc.n	8004160 <HAL_ETH_SetMDIOClockRange+0x64>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d911      	bls.n	8004184 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a10      	ldr	r2, [pc, #64]	; (80041a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d908      	bls.n	800417a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a0f      	ldr	r2, [pc, #60]	; (80041a8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d804      	bhi.n	800417a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e005      	b.n	8004186 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e000      	b.n	8004186 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004184:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	01312cff 	.word	0x01312cff
 800419c:	02160ebf 	.word	0x02160ebf
 80041a0:	03938700 	.word	0x03938700
 80041a4:	05f5e0ff 	.word	0x05f5e0ff
 80041a8:	08f0d17f 	.word	0x08f0d17f

080041ac <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80041be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	791b      	ldrb	r3, [r3, #4]
 80041c4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80041c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	7b1b      	ldrb	r3, [r3, #12]
 80041cc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	7b5b      	ldrb	r3, [r3, #13]
 80041d4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	7b9b      	ldrb	r3, [r3, #14]
 80041dc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	7bdb      	ldrb	r3, [r3, #15]
 80041e4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	7c12      	ldrb	r2, [r2, #16]
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	d102      	bne.n	80041f6 <ETH_SetMACConfig+0x4a>
 80041f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80041f4:	e000      	b.n	80041f8 <ETH_SetMACConfig+0x4c>
 80041f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	7c52      	ldrb	r2, [r2, #17]
 80041fe:	2a00      	cmp	r2, #0
 8004200:	d102      	bne.n	8004208 <ETH_SetMACConfig+0x5c>
 8004202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004206:	e000      	b.n	800420a <ETH_SetMACConfig+0x5e>
 8004208:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800420a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	7c9b      	ldrb	r3, [r3, #18]
 8004210:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004212:	431a      	orrs	r2, r3
               macconf->Speed |
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004218:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800421e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	7f1b      	ldrb	r3, [r3, #28]
 8004224:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004226:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	7f5b      	ldrb	r3, [r3, #29]
 800422c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800422e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	7f92      	ldrb	r2, [r2, #30]
 8004234:	2a00      	cmp	r2, #0
 8004236:	d102      	bne.n	800423e <ETH_SetMACConfig+0x92>
 8004238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800423c:	e000      	b.n	8004240 <ETH_SetMACConfig+0x94>
 800423e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004240:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	7fdb      	ldrb	r3, [r3, #31]
 8004246:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004248:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004250:	2a00      	cmp	r2, #0
 8004252:	d102      	bne.n	800425a <ETH_SetMACConfig+0xae>
 8004254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004258:	e000      	b.n	800425c <ETH_SetMACConfig+0xb0>
 800425a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800425c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800426c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <ETH_SetMACConfig+0x22c>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	430b      	orrs	r3, r1
 8004288:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004296:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004298:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042aa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	d102      	bne.n	80042be <ETH_SetMACConfig+0x112>
 80042b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042bc:	e000      	b.n	80042c0 <ETH_SetMACConfig+0x114>
 80042be:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042c0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	4b42      	ldr	r3, [pc, #264]	; (80043dc <ETH_SetMACConfig+0x230>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	68f9      	ldr	r1, [r7, #12]
 80042da:	430b      	orrs	r3, r1
 80042dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	4b3a      	ldr	r3, [pc, #232]	; (80043e0 <ETH_SetMACConfig+0x234>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	430b      	orrs	r3, r1
 8004300:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004308:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800430e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004316:	2a00      	cmp	r2, #0
 8004318:	d101      	bne.n	800431e <ETH_SetMACConfig+0x172>
 800431a:	2280      	movs	r2, #128	; 0x80
 800431c:	e000      	b.n	8004320 <ETH_SetMACConfig+0x174>
 800431e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004320:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004326:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004332:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004336:	4013      	ands	r3, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	68f9      	ldr	r1, [r7, #12]
 800433e:	430b      	orrs	r3, r1
 8004340:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004348:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004350:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f023 0103 	bic.w	r1, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	430a      	orrs	r2, r1
 800436a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004376:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004392:	2a00      	cmp	r2, #0
 8004394:	d101      	bne.n	800439a <ETH_SetMACConfig+0x1ee>
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	e000      	b.n	800439c <ETH_SetMACConfig+0x1f0>
 800439a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800439c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80043a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80043ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80043bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	00048083 	.word	0x00048083
 80043dc:	c0f88000 	.word	0xc0f88000
 80043e0:	fffffef0 	.word	0xfffffef0

080043e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b38      	ldr	r3, [pc, #224]	; (80044dc <ETH_SetDMAConfig+0xf8>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	6811      	ldr	r1, [r2, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	430b      	orrs	r3, r1
 8004406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800440a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	791b      	ldrb	r3, [r3, #4]
 8004410:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004416:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	7b1b      	ldrb	r3, [r3, #12]
 800441c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <ETH_SetDMAConfig+0xfc>)
 800442e:	4013      	ands	r3, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	430b      	orrs	r3, r1
 8004438:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800443c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	7b5b      	ldrb	r3, [r3, #13]
 8004442:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004454:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <ETH_SetDMAConfig+0x100>)
 800445a:	4013      	ands	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	430b      	orrs	r3, r1
 8004464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004468:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	7d1b      	ldrb	r3, [r3, #20]
 8004474:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004476:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	7f5b      	ldrb	r3, [r3, #29]
 800447c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <ETH_SetDMAConfig+0x104>)
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	430b      	orrs	r3, r1
 800449a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800449e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	7f1b      	ldrb	r3, [r3, #28]
 80044a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <ETH_SetDMAConfig+0x108>)
 80044be:	4013      	ands	r3, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	430b      	orrs	r3, r1
 80044c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	ffff87fd 	.word	0xffff87fd
 80044e0:	ffff2ffe 	.word	0xffff2ffe
 80044e4:	fffec000 	.word	0xfffec000
 80044e8:	ffc0efef 	.word	0xffc0efef
 80044ec:	7fc0ffff 	.word	0x7fc0ffff

080044f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b0a4      	sub	sp, #144	; 0x90
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80044fe:	2300      	movs	r3, #0
 8004500:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004508:	2300      	movs	r3, #0
 800450a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800452c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004530:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004538:	2300      	movs	r3, #0
 800453a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004548:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800454c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004554:	2300      	movs	r3, #0
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004564:	2300      	movs	r3, #0
 8004566:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800456a:	2300      	movs	r3, #0
 800456c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800456e:	2300      	movs	r3, #0
 8004570:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004572:	2300      	movs	r3, #0
 8004574:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004588:	2320      	movs	r3, #32
 800458a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004594:	2300      	movs	r3, #0
 8004596:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800459a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045a4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045ac:	2302      	movs	r3, #2
 80045ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80045ca:	2300      	movs	r3, #0
 80045cc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80045d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fde6 	bl	80041ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80045e4:	2301      	movs	r3, #1
 80045e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80045fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004604:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004608:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004610:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004616:	f107 0308 	add.w	r3, r7, #8
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff fee1 	bl	80043e4 <ETH_SetDMAConfig>
}
 8004622:	bf00      	nop
 8004624:	3790      	adds	r7, #144	; 0x90
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e01d      	b.n	8004674 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68d9      	ldr	r1, [r3, #12]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4613      	mov	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	3206      	adds	r2, #6
 800466a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d9de      	bls.n	8004638 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004688:	461a      	mov	r2, r3
 800468a:	2303      	movs	r3, #3
 800468c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e023      	b.n	8004712 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6919      	ldr	r1, [r3, #16]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	440b      	add	r3, r1
 80046da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2200      	movs	r2, #0
 80046f2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	3212      	adds	r2, #18
 8004708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d9d8      	bls.n	80046ca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473e:	461a      	mov	r2, r3
 8004740:	2303      	movs	r3, #3
 8004742:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004752:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004766:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004786:	4b89      	ldr	r3, [pc, #548]	; (80049ac <HAL_GPIO_Init+0x234>)
 8004788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800478a:	e194      	b.n	8004ab6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8186 	beq.w	8004ab0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d005      	beq.n	80047bc <HAL_GPIO_Init+0x44>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d130      	bne.n	800481e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	2203      	movs	r2, #3
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4013      	ands	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047f2:	2201      	movs	r2, #1
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0201 	and.w	r2, r3, #1
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b03      	cmp	r3, #3
 8004828:	d017      	beq.n	800485a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d123      	bne.n	80048ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	08da      	lsrs	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3208      	adds	r2, #8
 800486e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	220f      	movs	r2, #15
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	2203      	movs	r2, #3
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0203 	and.w	r2, r3, #3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80e0 	beq.w	8004ab0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f0:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_GPIO_Init+0x238>)
 80048f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048f6:	4a2e      	ldr	r2, [pc, #184]	; (80049b0 <HAL_GPIO_Init+0x238>)
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004900:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_GPIO_Init+0x238>)
 8004902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800490e:	4a29      	ldr	r2, [pc, #164]	; (80049b4 <HAL_GPIO_Init+0x23c>)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	3302      	adds	r3, #2
 8004916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <HAL_GPIO_Init+0x240>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d052      	beq.n	80049e0 <HAL_GPIO_Init+0x268>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_GPIO_Init+0x244>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d031      	beq.n	80049a6 <HAL_GPIO_Init+0x22e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_GPIO_Init+0x248>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d02b      	beq.n	80049a2 <HAL_GPIO_Init+0x22a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_GPIO_Init+0x24c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d025      	beq.n	800499e <HAL_GPIO_Init+0x226>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_GPIO_Init+0x250>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01f      	beq.n	800499a <HAL_GPIO_Init+0x222>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_GPIO_Init+0x254>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d019      	beq.n	8004996 <HAL_GPIO_Init+0x21e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_GPIO_Init+0x258>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <HAL_GPIO_Init+0x21a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_GPIO_Init+0x25c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00d      	beq.n	800498e <HAL_GPIO_Init+0x216>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <HAL_GPIO_Init+0x260>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <HAL_GPIO_Init+0x212>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_GPIO_Init+0x264>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_GPIO_Init+0x20e>
 8004982:	2309      	movs	r3, #9
 8004984:	e02d      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 8004986:	230a      	movs	r3, #10
 8004988:	e02b      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 800498a:	2308      	movs	r3, #8
 800498c:	e029      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 800498e:	2307      	movs	r3, #7
 8004990:	e027      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 8004992:	2306      	movs	r3, #6
 8004994:	e025      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 8004996:	2305      	movs	r3, #5
 8004998:	e023      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 800499a:	2304      	movs	r3, #4
 800499c:	e021      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 800499e:	2303      	movs	r3, #3
 80049a0:	e01f      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e01d      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e01b      	b.n	80049e2 <HAL_GPIO_Init+0x26a>
 80049aa:	bf00      	nop
 80049ac:	58000080 	.word	0x58000080
 80049b0:	58024400 	.word	0x58024400
 80049b4:	58000400 	.word	0x58000400
 80049b8:	58020000 	.word	0x58020000
 80049bc:	58020400 	.word	0x58020400
 80049c0:	58020800 	.word	0x58020800
 80049c4:	58020c00 	.word	0x58020c00
 80049c8:	58021000 	.word	0x58021000
 80049cc:	58021400 	.word	0x58021400
 80049d0:	58021800 	.word	0x58021800
 80049d4:	58021c00 	.word	0x58021c00
 80049d8:	58022000 	.word	0x58022000
 80049dc:	58022400 	.word	0x58022400
 80049e0:	2300      	movs	r3, #0
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	f002 0203 	and.w	r2, r2, #3
 80049e8:	0092      	lsls	r2, r2, #2
 80049ea:	4093      	lsls	r3, r2
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f2:	4938      	ldr	r1, [pc, #224]	; (8004ad4 <HAL_GPIO_Init+0x35c>)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	3302      	adds	r3, #2
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f47f ae63 	bne.w	800478c <HAL_GPIO_Init+0x14>
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	3724      	adds	r7, #36	; 0x24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	58000400 	.word	0x58000400

08004ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ae8:	787b      	ldrb	r3, [r7, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004af4:	e003      	b.n	8004afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	041a      	lsls	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	619a      	str	r2, [r3, #24]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0c:	b08f      	sub	sp, #60	; 0x3c
 8004b0e:	af0a      	add	r7, sp, #40	; 0x28
 8004b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e116      	b.n	8004d4a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc fb7a 	bl	8001230 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f005 fab2 	bl	800a0c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	687e      	ldr	r6, [r7, #4]
 8004b68:	466d      	mov	r5, sp
 8004b6a:	f106 0410 	add.w	r4, r6, #16
 8004b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b7e:	1d33      	adds	r3, r6, #4
 8004b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b82:	6838      	ldr	r0, [r7, #0]
 8004b84:	f005 fa30 	bl	8009fe8 <USB_CoreInit>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0d7      	b.n	8004d4a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f005 faa0 	bl	800a0e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	e04a      	b.n	8004c42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	333d      	adds	r3, #61	; 0x3d
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	333c      	adds	r3, #60	; 0x3c
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bd4:	7bfa      	ldrb	r2, [r7, #15]
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	b298      	uxth	r0, r3
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3356      	adds	r3, #86	; 0x56
 8004be8:	4602      	mov	r2, r0
 8004bea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3340      	adds	r3, #64	; 0x40
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3344      	adds	r3, #68	; 0x44
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3348      	adds	r3, #72	; 0x48
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	334c      	adds	r3, #76	; 0x4c
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d3af      	bcc.n	8004bac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e044      	b.n	8004cdc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c68:	7bfa      	ldrb	r2, [r7, #15]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	7bfa      	ldrb	r2, [r7, #15]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d3b5      	bcc.n	8004c52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	687e      	ldr	r6, [r7, #4]
 8004cee:	466d      	mov	r5, sp
 8004cf0:	f106 0410 	add.w	r4, r6, #16
 8004cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d04:	1d33      	adds	r3, r6, #4
 8004d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d08:	6838      	ldr	r0, [r7, #0]
 8004d0a:	f005 fa39 	bl	800a180 <USB_DevInit>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e014      	b.n	8004d4a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d102      	bne.n	8004d3e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f80b 	bl	8004d54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f005 fbf7 	bl	800a536 <USB_DevDisconnect>

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004d54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_PCDEx_ActivateLPM+0x44>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	10000003 	.word	0x10000003

08004d9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_PWREx_ConfigSupply+0x70>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d00a      	beq.n	8004dc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004db0:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_PWREx_ConfigSupply+0x70>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d001      	beq.n	8004dc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e01f      	b.n	8004e02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e01d      	b.n	8004e02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004dc6:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_PWREx_ConfigSupply+0x70>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f023 0207 	bic.w	r2, r3, #7
 8004dce:	490f      	ldr	r1, [pc, #60]	; (8004e0c <HAL_PWREx_ConfigSupply+0x70>)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004dd6:	f7fc fc51 	bl	800167c <HAL_GetTick>
 8004dda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ddc:	e009      	b.n	8004df2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004dde:	f7fc fc4d 	bl	800167c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dec:	d901      	bls.n	8004df2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e007      	b.n	8004e02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_PWREx_ConfigSupply+0x70>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfe:	d1ee      	bne.n	8004dde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	58024800 	.word	0x58024800

08004e10 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e1e:	60d3      	str	r3, [r2, #12]
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	58024800 	.word	0x58024800

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	; 0x30
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f000 bc48 	b.w	80056d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8088 	beq.w	8004f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e52:	4b99      	ldr	r3, [pc, #612]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e5c:	4b96      	ldr	r3, [pc, #600]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d007      	beq.n	8004e78 <HAL_RCC_OscConfig+0x48>
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b18      	cmp	r3, #24
 8004e6c:	d111      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62>
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d10c      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	4b8f      	ldr	r3, [pc, #572]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d06d      	beq.n	8004f60 <HAL_RCC_OscConfig+0x130>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d169      	bne.n	8004f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f000 bc21 	b.w	80056d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x7a>
 8004e9c:	4b86      	ldr	r3, [pc, #536]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a85      	ldr	r2, [pc, #532]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e02e      	b.n	8004f08 <HAL_RCC_OscConfig+0xd8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x9c>
 8004eb2:	4b81      	ldr	r3, [pc, #516]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a80      	ldr	r2, [pc, #512]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	4b7e      	ldr	r3, [pc, #504]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7d      	ldr	r2, [pc, #500]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xd8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xc0>
 8004ed6:	4b78      	ldr	r3, [pc, #480]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a77      	ldr	r2, [pc, #476]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b75      	ldr	r3, [pc, #468]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a74      	ldr	r2, [pc, #464]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xd8>
 8004ef0:	4b71      	ldr	r3, [pc, #452]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a70      	ldr	r2, [pc, #448]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b6e      	ldr	r3, [pc, #440]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6d      	ldr	r2, [pc, #436]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc fbb4 	bl	800167c <HAL_GetTick>
 8004f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fc fbb0 	bl	800167c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e3d4      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f2a:	4b63      	ldr	r3, [pc, #396]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xe8>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc fba0 	bl	800167c <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fc fb9c 	bl	800167c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e3c0      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f52:	4b59      	ldr	r3, [pc, #356]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x110>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80ca 	beq.w	8005104 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f70:	4b51      	ldr	r3, [pc, #324]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f7a:	4b4f      	ldr	r3, [pc, #316]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <HAL_RCC_OscConfig+0x166>
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	2b18      	cmp	r3, #24
 8004f8a:	d156      	bne.n	800503a <HAL_RCC_OscConfig+0x20a>
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d151      	bne.n	800503a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f96:	4b48      	ldr	r3, [pc, #288]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_RCC_OscConfig+0x17e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e392      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fae:	4b42      	ldr	r3, [pc, #264]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 0219 	bic.w	r2, r3, #25
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	493f      	ldr	r1, [pc, #252]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fc fb5c 	bl	800167c <HAL_GetTick>
 8004fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc8:	f7fc fb58 	bl	800167c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e37c      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fda:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe6:	f7fc fb79 	bl	80016dc <HAL_GetREVID>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d817      	bhi.n	8005024 <HAL_RCC_OscConfig+0x1f4>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d108      	bne.n	800500e <HAL_RCC_OscConfig+0x1de>
 8004ffc:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005004:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8005006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800500c:	e07a      	b.n	8005104 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500e:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	031b      	lsls	r3, r3, #12
 800501c:	4926      	ldr	r1, [pc, #152]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005022:	e06f      	b.n	8005104 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	4921      	ldr	r1, [pc, #132]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005038:	e064      	b.n	8005104 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d047      	beq.n	80050d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 0219 	bic.w	r2, r3, #25
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	491a      	ldr	r1, [pc, #104]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fc fb12 	bl	800167c <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505c:	f7fc fb0e 	bl	800167c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e332      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507a:	f7fc fb2f 	bl	80016dc <HAL_GetREVID>
 800507e:	4603      	mov	r3, r0
 8005080:	f241 0203 	movw	r2, #4099	; 0x1003
 8005084:	4293      	cmp	r3, r2
 8005086:	d819      	bhi.n	80050bc <HAL_RCC_OscConfig+0x28c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d108      	bne.n	80050a2 <HAL_RCC_OscConfig+0x272>
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005098:	4a07      	ldr	r2, [pc, #28]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 800509a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800509e:	6053      	str	r3, [r2, #4]
 80050a0:	e030      	b.n	8005104 <HAL_RCC_OscConfig+0x2d4>
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	031b      	lsls	r3, r3, #12
 80050b0:	4901      	ldr	r1, [pc, #4]	; (80050b8 <HAL_RCC_OscConfig+0x288>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
 80050b6:	e025      	b.n	8005104 <HAL_RCC_OscConfig+0x2d4>
 80050b8:	58024400 	.word	0x58024400
 80050bc:	4b9a      	ldr	r3, [pc, #616]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	061b      	lsls	r3, r3, #24
 80050ca:	4997      	ldr	r1, [pc, #604]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	604b      	str	r3, [r1, #4]
 80050d0:	e018      	b.n	8005104 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d2:	4b95      	ldr	r3, [pc, #596]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a94      	ldr	r2, [pc, #592]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7fc facd 	bl	800167c <HAL_GetTick>
 80050e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e6:	f7fc fac9 	bl	800167c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e2ed      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050f8:	4b8b      	ldr	r3, [pc, #556]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f0      	bne.n	80050e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80a9 	beq.w	8005264 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005112:	4b85      	ldr	r3, [pc, #532]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800511a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800511c:	4b82      	ldr	r3, [pc, #520]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d007      	beq.n	8005138 <HAL_RCC_OscConfig+0x308>
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b18      	cmp	r3, #24
 800512c:	d13a      	bne.n	80051a4 <HAL_RCC_OscConfig+0x374>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d135      	bne.n	80051a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005138:	4b7b      	ldr	r3, [pc, #492]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_RCC_OscConfig+0x320>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d001      	beq.n	8005150 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e2c1      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005150:	f7fc fac4 	bl	80016dc <HAL_GetREVID>
 8005154:	4603      	mov	r3, r0
 8005156:	f241 0203 	movw	r2, #4099	; 0x1003
 800515a:	4293      	cmp	r3, r2
 800515c:	d817      	bhi.n	800518e <HAL_RCC_OscConfig+0x35e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	2b20      	cmp	r3, #32
 8005164:	d108      	bne.n	8005178 <HAL_RCC_OscConfig+0x348>
 8005166:	4b70      	ldr	r3, [pc, #448]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800516e:	4a6e      	ldr	r2, [pc, #440]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005174:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005176:	e075      	b.n	8005264 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005178:	4b6b      	ldr	r3, [pc, #428]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	069b      	lsls	r3, r3, #26
 8005186:	4968      	ldr	r1, [pc, #416]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800518c:	e06a      	b.n	8005264 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800518e:	4b66      	ldr	r3, [pc, #408]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	061b      	lsls	r3, r3, #24
 800519c:	4962      	ldr	r1, [pc, #392]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051a2:	e05f      	b.n	8005264 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d042      	beq.n	8005232 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051ac:	4b5e      	ldr	r3, [pc, #376]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a5d      	ldr	r2, [pc, #372]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fc fa60 	bl	800167c <HAL_GetTick>
 80051bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051c0:	f7fc fa5c 	bl	800167c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e280      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051d2:	4b55      	ldr	r3, [pc, #340]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051de:	f7fc fa7d 	bl	80016dc <HAL_GetREVID>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d817      	bhi.n	800521c <HAL_RCC_OscConfig+0x3ec>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d108      	bne.n	8005206 <HAL_RCC_OscConfig+0x3d6>
 80051f4:	4b4c      	ldr	r3, [pc, #304]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80051fc:	4a4a      	ldr	r2, [pc, #296]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80051fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005202:	6053      	str	r3, [r2, #4]
 8005204:	e02e      	b.n	8005264 <HAL_RCC_OscConfig+0x434>
 8005206:	4b48      	ldr	r3, [pc, #288]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	069b      	lsls	r3, r3, #26
 8005214:	4944      	ldr	r1, [pc, #272]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
 800521a:	e023      	b.n	8005264 <HAL_RCC_OscConfig+0x434>
 800521c:	4b42      	ldr	r3, [pc, #264]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	061b      	lsls	r3, r3, #24
 800522a:	493f      	ldr	r1, [pc, #252]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800522c:	4313      	orrs	r3, r2
 800522e:	60cb      	str	r3, [r1, #12]
 8005230:	e018      	b.n	8005264 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005232:	4b3d      	ldr	r3, [pc, #244]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 8005238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800523c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fc fa1d 	bl	800167c <HAL_GetTick>
 8005242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005246:	f7fc fa19 	bl	800167c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e23d      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005258:	4b33      	ldr	r3, [pc, #204]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d036      	beq.n	80052de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d019      	beq.n	80052ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005278:	4b2b      	ldr	r3, [pc, #172]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800527a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527c:	4a2a      	ldr	r2, [pc, #168]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fc f9fa 	bl	800167c <HAL_GetTick>
 8005288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528c:	f7fc f9f6 	bl	800167c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e21a      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800529e:	4b22      	ldr	r3, [pc, #136]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80052a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x45c>
 80052aa:	e018      	b.n	80052de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ac:	4b1e      	ldr	r3, [pc, #120]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80052ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b0:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fc f9e0 	bl	800167c <HAL_GetTick>
 80052bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c0:	f7fc f9dc 	bl	800167c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e200      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052d2:	4b15      	ldr	r3, [pc, #84]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d039      	beq.n	800535e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01c      	beq.n	800532c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 80052f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052fe:	f7fc f9bd 	bl	800167c <HAL_GetTick>
 8005302:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005306:	f7fc f9b9 	bl	800167c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e1dd      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <HAL_RCC_OscConfig+0x4f8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x4d6>
 8005324:	e01b      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
 8005326:	bf00      	nop
 8005328:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800532c:	4b9b      	ldr	r3, [pc, #620]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a9a      	ldr	r2, [pc, #616]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005336:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005338:	f7fc f9a0 	bl	800167c <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005340:	f7fc f99c 	bl	800167c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e1c0      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005352:	4b92      	ldr	r3, [pc, #584]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8081 	beq.w	800546e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800536c:	4b8c      	ldr	r3, [pc, #560]	; (80055a0 <HAL_RCC_OscConfig+0x770>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a8b      	ldr	r2, [pc, #556]	; (80055a0 <HAL_RCC_OscConfig+0x770>)
 8005372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005378:	f7fc f980 	bl	800167c <HAL_GetTick>
 800537c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005380:	f7fc f97c 	bl	800167c <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1a0      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005392:	4b83      	ldr	r3, [pc, #524]	; (80055a0 <HAL_RCC_OscConfig+0x770>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d106      	bne.n	80053b4 <HAL_RCC_OscConfig+0x584>
 80053a6:	4b7d      	ldr	r3, [pc, #500]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	4a7c      	ldr	r2, [pc, #496]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6713      	str	r3, [r2, #112]	; 0x70
 80053b2:	e02d      	b.n	8005410 <HAL_RCC_OscConfig+0x5e0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10c      	bne.n	80053d6 <HAL_RCC_OscConfig+0x5a6>
 80053bc:	4b77      	ldr	r3, [pc, #476]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	4a76      	ldr	r2, [pc, #472]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	6713      	str	r3, [r2, #112]	; 0x70
 80053c8:	4b74      	ldr	r3, [pc, #464]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	4a73      	ldr	r2, [pc, #460]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053ce:	f023 0304 	bic.w	r3, r3, #4
 80053d2:	6713      	str	r3, [r2, #112]	; 0x70
 80053d4:	e01c      	b.n	8005410 <HAL_RCC_OscConfig+0x5e0>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5c8>
 80053de:	4b6f      	ldr	r3, [pc, #444]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	4a6e      	ldr	r2, [pc, #440]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ea:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	4a6b      	ldr	r2, [pc, #428]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6713      	str	r3, [r2, #112]	; 0x70
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0x5e0>
 80053f8:	4b68      	ldr	r3, [pc, #416]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	4a67      	ldr	r2, [pc, #412]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	6713      	str	r3, [r2, #112]	; 0x70
 8005404:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	4a64      	ldr	r2, [pc, #400]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 800540a:	f023 0304 	bic.w	r3, r3, #4
 800540e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d015      	beq.n	8005444 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005418:	f7fc f930 	bl	800167c <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800541e:	e00a      	b.n	8005436 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005420:	f7fc f92c 	bl	800167c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	; 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e14e      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005436:	4b59      	ldr	r3, [pc, #356]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0ee      	beq.n	8005420 <HAL_RCC_OscConfig+0x5f0>
 8005442:	e014      	b.n	800546e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005444:	f7fc f91a 	bl	800167c <HAL_GetTick>
 8005448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800544a:	e00a      	b.n	8005462 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7fc f916 	bl	800167c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e138      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005462:	4b4e      	ldr	r3, [pc, #312]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ee      	bne.n	800544c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 812d 	beq.w	80056d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005478:	4b48      	ldr	r3, [pc, #288]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005480:	2b18      	cmp	r3, #24
 8005482:	f000 80bd 	beq.w	8005600 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b02      	cmp	r3, #2
 800548c:	f040 809e 	bne.w	80055cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005490:	4b42      	ldr	r3, [pc, #264]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a41      	ldr	r2, [pc, #260]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800549a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc f8ee 	bl	800167c <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a4:	f7fc f8ea 	bl	800167c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e10e      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054b6:	4b39      	ldr	r3, [pc, #228]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80054c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054c6:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <HAL_RCC_OscConfig+0x774>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054d2:	0112      	lsls	r2, r2, #4
 80054d4:	430a      	orrs	r2, r1
 80054d6:	4931      	ldr	r1, [pc, #196]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	628b      	str	r3, [r1, #40]	; 0x28
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	3b01      	subs	r3, #1
 80054e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	3b01      	subs	r3, #1
 80054ec:	025b      	lsls	r3, r3, #9
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	3b01      	subs	r3, #1
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005504:	3b01      	subs	r3, #1
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800550c:	4923      	ldr	r1, [pc, #140]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005512:	4b22      	ldr	r3, [pc, #136]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	4a21      	ldr	r2, [pc, #132]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800551e:	4b1f      	ldr	r3, [pc, #124]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005522:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <HAL_RCC_OscConfig+0x778>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800552a:	00d2      	lsls	r2, r2, #3
 800552c:	491b      	ldr	r1, [pc, #108]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005532:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	f023 020c 	bic.w	r2, r3, #12
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	4917      	ldr	r1, [pc, #92]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005544:	4b15      	ldr	r3, [pc, #84]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	f023 0202 	bic.w	r2, r3, #2
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	4912      	ldr	r1, [pc, #72]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	4a10      	ldr	r2, [pc, #64]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 800555c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005562:	4b0e      	ldr	r3, [pc, #56]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	4a0d      	ldr	r2, [pc, #52]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800556e:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	4a0a      	ldr	r2, [pc, #40]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	4a07      	ldr	r2, [pc, #28]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a04      	ldr	r2, [pc, #16]	; (800559c <HAL_RCC_OscConfig+0x76c>)
 800558c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fc f873 	bl	800167c <HAL_GetTick>
 8005596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005598:	e011      	b.n	80055be <HAL_RCC_OscConfig+0x78e>
 800559a:	bf00      	nop
 800559c:	58024400 	.word	0x58024400
 80055a0:	58024800 	.word	0x58024800
 80055a4:	fffffc0c 	.word	0xfffffc0c
 80055a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fc f866 	bl	800167c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e08a      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055be:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x77c>
 80055ca:	e082      	b.n	80056d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055cc:	4b43      	ldr	r3, [pc, #268]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a42      	ldr	r2, [pc, #264]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 80055d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fc f850 	bl	800167c <HAL_GetTick>
 80055dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fc f84c 	bl	800167c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e070      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055f2:	4b3a      	ldr	r3, [pc, #232]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x7b0>
 80055fe:	e068      	b.n	80056d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005600:	4b36      	ldr	r3, [pc, #216]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005606:	4b35      	ldr	r3, [pc, #212]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	2b01      	cmp	r3, #1
 8005612:	d031      	beq.n	8005678 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f003 0203 	and.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800561e:	429a      	cmp	r2, r3
 8005620:	d12a      	bne.n	8005678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d122      	bne.n	8005678 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d11a      	bne.n	8005678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	0a5b      	lsrs	r3, r3, #9
 8005646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d111      	bne.n	8005678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005662:	429a      	cmp	r2, r3
 8005664:	d108      	bne.n	8005678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e02b      	b.n	80056d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800567c:	4b17      	ldr	r3, [pc, #92]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005686:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d01f      	beq.n	80056d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	4a11      	ldr	r2, [pc, #68]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800569e:	f7fb ffed 	bl	800167c <HAL_GetTick>
 80056a2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80056a4:	bf00      	nop
 80056a6:	f7fb ffe9 	bl	800167c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d0f9      	beq.n	80056a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <HAL_RCC_OscConfig+0x8b0>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056be:	00d2      	lsls	r2, r2, #3
 80056c0:	4906      	ldr	r1, [pc, #24]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	4a04      	ldr	r2, [pc, #16]	; (80056dc <HAL_RCC_OscConfig+0x8ac>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3730      	adds	r7, #48	; 0x30
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	58024400 	.word	0x58024400
 80056e0:	ffff0007 	.word	0xffff0007

080056e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e19c      	b.n	8005a32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056f8:	4b8a      	ldr	r3, [pc, #552]	; (8005924 <HAL_RCC_ClockConfig+0x240>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d910      	bls.n	8005728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b87      	ldr	r3, [pc, #540]	; (8005924 <HAL_RCC_ClockConfig+0x240>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 020f 	bic.w	r2, r3, #15
 800570e:	4985      	ldr	r1, [pc, #532]	; (8005924 <HAL_RCC_ClockConfig+0x240>)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005716:	4b83      	ldr	r3, [pc, #524]	; (8005924 <HAL_RCC_ClockConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e184      	b.n	8005a32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d010      	beq.n	8005756 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	4b7b      	ldr	r3, [pc, #492]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005740:	429a      	cmp	r2, r3
 8005742:	d908      	bls.n	8005756 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005744:	4b78      	ldr	r3, [pc, #480]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	4975      	ldr	r1, [pc, #468]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005752:	4313      	orrs	r3, r2
 8005754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d010      	beq.n	8005784 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	4b70      	ldr	r3, [pc, #448]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800576e:	429a      	cmp	r2, r3
 8005770:	d908      	bls.n	8005784 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005772:	4b6d      	ldr	r3, [pc, #436]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	496a      	ldr	r1, [pc, #424]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005780:	4313      	orrs	r3, r2
 8005782:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	d010      	beq.n	80057b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	4b64      	ldr	r3, [pc, #400]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800579c:	429a      	cmp	r2, r3
 800579e:	d908      	bls.n	80057b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057a0:	4b61      	ldr	r3, [pc, #388]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	495e      	ldr	r1, [pc, #376]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69da      	ldr	r2, [r3, #28]
 80057c2:	4b59      	ldr	r3, [pc, #356]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d908      	bls.n	80057e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057ce:	4b56      	ldr	r3, [pc, #344]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	4953      	ldr	r1, [pc, #332]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d010      	beq.n	800580e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d908      	bls.n	800580e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fc:	4b4a      	ldr	r3, [pc, #296]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f023 020f 	bic.w	r2, r3, #15
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4947      	ldr	r1, [pc, #284]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 800580a:	4313      	orrs	r3, r2
 800580c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d055      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800581a:	4b43      	ldr	r3, [pc, #268]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	4940      	ldr	r1, [pc, #256]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005828:	4313      	orrs	r3, r2
 800582a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d107      	bne.n	8005844 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005834:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d121      	bne.n	8005884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0f6      	b.n	8005a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d107      	bne.n	800585c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800584c:	4b36      	ldr	r3, [pc, #216]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d115      	bne.n	8005884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0ea      	b.n	8005a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d107      	bne.n	8005874 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005864:	4b30      	ldr	r3, [pc, #192]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0de      	b.n	8005a32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005874:	4b2c      	ldr	r3, [pc, #176]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0d6      	b.n	8005a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005884:	4b28      	ldr	r3, [pc, #160]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f023 0207 	bic.w	r2, r3, #7
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4925      	ldr	r1, [pc, #148]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 8005892:	4313      	orrs	r3, r2
 8005894:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005896:	f7fb fef1 	bl	800167c <HAL_GetTick>
 800589a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589c:	e00a      	b.n	80058b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800589e:	f7fb feed 	bl	800167c <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e0be      	b.n	8005a32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b4:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d1eb      	bne.n	800589e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d010      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	429a      	cmp	r2, r3
 80058e0:	d208      	bcs.n	80058f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e2:	4b11      	ldr	r3, [pc, #68]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f023 020f 	bic.w	r2, r3, #15
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	490e      	ldr	r1, [pc, #56]	; (8005928 <HAL_RCC_ClockConfig+0x244>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_ClockConfig+0x240>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d214      	bcs.n	800592c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <HAL_RCC_ClockConfig+0x240>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 020f 	bic.w	r2, r3, #15
 800590a:	4906      	ldr	r1, [pc, #24]	; (8005924 <HAL_RCC_ClockConfig+0x240>)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	4313      	orrs	r3, r2
 8005910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005912:	4b04      	ldr	r3, [pc, #16]	; (8005924 <HAL_RCC_ClockConfig+0x240>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e086      	b.n	8005a32 <HAL_RCC_ClockConfig+0x34e>
 8005924:	52002000 	.word	0x52002000
 8005928:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005944:	429a      	cmp	r2, r3
 8005946:	d208      	bcs.n	800595a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005948:	4b3c      	ldr	r3, [pc, #240]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	4939      	ldr	r1, [pc, #228]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 8005956:	4313      	orrs	r3, r2
 8005958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	4b34      	ldr	r3, [pc, #208]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005972:	429a      	cmp	r2, r3
 8005974:	d208      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005976:	4b31      	ldr	r3, [pc, #196]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	492e      	ldr	r1, [pc, #184]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 8005984:	4313      	orrs	r3, r2
 8005986:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	4b28      	ldr	r3, [pc, #160]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d208      	bcs.n	80059b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059a4:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	4922      	ldr	r1, [pc, #136]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d010      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69da      	ldr	r2, [r3, #28]
 80059c6:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d208      	bcs.n	80059e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	4917      	ldr	r1, [pc, #92]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059e4:	f000 f834 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	0a1b      	lsrs	r3, r3, #8
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	4912      	ldr	r1, [pc, #72]	; (8005a40 <HAL_RCC_ClockConfig+0x35c>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <HAL_RCC_ClockConfig+0x358>)
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	4a0d      	ldr	r2, [pc, #52]	; (8005a40 <HAL_RCC_ClockConfig+0x35c>)
 8005a0c:	5cd3      	ldrb	r3, [r2, r3]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
 8005a18:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <HAL_RCC_ClockConfig+0x360>)
 8005a1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a1c:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <HAL_RCC_ClockConfig+0x364>)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCC_ClockConfig+0x368>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fb fc7e 	bl	8001328 <HAL_InitTick>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	0800d5e0 	.word	0x0800d5e0
 8005a44:	24000004 	.word	0x24000004
 8005a48:	24000000 	.word	0x24000000
 8005a4c:	24000008 	.word	0x24000008

08005a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b089      	sub	sp, #36	; 0x24
 8005a54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a56:	4bb3      	ldr	r3, [pc, #716]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a5e:	2b18      	cmp	r3, #24
 8005a60:	f200 8155 	bhi.w	8005d0e <HAL_RCC_GetSysClockFreq+0x2be>
 8005a64:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005ad1 	.word	0x08005ad1
 8005a70:	08005d0f 	.word	0x08005d0f
 8005a74:	08005d0f 	.word	0x08005d0f
 8005a78:	08005d0f 	.word	0x08005d0f
 8005a7c:	08005d0f 	.word	0x08005d0f
 8005a80:	08005d0f 	.word	0x08005d0f
 8005a84:	08005d0f 	.word	0x08005d0f
 8005a88:	08005d0f 	.word	0x08005d0f
 8005a8c:	08005af7 	.word	0x08005af7
 8005a90:	08005d0f 	.word	0x08005d0f
 8005a94:	08005d0f 	.word	0x08005d0f
 8005a98:	08005d0f 	.word	0x08005d0f
 8005a9c:	08005d0f 	.word	0x08005d0f
 8005aa0:	08005d0f 	.word	0x08005d0f
 8005aa4:	08005d0f 	.word	0x08005d0f
 8005aa8:	08005d0f 	.word	0x08005d0f
 8005aac:	08005afd 	.word	0x08005afd
 8005ab0:	08005d0f 	.word	0x08005d0f
 8005ab4:	08005d0f 	.word	0x08005d0f
 8005ab8:	08005d0f 	.word	0x08005d0f
 8005abc:	08005d0f 	.word	0x08005d0f
 8005ac0:	08005d0f 	.word	0x08005d0f
 8005ac4:	08005d0f 	.word	0x08005d0f
 8005ac8:	08005d0f 	.word	0x08005d0f
 8005acc:	08005b03 	.word	0x08005b03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ad0:	4b94      	ldr	r3, [pc, #592]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005adc:	4b91      	ldr	r3, [pc, #580]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	08db      	lsrs	r3, r3, #3
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	4a90      	ldr	r2, [pc, #576]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005aee:	e111      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005af0:	4b8d      	ldr	r3, [pc, #564]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005af2:	61bb      	str	r3, [r7, #24]
      break;
 8005af4:	e10e      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005af6:	4b8d      	ldr	r3, [pc, #564]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005af8:	61bb      	str	r3, [r7, #24]
      break;
 8005afa:	e10b      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005afc:	4b8c      	ldr	r3, [pc, #560]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005afe:	61bb      	str	r3, [r7, #24]
      break;
 8005b00:	e108      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b02:	4b88      	ldr	r3, [pc, #544]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b0c:	4b85      	ldr	r3, [pc, #532]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b18:	4b82      	ldr	r3, [pc, #520]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b22:	4b80      	ldr	r3, [pc, #512]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b26:	08db      	lsrs	r3, r3, #3
 8005b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80e1 	beq.w	8005d08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	f000 8083 	beq.w	8005c54 <HAL_RCC_GetSysClockFreq+0x204>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	f200 80a1 	bhi.w	8005c98 <HAL_RCC_GetSysClockFreq+0x248>
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0x114>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d056      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b62:	e099      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b64:	4b6f      	ldr	r3, [pc, #444]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02d      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b70:	4b6c      	ldr	r3, [pc, #432]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	08db      	lsrs	r3, r3, #3
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	4a6b      	ldr	r2, [pc, #428]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9a:	4b62      	ldr	r3, [pc, #392]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005bca:	e087      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005d38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bde:	4b51      	ldr	r3, [pc, #324]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bf2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c0e:	e065      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005d3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	4b40      	ldr	r3, [pc, #256]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c52:	e043      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005d40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c66:	4b2f      	ldr	r3, [pc, #188]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c96:	e021      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005d3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005caa:	4b1e      	ldr	r3, [pc, #120]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cbe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005cdc:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	0a5b      	lsrs	r3, r3, #9
 8005ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d00:	ee17 3a90 	vmov	r3, s15
 8005d04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d06:	e005      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
      break;
 8005d0c:	e002      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d10:	61bb      	str	r3, [r7, #24]
      break;
 8005d12:	bf00      	nop
  }

  return sysclockfreq;
 8005d14:	69bb      	ldr	r3, [r7, #24]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3724      	adds	r7, #36	; 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
 8005d28:	03d09000 	.word	0x03d09000
 8005d2c:	003d0900 	.word	0x003d0900
 8005d30:	007a1200 	.word	0x007a1200
 8005d34:	46000000 	.word	0x46000000
 8005d38:	4c742400 	.word	0x4c742400
 8005d3c:	4a742400 	.word	0x4a742400
 8005d40:	4af42400 	.word	0x4af42400

08005d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d4a:	f7ff fe81 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	490f      	ldr	r1, [pc, #60]	; (8005d98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d5c:	5ccb      	ldrb	r3, [r1, r3]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	4a09      	ldr	r2, [pc, #36]	; (8005d98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d72:	5cd3      	ldrb	r3, [r2, r3]
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	4a07      	ldr	r2, [pc, #28]	; (8005d9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005d80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d82:	4a07      	ldr	r2, [pc, #28]	; (8005da0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d88:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	58024400 	.word	0x58024400
 8005d98:	0800d5e0 	.word	0x0800d5e0
 8005d9c:	24000004 	.word	0x24000004
 8005da0:	24000000 	.word	0x24000000

08005da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005da8:	f7ff ffcc 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005dac:	4602      	mov	r2, r0
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	091b      	lsrs	r3, r3, #4
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	4904      	ldr	r1, [pc, #16]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dba:	5ccb      	ldrb	r3, [r1, r3]
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	58024400 	.word	0x58024400
 8005dcc:	0800d5e0 	.word	0x0800d5e0

08005dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005dd4:	f7ff ffb6 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	4904      	ldr	r1, [pc, #16]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	58024400 	.word	0x58024400
 8005df8:	0800d5e0 	.word	0x0800d5e0

08005dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	223f      	movs	r2, #63	; 0x3f
 8005e0a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <HAL_RCC_GetClockConfig+0x7c>)
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f003 0207 	and.w	r2, r3, #7
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005e18:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <HAL_RCC_GetClockConfig+0x7c>)
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005e24:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <HAL_RCC_GetClockConfig+0x7c>)
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f003 020f 	and.w	r2, r3, #15
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005e30:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <HAL_RCC_GetClockConfig+0x7c>)
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <HAL_RCC_GetClockConfig+0x7c>)
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <HAL_RCC_GetClockConfig+0x7c>)
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_RCC_GetClockConfig+0x7c>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <HAL_RCC_GetClockConfig+0x80>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 020f 	and.w	r2, r3, #15
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	601a      	str	r2, [r3, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	52002000 	.word	0x52002000

08005e80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e84:	b0ca      	sub	sp, #296	; 0x128
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e92:	2300      	movs	r3, #0
 8005e94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005ea4:	2500      	movs	r5, #0
 8005ea6:	ea54 0305 	orrs.w	r3, r4, r5
 8005eaa:	d049      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eb6:	d02f      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005eb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ebc:	d828      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec2:	d01a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec8:	d822      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed2:	d007      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ed4:	e01c      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed6:	4bb8      	ldr	r3, [pc, #736]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	4ab7      	ldr	r2, [pc, #732]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ee2:	e01a      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee8:	3308      	adds	r3, #8
 8005eea:	2102      	movs	r1, #2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 fc8f 	bl	8007810 <RCCEx_PLL2_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ef8:	e00f      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efe:	3328      	adds	r3, #40	; 0x28
 8005f00:	2102      	movs	r1, #2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 fd36 	bl	8007974 <RCCEx_PLL3_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f0e:	e004      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f22:	4ba5      	ldr	r3, [pc, #660]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f30:	4aa1      	ldr	r2, [pc, #644]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6513      	str	r3, [r2, #80]	; 0x50
 8005f36:	e003      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005f4c:	f04f 0900 	mov.w	r9, #0
 8005f50:	ea58 0309 	orrs.w	r3, r8, r9
 8005f54:	d047      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d82a      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f7d 	.word	0x08005f7d
 8005f6c:	08005f8b 	.word	0x08005f8b
 8005f70:	08005fa1 	.word	0x08005fa1
 8005f74:	08005fbf 	.word	0x08005fbf
 8005f78:	08005fbf 	.word	0x08005fbf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f7c:	4b8e      	ldr	r3, [pc, #568]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	4a8d      	ldr	r2, [pc, #564]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f88:	e01a      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8e:	3308      	adds	r3, #8
 8005f90:	2100      	movs	r1, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 fc3c 	bl	8007810 <RCCEx_PLL2_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f9e:	e00f      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa4:	3328      	adds	r3, #40	; 0x28
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f001 fce3 	bl	8007974 <RCCEx_PLL3_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fb4:	e004      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fbc:	e000      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fc8:	4b7b      	ldr	r3, [pc, #492]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fcc:	f023 0107 	bic.w	r1, r3, #7
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	4a78      	ldr	r2, [pc, #480]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6513      	str	r3, [r2, #80]	; 0x50
 8005fdc:	e003      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005ff2:	f04f 0b00 	mov.w	fp, #0
 8005ff6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ffa:	d04c      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006006:	d030      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600c:	d829      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800600e:	2bc0      	cmp	r3, #192	; 0xc0
 8006010:	d02d      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006012:	2bc0      	cmp	r3, #192	; 0xc0
 8006014:	d825      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006016:	2b80      	cmp	r3, #128	; 0x80
 8006018:	d018      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800601a:	2b80      	cmp	r3, #128	; 0x80
 800601c:	d821      	bhi.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d007      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006026:	e01c      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006028:	4b63      	ldr	r3, [pc, #396]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a62      	ldr	r2, [pc, #392]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800602e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006034:	e01c      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603a:	3308      	adds	r3, #8
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fbe6 	bl	8007810 <RCCEx_PLL2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800604a:	e011      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	3328      	adds	r3, #40	; 0x28
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f001 fc8d 	bl	8007974 <RCCEx_PLL3_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006060:	e006      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006068:	e002      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800606e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006078:	4b4f      	ldr	r3, [pc, #316]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006086:	4a4c      	ldr	r2, [pc, #304]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006088:	430b      	orrs	r3, r1
 800608a:	6513      	str	r3, [r2, #80]	; 0x50
 800608c:	e003      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80060a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060a6:	2300      	movs	r3, #0
 80060a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80060b0:	460b      	mov	r3, r1
 80060b2:	4313      	orrs	r3, r2
 80060b4:	d053      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060c2:	d035      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80060c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060c8:	d82e      	bhi.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80060ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060ce:	d031      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80060d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060d4:	d828      	bhi.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80060d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060da:	d01a      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80060dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060e0:	d822      	bhi.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80060e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ea:	d007      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80060ec:	e01c      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ee:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	4a31      	ldr	r2, [pc, #196]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060fa:	e01c      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006100:	3308      	adds	r3, #8
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fb83 	bl	8007810 <RCCEx_PLL2_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006110:	e011      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006116:	3328      	adds	r3, #40	; 0x28
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f001 fc2a 	bl	8007974 <RCCEx_PLL3_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006126:	e006      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800612e:	e002      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006130:	bf00      	nop
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800613e:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006142:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800614a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800614e:	4a1a      	ldr	r2, [pc, #104]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006150:	430b      	orrs	r3, r1
 8006152:	6593      	str	r3, [r2, #88]	; 0x58
 8006154:	e003      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800615a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800616a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800616e:	2300      	movs	r3, #0
 8006170:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006174:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006178:	460b      	mov	r3, r1
 800617a:	4313      	orrs	r3, r2
 800617c:	d056      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006182:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006186:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800618a:	d038      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800618c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006190:	d831      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006192:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006196:	d034      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006198:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800619c:	d82b      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800619e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061a2:	d01d      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80061a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061a8:	d825      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d006      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80061ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061b2:	d00a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80061b4:	e01f      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061b6:	bf00      	nop
 80061b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061bc:	4ba2      	ldr	r3, [pc, #648]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4aa1      	ldr	r2, [pc, #644]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061c8:	e01c      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	3308      	adds	r3, #8
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 fb1c 	bl	8007810 <RCCEx_PLL2_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061de:	e011      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e4:	3328      	adds	r3, #40	; 0x28
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 fbc3 	bl	8007974 <RCCEx_PLL3_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061f4:	e006      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061fc:	e002      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061fe:	bf00      	nop
 8006200:	e000      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006204:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10b      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800620c:	4b8e      	ldr	r3, [pc, #568]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800620e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006210:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800621c:	4a8a      	ldr	r2, [pc, #552]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800621e:	430b      	orrs	r3, r1
 8006220:	6593      	str	r3, [r2, #88]	; 0x58
 8006222:	e003      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800623c:	2300      	movs	r3, #0
 800623e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006242:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006246:	460b      	mov	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	d03a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006252:	2b30      	cmp	r3, #48	; 0x30
 8006254:	d01f      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006256:	2b30      	cmp	r3, #48	; 0x30
 8006258:	d819      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800625a:	2b20      	cmp	r3, #32
 800625c:	d00c      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800625e:	2b20      	cmp	r3, #32
 8006260:	d815      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d019      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006266:	2b10      	cmp	r3, #16
 8006268:	d111      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626a:	4b77      	ldr	r3, [pc, #476]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	4a76      	ldr	r2, [pc, #472]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006276:	e011      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627c:	3308      	adds	r3, #8
 800627e:	2102      	movs	r1, #2
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fac5 	bl	8007810 <RCCEx_PLL2_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800628c:	e006      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800629a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062a4:	4b68      	ldr	r3, [pc, #416]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b2:	4a65      	ldr	r2, [pc, #404]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062b8:	e003      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80062ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d051      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ec:	d035      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80062ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062f2:	d82e      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062f8:	d031      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80062fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062fe:	d828      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006304:	d01a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630a:	d822      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006314:	d007      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006316:	e01c      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006318:	4b4b      	ldr	r3, [pc, #300]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	4a4a      	ldr	r2, [pc, #296]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800631e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006324:	e01c      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632a:	3308      	adds	r3, #8
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f001 fa6e 	bl	8007810 <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800633a:	e011      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006340:	3328      	adds	r3, #40	; 0x28
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fb15 	bl	8007974 <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800635e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006368:	4b37      	ldr	r3, [pc, #220]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006376:	4a34      	ldr	r2, [pc, #208]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006378:	430b      	orrs	r3, r1
 800637a:	6513      	str	r3, [r2, #80]	; 0x50
 800637c:	e003      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006382:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800639c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80063a0:	460b      	mov	r3, r1
 80063a2:	4313      	orrs	r3, r2
 80063a4:	d056      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063b0:	d033      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80063b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063b6:	d82c      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063bc:	d02f      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80063be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063c2:	d826      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063c8:	d02b      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80063ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063ce:	d820      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063d4:	d012      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80063d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063da:	d81a      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d022      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e4:	d115      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ea:	3308      	adds	r3, #8
 80063ec:	2101      	movs	r1, #1
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fa0e 	bl	8007810 <RCCEx_PLL2_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063fa:	e015      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006400:	3328      	adds	r3, #40	; 0x28
 8006402:	2101      	movs	r1, #1
 8006404:	4618      	mov	r0, r3
 8006406:	f001 fab5 	bl	8007974 <RCCEx_PLL3_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006410:	e00a      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006418:	e006      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10d      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006434:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800643e:	4a02      	ldr	r2, [pc, #8]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006440:	430b      	orrs	r3, r1
 8006442:	6513      	str	r3, [r2, #80]	; 0x50
 8006444:	e006      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006450:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800646a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800646e:	460b      	mov	r3, r1
 8006470:	4313      	orrs	r3, r2
 8006472:	d055      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800647c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006480:	d033      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006486:	d82c      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648c:	d02f      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006492:	d826      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006494:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006498:	d02b      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800649a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800649e:	d820      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a4:	d012      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80064a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064aa:	d81a      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d022      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80064b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b4:	d115      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ba:	3308      	adds	r3, #8
 80064bc:	2101      	movs	r1, #1
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 f9a6 	bl	8007810 <RCCEx_PLL2_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064ca:	e015      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d0:	3328      	adds	r3, #40	; 0x28
 80064d2:	2101      	movs	r1, #1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fa4d 	bl	8007974 <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064e0:	e00a      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064e8:	e006      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064ea:	bf00      	nop
 80064ec:	e004      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064ee:	bf00      	nop
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006500:	4ba3      	ldr	r3, [pc, #652]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006504:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006510:	4a9f      	ldr	r2, [pc, #636]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006512:	430b      	orrs	r3, r1
 8006514:	6593      	str	r3, [r2, #88]	; 0x58
 8006516:	e003      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800651c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800652c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006530:	2300      	movs	r3, #0
 8006532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d037      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654a:	d00e      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006550:	d816      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d018      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800655a:	d111      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655c:	4b8c      	ldr	r3, [pc, #560]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	4a8b      	ldr	r2, [pc, #556]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006568:	e00f      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656e:	3308      	adds	r3, #8
 8006570:	2101      	movs	r1, #1
 8006572:	4618      	mov	r0, r3
 8006574:	f001 f94c 	bl	8007810 <RCCEx_PLL2_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800657e:	e004      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006586:	e000      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006592:	4b7f      	ldr	r3, [pc, #508]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a0:	4a7b      	ldr	r2, [pc, #492]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	6513      	str	r3, [r2, #80]	; 0x50
 80065a6:	e003      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80065bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d039      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d81c      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	0800661d 	.word	0x0800661d
 80065e4:	080065f1 	.word	0x080065f1
 80065e8:	080065ff 	.word	0x080065ff
 80065ec:	0800661d 	.word	0x0800661d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f0:	4b67      	ldr	r3, [pc, #412]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	4a66      	ldr	r2, [pc, #408]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065fc:	e00f      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006602:	3308      	adds	r3, #8
 8006604:	2102      	movs	r1, #2
 8006606:	4618      	mov	r0, r3
 8006608:	f001 f902 	bl	8007810 <RCCEx_PLL2_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006612:	e004      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800661a:	e000      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800661c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006626:	4b5a      	ldr	r3, [pc, #360]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662a:	f023 0103 	bic.w	r1, r3, #3
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006634:	4a56      	ldr	r2, [pc, #344]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006636:	430b      	orrs	r3, r1
 8006638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800663a:	e003      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006640:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800665a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	f000 809f 	beq.w	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006666:	4b4b      	ldr	r3, [pc, #300]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a4a      	ldr	r2, [pc, #296]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800666c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006672:	f7fb f803 	bl	800167c <HAL_GetTick>
 8006676:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800667a:	e00b      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800667c:	f7fa fffe 	bl	800167c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b64      	cmp	r3, #100	; 0x64
 800668a:	d903      	bls.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006692:	e005      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006694:	4b3f      	ldr	r3, [pc, #252]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0ed      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80066a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d179      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066a8:	4b39      	ldr	r3, [pc, #228]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066b4:	4053      	eors	r3, r2
 80066b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d015      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066be:	4b34      	ldr	r3, [pc, #208]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066ca:	4b31      	ldr	r3, [pc, #196]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ce:	4a30      	ldr	r2, [pc, #192]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066d6:	4b2e      	ldr	r3, [pc, #184]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066da:	4a2d      	ldr	r2, [pc, #180]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066e2:	4a2b      	ldr	r2, [pc, #172]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f6:	d118      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f8:	f7fa ffc0 	bl	800167c <HAL_GetTick>
 80066fc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006700:	e00d      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006702:	f7fa ffbb 	bl	800167c <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800670c:	1ad2      	subs	r2, r2, r3
 800670e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006712:	429a      	cmp	r2, r3
 8006714:	d903      	bls.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800671c:	e005      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800671e:	4b1c      	ldr	r3, [pc, #112]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0eb      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800672a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800672e:	2b00      	cmp	r3, #0
 8006730:	d129      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006736:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800673a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006742:	d10e      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006744:	4b12      	ldr	r3, [pc, #72]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006750:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006754:	091a      	lsrs	r2, r3, #4
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006758:	4013      	ands	r3, r2
 800675a:	4a0d      	ldr	r2, [pc, #52]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6113      	str	r3, [r2, #16]
 8006760:	e005      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006762:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	4a0a      	ldr	r2, [pc, #40]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006768:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800676c:	6113      	str	r3, [r2, #16]
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006770:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800677a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800677e:	4a04      	ldr	r2, [pc, #16]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006780:	430b      	orrs	r3, r1
 8006782:	6713      	str	r3, [r2, #112]	; 0x70
 8006784:	e00e      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800678a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800678e:	e009      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006790:	58024400 	.word	0x58024400
 8006794:	58024800 	.word	0x58024800
 8006798:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f002 0301 	and.w	r3, r2, #1
 80067b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f000 8089 	beq.w	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067cc:	2b28      	cmp	r3, #40	; 0x28
 80067ce:	d86b      	bhi.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080068b1 	.word	0x080068b1
 80067dc:	080068a9 	.word	0x080068a9
 80067e0:	080068a9 	.word	0x080068a9
 80067e4:	080068a9 	.word	0x080068a9
 80067e8:	080068a9 	.word	0x080068a9
 80067ec:	080068a9 	.word	0x080068a9
 80067f0:	080068a9 	.word	0x080068a9
 80067f4:	080068a9 	.word	0x080068a9
 80067f8:	0800687d 	.word	0x0800687d
 80067fc:	080068a9 	.word	0x080068a9
 8006800:	080068a9 	.word	0x080068a9
 8006804:	080068a9 	.word	0x080068a9
 8006808:	080068a9 	.word	0x080068a9
 800680c:	080068a9 	.word	0x080068a9
 8006810:	080068a9 	.word	0x080068a9
 8006814:	080068a9 	.word	0x080068a9
 8006818:	08006893 	.word	0x08006893
 800681c:	080068a9 	.word	0x080068a9
 8006820:	080068a9 	.word	0x080068a9
 8006824:	080068a9 	.word	0x080068a9
 8006828:	080068a9 	.word	0x080068a9
 800682c:	080068a9 	.word	0x080068a9
 8006830:	080068a9 	.word	0x080068a9
 8006834:	080068a9 	.word	0x080068a9
 8006838:	080068b1 	.word	0x080068b1
 800683c:	080068a9 	.word	0x080068a9
 8006840:	080068a9 	.word	0x080068a9
 8006844:	080068a9 	.word	0x080068a9
 8006848:	080068a9 	.word	0x080068a9
 800684c:	080068a9 	.word	0x080068a9
 8006850:	080068a9 	.word	0x080068a9
 8006854:	080068a9 	.word	0x080068a9
 8006858:	080068b1 	.word	0x080068b1
 800685c:	080068a9 	.word	0x080068a9
 8006860:	080068a9 	.word	0x080068a9
 8006864:	080068a9 	.word	0x080068a9
 8006868:	080068a9 	.word	0x080068a9
 800686c:	080068a9 	.word	0x080068a9
 8006870:	080068a9 	.word	0x080068a9
 8006874:	080068a9 	.word	0x080068a9
 8006878:	080068b1 	.word	0x080068b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006880:	3308      	adds	r3, #8
 8006882:	2101      	movs	r1, #1
 8006884:	4618      	mov	r0, r3
 8006886:	f000 ffc3 	bl	8007810 <RCCEx_PLL2_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006890:	e00f      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006896:	3328      	adds	r3, #40	; 0x28
 8006898:	2101      	movs	r1, #1
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f86a 	bl	8007974 <RCCEx_PLL3_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068a6:	e004      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068ae:	e000      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80068b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068ba:	4bbf      	ldr	r3, [pc, #764]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c8:	4abb      	ldr	r2, [pc, #748]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6553      	str	r3, [r2, #84]	; 0x54
 80068ce:	e003      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f002 0302 	and.w	r3, r2, #2
 80068e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068e8:	2300      	movs	r3, #0
 80068ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80068f2:	460b      	mov	r3, r1
 80068f4:	4313      	orrs	r3, r2
 80068f6:	d041      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068fe:	2b05      	cmp	r3, #5
 8006900:	d824      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006902:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	08006955 	.word	0x08006955
 800690c:	08006921 	.word	0x08006921
 8006910:	08006937 	.word	0x08006937
 8006914:	08006955 	.word	0x08006955
 8006918:	08006955 	.word	0x08006955
 800691c:	08006955 	.word	0x08006955
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006924:	3308      	adds	r3, #8
 8006926:	2101      	movs	r1, #1
 8006928:	4618      	mov	r0, r3
 800692a:	f000 ff71 	bl	8007810 <RCCEx_PLL2_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006934:	e00f      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693a:	3328      	adds	r3, #40	; 0x28
 800693c:	2101      	movs	r1, #1
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f818 	bl	8007974 <RCCEx_PLL3_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800694a:	e004      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006952:	e000      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10a      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800695e:	4b96      	ldr	r3, [pc, #600]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	f023 0107 	bic.w	r1, r3, #7
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800696c:	4a92      	ldr	r2, [pc, #584]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800696e:	430b      	orrs	r3, r1
 8006970:	6553      	str	r3, [r2, #84]	; 0x54
 8006972:	e003      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006978:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800697c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f002 0304 	and.w	r3, r2, #4
 8006988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006992:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006996:	460b      	mov	r3, r1
 8006998:	4313      	orrs	r3, r2
 800699a:	d044      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800699c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a4:	2b05      	cmp	r3, #5
 80069a6:	d825      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069fd 	.word	0x080069fd
 80069b4:	080069c9 	.word	0x080069c9
 80069b8:	080069df 	.word	0x080069df
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	080069fd 	.word	0x080069fd
 80069c4:	080069fd 	.word	0x080069fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069cc:	3308      	adds	r3, #8
 80069ce:	2101      	movs	r1, #1
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 ff1d 	bl	8007810 <RCCEx_PLL2_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069dc:	e00f      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e2:	3328      	adds	r3, #40	; 0x28
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 ffc4 	bl	8007974 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069f2:	e004      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80069fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a06:	4b6c      	ldr	r3, [pc, #432]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0a:	f023 0107 	bic.w	r1, r3, #7
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a16:	4a68      	ldr	r2, [pc, #416]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a1c:	e003      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f002 0320 	and.w	r3, r2, #32
 8006a32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a36:	2300      	movs	r3, #0
 8006a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d055      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a52:	d033      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a58:	d82c      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d02f      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a64:	d826      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a6a:	d02b      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006a6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a70:	d820      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a76:	d012      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a7c:	d81a      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d022      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a86:	d115      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 febd 	bl	8007810 <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e015      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa2:	3328      	adds	r3, #40	; 0x28
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 ff64 	bl	8007974 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ab2:	e00a      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006aba:	e006      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006abc:	bf00      	nop
 8006abe:	e004      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ac0:	bf00      	nop
 8006ac2:	e002      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ac4:	bf00      	nop
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ad2:	4b39      	ldr	r3, [pc, #228]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae2:	4a35      	ldr	r2, [pc, #212]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6553      	str	r3, [r2, #84]	; 0x54
 8006ae8:	e003      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b02:	2300      	movs	r3, #0
 8006b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	d058      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b1e:	d033      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006b20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b24:	d82c      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2a:	d02f      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b30:	d826      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b36:	d02b      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006b38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b3c:	d820      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b42:	d012      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b48:	d81a      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d022      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b52:	d115      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b58:	3308      	adds	r3, #8
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fe57 	bl	8007810 <RCCEx_PLL2_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b68:	e015      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6e:	3328      	adds	r3, #40	; 0x28
 8006b70:	2102      	movs	r1, #2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fefe 	bl	8007974 <RCCEx_PLL3_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b7e:	e00a      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b86:	e006      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e004      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10e      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bae:	4a02      	ldr	r2, [pc, #8]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8006bb4:	e006      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006bb6:	bf00      	nop
 8006bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006bde:	460b      	mov	r3, r1
 8006be0:	4313      	orrs	r3, r2
 8006be2:	d055      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bf0:	d033      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006bf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bf6:	d82c      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	d02f      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c02:	d826      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c08:	d02b      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006c0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c0e:	d820      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c14:	d012      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c1a:	d81a      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d022      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c24:	d115      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fdee 	bl	8007810 <RCCEx_PLL2_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c3a:	e015      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c40:	3328      	adds	r3, #40	; 0x28
 8006c42:	2102      	movs	r1, #2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fe95 	bl	8007974 <RCCEx_PLL3_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c50:	e00a      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c58:	e006      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c5a:	bf00      	nop
 8006c5c:	e004      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e002      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10b      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c70:	4ba1      	ldr	r3, [pc, #644]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c74:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c80:	4a9d      	ldr	r2, [pc, #628]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c82:	430b      	orrs	r3, r1
 8006c84:	6593      	str	r3, [r2, #88]	; 0x58
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f002 0308 	and.w	r3, r2, #8
 8006c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ca6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006caa:	460b      	mov	r3, r1
 8006cac:	4313      	orrs	r3, r2
 8006cae:	d01e      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc2:	3328      	adds	r3, #40	; 0x28
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fe54 	bl	8007974 <RCCEx_PLL3_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006cd8:	4b87      	ldr	r3, [pc, #540]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce8:	4a83      	ldr	r2, [pc, #524]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cea:	430b      	orrs	r3, r1
 8006cec:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f002 0310 	and.w	r3, r2, #16
 8006cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	d01e      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1a:	d10c      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d20:	3328      	adds	r3, #40	; 0x28
 8006d22:	2102      	movs	r1, #2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fe25 	bl	8007974 <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d36:	4b70      	ldr	r3, [pc, #448]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d46:	4a6c      	ldr	r2, [pc, #432]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006d66:	460b      	mov	r3, r1
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	d03e      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d78:	d022      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d7e:	d81b      	bhi.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d88:	d00b      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006d8a:	e015      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d90:	3308      	adds	r3, #8
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fd3b 	bl	8007810 <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006da0:	e00f      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da6:	3328      	adds	r3, #40	; 0x28
 8006da8:	2102      	movs	r1, #2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fde2 	bl	8007974 <RCCEx_PLL3_Config>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006db6:	e004      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dca:	4b4b      	ldr	r3, [pc, #300]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dda:	4a47      	ldr	r2, [pc, #284]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	6593      	str	r3, [r2, #88]	; 0x58
 8006de0:	e003      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006df6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006df8:	2300      	movs	r3, #0
 8006dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006dfc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006e00:	460b      	mov	r3, r1
 8006e02:	4313      	orrs	r3, r2
 8006e04:	d03b      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e12:	d01f      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e18:	d818      	bhi.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1e:	d003      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e24:	d007      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006e26:	e011      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e28:	4b33      	ldr	r3, [pc, #204]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	4a32      	ldr	r2, [pc, #200]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e34:	e00f      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3a:	3328      	adds	r3, #40	; 0x28
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fd98 	bl	8007974 <RCCEx_PLL3_Config>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e4a:	e004      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e52:	e000      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e5e:	4b26      	ldr	r3, [pc, #152]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6e:	4a22      	ldr	r2, [pc, #136]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6553      	str	r3, [r2, #84]	; 0x54
 8006e74:	e003      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	677b      	str	r3, [r7, #116]	; 0x74
 8006e90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006e94:	460b      	mov	r3, r1
 8006e96:	4313      	orrs	r3, r2
 8006e98:	d034      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea8:	d007      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006eaa:	e011      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eac:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	4a11      	ldr	r2, [pc, #68]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006eb8:	e00e      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	2102      	movs	r1, #2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fca4 	bl	8007810 <RCCEx_PLL2_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ece:	e003      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10d      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eee:	4a02      	ldr	r2, [pc, #8]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ef4:	e006      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006ef6:	bf00      	nop
 8006ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f12:	2300      	movs	r3, #0
 8006f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d00c      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f24:	3328      	adds	r3, #40	; 0x28
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fd23 	bl	8007974 <RCCEx_PLL3_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006f46:	663b      	str	r3, [r7, #96]	; 0x60
 8006f48:	2300      	movs	r3, #0
 8006f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006f50:	460b      	mov	r3, r1
 8006f52:	4313      	orrs	r3, r2
 8006f54:	d038      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f62:	d018      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f68:	d811      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f6e:	d014      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f74:	d80b      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d011      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7e:	d106      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f80:	4bc3      	ldr	r3, [pc, #780]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	4ac2      	ldr	r2, [pc, #776]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f94:	e004      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f96:	bf00      	nop
 8006f98:	e002      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f9a:	bf00      	nop
 8006f9c:	e000      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10b      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fa8:	4bb9      	ldr	r3, [pc, #740]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fb8:	4ab5      	ldr	r2, [pc, #724]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	6553      	str	r3, [r2, #84]	; 0x54
 8006fbe:	e003      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fda:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fe4:	4baa      	ldr	r3, [pc, #680]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff2:	4aa7      	ldr	r2, [pc, #668]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007004:	653b      	str	r3, [r7, #80]	; 0x50
 8007006:	2300      	movs	r3, #0
 8007008:	657b      	str	r3, [r7, #84]	; 0x54
 800700a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800700e:	460b      	mov	r3, r1
 8007010:	4313      	orrs	r3, r2
 8007012:	d00a      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007014:	4b9e      	ldr	r3, [pc, #632]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007020:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007024:	4a9a      	ldr	r2, [pc, #616]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007026:	430b      	orrs	r3, r1
 8007028:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007036:	64bb      	str	r3, [r7, #72]	; 0x48
 8007038:	2300      	movs	r3, #0
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007040:	460b      	mov	r3, r1
 8007042:	4313      	orrs	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007046:	4b92      	ldr	r3, [pc, #584]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800704e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007054:	4a8e      	ldr	r2, [pc, #568]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007056:	430b      	orrs	r3, r1
 8007058:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007066:	643b      	str	r3, [r7, #64]	; 0x40
 8007068:	2300      	movs	r3, #0
 800706a:	647b      	str	r3, [r7, #68]	; 0x44
 800706c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007070:	460b      	mov	r3, r1
 8007072:	4313      	orrs	r3, r2
 8007074:	d00e      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007076:	4b86      	ldr	r3, [pc, #536]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	4a85      	ldr	r2, [pc, #532]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800707c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007080:	6113      	str	r3, [r2, #16]
 8007082:	4b83      	ldr	r3, [pc, #524]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007084:	6919      	ldr	r1, [r3, #16]
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800708a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800708e:	4a80      	ldr	r2, [pc, #512]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007090:	430b      	orrs	r3, r1
 8007092:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80070a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80070a2:	2300      	movs	r3, #0
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80070aa:	460b      	mov	r3, r1
 80070ac:	4313      	orrs	r3, r2
 80070ae:	d009      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070b0:	4b77      	ldr	r3, [pc, #476]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	4a74      	ldr	r2, [pc, #464]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070c0:	430b      	orrs	r3, r1
 80070c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80070d0:	633b      	str	r3, [r7, #48]	; 0x30
 80070d2:	2300      	movs	r3, #0
 80070d4:	637b      	str	r3, [r7, #52]	; 0x34
 80070d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80070da:	460b      	mov	r3, r1
 80070dc:	4313      	orrs	r3, r2
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070e0:	4b6b      	ldr	r3, [pc, #428]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f0:	4a67      	ldr	r2, [pc, #412]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070f2:	430b      	orrs	r3, r1
 80070f4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	2100      	movs	r1, #0
 8007100:	62b9      	str	r1, [r7, #40]	; 0x28
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007108:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800710c:	460b      	mov	r3, r1
 800710e:	4313      	orrs	r3, r2
 8007110:	d011      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007116:	3308      	adds	r3, #8
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fb78 	bl	8007810 <RCCEx_PLL2_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007132:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	2100      	movs	r1, #0
 8007140:	6239      	str	r1, [r7, #32]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
 8007148:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800714c:	460b      	mov	r3, r1
 800714e:	4313      	orrs	r3, r2
 8007150:	d011      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007156:	3308      	adds	r3, #8
 8007158:	2101      	movs	r1, #1
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fb58 	bl	8007810 <RCCEx_PLL2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	2100      	movs	r1, #0
 8007180:	61b9      	str	r1, [r7, #24]
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	61fb      	str	r3, [r7, #28]
 8007188:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800718c:	460b      	mov	r3, r1
 800718e:	4313      	orrs	r3, r2
 8007190:	d011      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007196:	3308      	adds	r3, #8
 8007198:	2102      	movs	r1, #2
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fb38 	bl	8007810 <RCCEx_PLL2_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80071a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	2100      	movs	r1, #0
 80071c0:	6139      	str	r1, [r7, #16]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80071cc:	460b      	mov	r3, r1
 80071ce:	4313      	orrs	r3, r2
 80071d0:	d011      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d6:	3328      	adds	r3, #40	; 0x28
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fbca 	bl	8007974 <RCCEx_PLL3_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80071e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80071f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	2100      	movs	r1, #0
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800720c:	460b      	mov	r3, r1
 800720e:	4313      	orrs	r3, r2
 8007210:	d011      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007216:	3328      	adds	r3, #40	; 0x28
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fbaa 	bl	8007974 <RCCEx_PLL3_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	2100      	movs	r1, #0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	e9d7 1200 	ldrd	r1, r2, [r7]
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d011      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007256:	3328      	adds	r3, #40	; 0x28
 8007258:	2102      	movs	r1, #2
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fb8a 	bl	8007974 <RCCEx_PLL3_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007276:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	e000      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
}
 8007284:	4618      	mov	r0, r3
 8007286:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800728a:	46bd      	mov	sp, r7
 800728c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007290:	58024400 	.word	0x58024400

08007294 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007298:	f7fe fd54 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 800729c:	4602      	mov	r2, r0
 800729e:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	091b      	lsrs	r3, r3, #4
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	4904      	ldr	r1, [pc, #16]	; (80072bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072aa:	5ccb      	ldrb	r3, [r1, r3]
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	58024400 	.word	0x58024400
 80072bc:	0800d5e0 	.word	0x0800d5e0

080072c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b089      	sub	sp, #36	; 0x24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072c8:	4ba1      	ldr	r3, [pc, #644]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80072d2:	4b9f      	ldr	r3, [pc, #636]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	0b1b      	lsrs	r3, r3, #12
 80072d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80072de:	4b9c      	ldr	r3, [pc, #624]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	091b      	lsrs	r3, r3, #4
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80072ea:	4b99      	ldr	r3, [pc, #612]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ee:	08db      	lsrs	r3, r3, #3
 80072f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8111 	beq.w	8007530 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b02      	cmp	r3, #2
 8007312:	f000 8083 	beq.w	800741c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b02      	cmp	r3, #2
 800731a:	f200 80a1 	bhi.w	8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d056      	beq.n	80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800732a:	e099      	b.n	8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800732c:	4b88      	ldr	r3, [pc, #544]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b00      	cmp	r3, #0
 8007336:	d02d      	beq.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007338:	4b85      	ldr	r3, [pc, #532]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	08db      	lsrs	r3, r3, #3
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	4a84      	ldr	r2, [pc, #528]	; (8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
 8007348:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b7b      	ldr	r3, [pc, #492]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a03 	vldr	s12, [r7, #12]
 8007376:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007392:	e087      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800755c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b6a      	ldr	r3, [pc, #424]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d6:	e065      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ea:	4b59      	ldr	r3, [pc, #356]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800741a:	e043      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800742a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742e:	4b48      	ldr	r3, [pc, #288]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007442:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800745e:	e021      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007472:	4b37      	ldr	r3, [pc, #220]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007482:	ed97 6a03 	vldr	s12, [r7, #12]
 8007486:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074a4:	4b2a      	ldr	r3, [pc, #168]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	0a5b      	lsrs	r3, r3, #9
 80074aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074be:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ca:	ee17 2a90 	vmov	r2, s15
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f8:	ee17 2a90 	vmov	r2, s15
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007500:	4b13      	ldr	r3, [pc, #76]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	0e1b      	lsrs	r3, r3, #24
 8007506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751a:	edd7 6a07 	vldr	s13, [r7, #28]
 800751e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007526:	ee17 2a90 	vmov	r2, s15
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800752e:	e008      	b.n	8007542 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
}
 8007542:	bf00      	nop
 8007544:	3724      	adds	r7, #36	; 0x24
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	58024400 	.word	0x58024400
 8007554:	03d09000 	.word	0x03d09000
 8007558:	46000000 	.word	0x46000000
 800755c:	4c742400 	.word	0x4c742400
 8007560:	4a742400 	.word	0x4a742400
 8007564:	4af42400 	.word	0x4af42400

08007568 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007568:	b480      	push	{r7}
 800756a:	b089      	sub	sp, #36	; 0x24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007570:	4ba1      	ldr	r3, [pc, #644]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800757a:	4b9f      	ldr	r3, [pc, #636]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	0d1b      	lsrs	r3, r3, #20
 8007580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007584:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007586:	4b9c      	ldr	r3, [pc, #624]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007592:	4b99      	ldr	r3, [pc, #612]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007596:	08db      	lsrs	r3, r3, #3
 8007598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8111 	beq.w	80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f000 8083 	beq.w	80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	f200 80a1 	bhi.w	8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d056      	beq.n	8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80075d2:	e099      	b.n	8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075d4:	4b88      	ldr	r3, [pc, #544]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d02d      	beq.n	800763c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075e0:	4b85      	ldr	r3, [pc, #532]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	08db      	lsrs	r3, r3, #3
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	4a84      	ldr	r2, [pc, #528]	; (80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
 80075f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a03 	vldr	s12, [r7, #12]
 800761e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800763a:	e087      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007804 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b6a      	ldr	r3, [pc, #424]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007662:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800767e:	e065      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800768e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007692:	4b59      	ldr	r3, [pc, #356]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c2:	e043      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800780c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80076d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d6:	4b48      	ldr	r3, [pc, #288]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007706:	e021      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771a:	4b37      	ldr	r3, [pc, #220]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772a:	ed97 6a03 	vldr	s12, [r7, #12]
 800772e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800774c:	4b2a      	ldr	r3, [pc, #168]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	0a5b      	lsrs	r3, r3, #9
 8007752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007766:	edd7 6a07 	vldr	s13, [r7, #28]
 800776a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007772:	ee17 2a90 	vmov	r2, s15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800777a:	4b1f      	ldr	r3, [pc, #124]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007794:	edd7 6a07 	vldr	s13, [r7, #28]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	ee17 2a90 	vmov	r2, s15
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077a8:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	0e1b      	lsrs	r3, r3, #24
 80077ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ce:	ee17 2a90 	vmov	r2, s15
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077d6:	e008      	b.n	80077ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	609a      	str	r2, [r3, #8]
}
 80077ea:	bf00      	nop
 80077ec:	3724      	adds	r7, #36	; 0x24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	58024400 	.word	0x58024400
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	46000000 	.word	0x46000000
 8007804:	4c742400 	.word	0x4c742400
 8007808:	4a742400 	.word	0x4a742400
 800780c:	4af42400 	.word	0x4af42400

08007810 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800781e:	4b53      	ldr	r3, [pc, #332]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	2b03      	cmp	r3, #3
 8007828:	d101      	bne.n	800782e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e099      	b.n	8007962 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800782e:	4b4f      	ldr	r3, [pc, #316]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a4e      	ldr	r2, [pc, #312]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007834:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800783a:	f7f9 ff1f 	bl	800167c <HAL_GetTick>
 800783e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007840:	e008      	b.n	8007854 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007842:	f7f9 ff1b 	bl	800167c <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e086      	b.n	8007962 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007854:	4b45      	ldr	r3, [pc, #276]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f0      	bne.n	8007842 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007860:	4b42      	ldr	r3, [pc, #264]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007864:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	493f      	ldr	r1, [pc, #252]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007870:	4313      	orrs	r3, r2
 8007872:	628b      	str	r3, [r1, #40]	; 0x28
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	3b01      	subs	r3, #1
 800787a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	3b01      	subs	r3, #1
 8007884:	025b      	lsls	r3, r3, #9
 8007886:	b29b      	uxth	r3, r3
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	3b01      	subs	r3, #1
 8007890:	041b      	lsls	r3, r3, #16
 8007892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	3b01      	subs	r3, #1
 800789e:	061b      	lsls	r3, r3, #24
 80078a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078a4:	4931      	ldr	r1, [pc, #196]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80078aa:	4b30      	ldr	r3, [pc, #192]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	492d      	ldr	r1, [pc, #180]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80078bc:	4b2b      	ldr	r3, [pc, #172]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	f023 0220 	bic.w	r2, r3, #32
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	4928      	ldr	r1, [pc, #160]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80078ce:	4b27      	ldr	r3, [pc, #156]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	4a26      	ldr	r2, [pc, #152]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078d4:	f023 0310 	bic.w	r3, r3, #16
 80078d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078da:	4b24      	ldr	r3, [pc, #144]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078de:	4b24      	ldr	r3, [pc, #144]	; (8007970 <RCCEx_PLL2_Config+0x160>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	69d2      	ldr	r2, [r2, #28]
 80078e6:	00d2      	lsls	r2, r2, #3
 80078e8:	4920      	ldr	r1, [pc, #128]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078ee:	4b1f      	ldr	r3, [pc, #124]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	4a1e      	ldr	r2, [pc, #120]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 80078f4:	f043 0310 	orr.w	r3, r3, #16
 80078f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007900:	4b1a      	ldr	r3, [pc, #104]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	4a19      	ldr	r2, [pc, #100]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800790a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800790c:	e00f      	b.n	800792e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d106      	bne.n	8007922 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007914:	4b15      	ldr	r3, [pc, #84]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	4a14      	ldr	r2, [pc, #80]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 800791a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800791e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007920:	e005      	b.n	800792e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	4a11      	ldr	r2, [pc, #68]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800792c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a0e      	ldr	r2, [pc, #56]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793a:	f7f9 fe9f 	bl	800167c <HAL_GetTick>
 800793e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007940:	e008      	b.n	8007954 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007942:	f7f9 fe9b 	bl	800167c <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e006      	b.n	8007962 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007954:	4b05      	ldr	r3, [pc, #20]	; (800796c <RCCEx_PLL2_Config+0x15c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f0      	beq.n	8007942 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	58024400 	.word	0x58024400
 8007970:	ffff0007 	.word	0xffff0007

08007974 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007982:	4b53      	ldr	r3, [pc, #332]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b03      	cmp	r3, #3
 800798c:	d101      	bne.n	8007992 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e099      	b.n	8007ac6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007992:	4b4f      	ldr	r3, [pc, #316]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a4e      	ldr	r2, [pc, #312]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800799c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800799e:	f7f9 fe6d 	bl	800167c <HAL_GetTick>
 80079a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079a4:	e008      	b.n	80079b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079a6:	f7f9 fe69 	bl	800167c <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e086      	b.n	8007ac6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079b8:	4b45      	ldr	r3, [pc, #276]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1f0      	bne.n	80079a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80079c4:	4b42      	ldr	r3, [pc, #264]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	051b      	lsls	r3, r3, #20
 80079d2:	493f      	ldr	r1, [pc, #252]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	628b      	str	r3, [r1, #40]	; 0x28
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	3b01      	subs	r3, #1
 80079de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	025b      	lsls	r3, r3, #9
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	061b      	lsls	r3, r3, #24
 8007a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a08:	4931      	ldr	r1, [pc, #196]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a0e:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	492d      	ldr	r1, [pc, #180]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a20:	4b2b      	ldr	r3, [pc, #172]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	4928      	ldr	r1, [pc, #160]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a32:	4b27      	ldr	r3, [pc, #156]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a36:	4a26      	ldr	r2, [pc, #152]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a3e:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a42:	4b24      	ldr	r3, [pc, #144]	; (8007ad4 <RCCEx_PLL3_Config+0x160>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	69d2      	ldr	r2, [r2, #28]
 8007a4a:	00d2      	lsls	r2, r2, #3
 8007a4c:	4920      	ldr	r1, [pc, #128]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a52:	4b1f      	ldr	r3, [pc, #124]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	4a1e      	ldr	r2, [pc, #120]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d106      	bne.n	8007a72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a64:	4b1a      	ldr	r3, [pc, #104]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a70:	e00f      	b.n	8007a92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d106      	bne.n	8007a86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a78:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	4a14      	ldr	r2, [pc, #80]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a84:	e005      	b.n	8007a92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	4a11      	ldr	r2, [pc, #68]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a92:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a0e      	ldr	r2, [pc, #56]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a9e:	f7f9 fded 	bl	800167c <HAL_GetTick>
 8007aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007aa4:	e008      	b.n	8007ab8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007aa6:	f7f9 fde9 	bl	800167c <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d901      	bls.n	8007ab8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e006      	b.n	8007ac6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ab8:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <RCCEx_PLL3_Config+0x15c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0f0      	beq.n	8007aa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	58024400 	.word	0x58024400
 8007ad4:	ffff0007 	.word	0xffff0007

08007ad8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e158      	b.n	8007d9c <HAL_SPI_Init+0x2c4>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a5f      	ldr	r2, [pc, #380]	; (8007c74 <HAL_SPI_Init+0x19c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00f      	beq.n	8007b1a <HAL_SPI_Init+0x42>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a5e      	ldr	r2, [pc, #376]	; (8007c78 <HAL_SPI_Init+0x1a0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00a      	beq.n	8007b1a <HAL_SPI_Init+0x42>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a5c      	ldr	r2, [pc, #368]	; (8007c7c <HAL_SPI_Init+0x1a4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d005      	beq.n	8007b1a <HAL_SPI_Init+0x42>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b0f      	cmp	r3, #15
 8007b14:	d901      	bls.n	8007b1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e140      	b.n	8007d9c <HAL_SPI_Init+0x2c4>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fe9a 	bl	8008854 <SPI_GetPacketSize>
 8007b20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a53      	ldr	r2, [pc, #332]	; (8007c74 <HAL_SPI_Init+0x19c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d00c      	beq.n	8007b46 <HAL_SPI_Init+0x6e>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a51      	ldr	r2, [pc, #324]	; (8007c78 <HAL_SPI_Init+0x1a0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d007      	beq.n	8007b46 <HAL_SPI_Init+0x6e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a50      	ldr	r2, [pc, #320]	; (8007c7c <HAL_SPI_Init+0x1a4>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d002      	beq.n	8007b46 <HAL_SPI_Init+0x6e>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d811      	bhi.n	8007b6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b4a:	4a4a      	ldr	r2, [pc, #296]	; (8007c74 <HAL_SPI_Init+0x19c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d009      	beq.n	8007b64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a48      	ldr	r2, [pc, #288]	; (8007c78 <HAL_SPI_Init+0x1a0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d004      	beq.n	8007b64 <HAL_SPI_Init+0x8c>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a47      	ldr	r2, [pc, #284]	; (8007c7c <HAL_SPI_Init+0x1a4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d104      	bne.n	8007b6e <HAL_SPI_Init+0x96>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d901      	bls.n	8007b6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e116      	b.n	8007d9c <HAL_SPI_Init+0x2c4>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d135      	bne.n	8007be6 <HAL_SPI_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a3e      	ldr	r2, [pc, #248]	; (8007c80 <HAL_SPI_Init+0x1a8>)
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a3d      	ldr	r2, [pc, #244]	; (8007c84 <HAL_SPI_Init+0x1ac>)
 8007b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a3c      	ldr	r2, [pc, #240]	; (8007c88 <HAL_SPI_Init+0x1b0>)
 8007b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a3b      	ldr	r2, [pc, #236]	; (8007c8c <HAL_SPI_Init+0x1b4>)
 8007b9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a3a      	ldr	r2, [pc, #232]	; (8007c90 <HAL_SPI_Init+0x1b8>)
 8007ba6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a39      	ldr	r2, [pc, #228]	; (8007c94 <HAL_SPI_Init+0x1bc>)
 8007bae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a38      	ldr	r2, [pc, #224]	; (8007c98 <HAL_SPI_Init+0x1c0>)
 8007bb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a37      	ldr	r2, [pc, #220]	; (8007c9c <HAL_SPI_Init+0x1c4>)
 8007bbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hspi->SuspendCallback      = HAL_SPI_SuspendCallback;      /* Legacy weak SuspendCallback      */
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a36      	ldr	r2, [pc, #216]	; (8007ca0 <HAL_SPI_Init+0x1c8>)
 8007bc6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    if (hspi->MspInitCallback == NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <HAL_SPI_Init+0x104>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a33      	ldr	r2, [pc, #204]	; (8007ca4 <HAL_SPI_Init+0x1cc>)
 8007bd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2202      	movs	r2, #2
 8007bea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0201 	bic.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007c08:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c12:	d119      	bne.n	8007c48 <HAL_SPI_Init+0x170>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c1c:	d103      	bne.n	8007c26 <HAL_SPI_Init+0x14e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d008      	beq.n	8007c38 <HAL_SPI_Init+0x160>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10c      	bne.n	8007c48 <HAL_SPI_Init+0x170>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c36:	d107      	bne.n	8007c48 <HAL_SPI_Init+0x170>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c46:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d029      	beq.n	8007ca8 <HAL_SPI_Init+0x1d0>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	2b06      	cmp	r3, #6
 8007c5a:	d925      	bls.n	8007ca8 <HAL_SPI_Init+0x1d0>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e021      	b.n	8007cb8 <HAL_SPI_Init+0x1e0>
 8007c74:	40013000 	.word	0x40013000
 8007c78:	40003800 	.word	0x40003800
 8007c7c:	40003c00 	.word	0x40003c00
 8007c80:	08008575 	.word	0x08008575
 8007c84:	08008589 	.word	0x08008589
 8007c88:	0800859d 	.word	0x0800859d
 8007c8c:	080085b1 	.word	0x080085b1
 8007c90:	080085c5 	.word	0x080085c5
 8007c94:	080085d9 	.word	0x080085d9
 8007c98:	080085ed 	.word	0x080085ed
 8007c9c:	08008601 	.word	0x08008601
 8007ca0:	08008615 	.word	0x08008615
 8007ca4:	08001019 	.word	0x08001019
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cb6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	69da      	ldr	r2, [r3, #28]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	ea42 0103 	orr.w	r1, r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d18:	ea42 0103 	orr.w	r1, r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d113      	bne.n	8007d58 <HAL_SPI_Init+0x280>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d42:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d56:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0201 	bic.w	r2, r2, #1
 8007d66:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <HAL_SPI_Init+0x2b2>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	460b      	mov	r3, r1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d109      	bne.n	8007dd0 <HAL_SPI_RegisterCallback+0x2c>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e09f      	b.n	8007f10 <HAL_SPI_RegisterCallback+0x16c>
  }
  /* Lock the process */
  __HAL_LOCK(hspi);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_SPI_RegisterCallback+0x3a>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e098      	b.n	8007f10 <HAL_SPI_RegisterCallback+0x16c>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (HAL_SPI_STATE_READY == hspi->State)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d15e      	bne.n	8007eb0 <HAL_SPI_RegisterCallback+0x10c>
  {
    switch (CallbackID)
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	2b0a      	cmp	r3, #10
 8007df6:	d850      	bhi.n	8007e9a <HAL_SPI_RegisterCallback+0xf6>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <HAL_SPI_RegisterCallback+0x5c>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e2d 	.word	0x08007e2d
 8007e04:	08007e37 	.word	0x08007e37
 8007e08:	08007e41 	.word	0x08007e41
 8007e0c:	08007e4b 	.word	0x08007e4b
 8007e10:	08007e55 	.word	0x08007e55
 8007e14:	08007e5f 	.word	0x08007e5f
 8007e18:	08007e69 	.word	0x08007e69
 8007e1c:	08007e73 	.word	0x08007e73
 8007e20:	08007e7d 	.word	0x08007e7d
 8007e24:	08007e87 	.word	0x08007e87
 8007e28:	08007e91 	.word	0x08007e91
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007e34:	e067      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8007e3e:	e062      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8007e48:	e05d      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8007e52:	e058      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007e5c:	e053      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8007e66:	e04e      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007e70:	e049      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007e7a:	e044      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_SUSPEND_CB_ID :
        hspi->SuspendCallback = pCallback;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8007e84:	e03f      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007e8e:	e03a      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007e98:	e035      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Return error status */
        status =  HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	75fb      	strb	r3, [r7, #23]
        break;
 8007eae:	e02a      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d11a      	bne.n	8007ef2 <HAL_SPI_RegisterCallback+0x14e>
  {
    switch (CallbackID)
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d002      	beq.n	8007ec8 <HAL_SPI_RegisterCallback+0x124>
 8007ec2:	2b0a      	cmp	r3, #10
 8007ec4:	d005      	beq.n	8007ed2 <HAL_SPI_RegisterCallback+0x12e>
 8007ec6:	e009      	b.n	8007edc <HAL_SPI_RegisterCallback+0x138>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007ed0:	e019      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007eda:	e014      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Return error status */
        status =  HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]
        break;
 8007ef0:	e009      	b.n	8007f06 <HAL_SPI_RegisterCallback+0x162>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return error status */
    status =  HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return status;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_SPI_Receive_DMA+0x20>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e134      	b.n	80081a6 <HAL_SPI_Receive_DMA+0x28a>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d007      	beq.n	8007f60 <HAL_SPI_Receive_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8007f50:	2302      	movs	r3, #2
 8007f52:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	e122      	b.n	80081a6 <HAL_SPI_Receive_DMA+0x28a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_SPI_Receive_DMA+0x50>
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d107      	bne.n	8007f7c <HAL_SPI_Receive_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	e114      	b.n	80081a6 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2204      	movs	r2, #4
 8007f80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	88fa      	ldrh	r2, [r7, #6]
 8007f96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	88fa      	ldrh	r2, [r7, #6]
 8007f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007fc6:	d108      	bne.n	8007fda <HAL_SPI_Receive_DMA+0xbe>
  {
    SPI_1LINE_RX(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e009      	b.n	8007fee <HAL_SPI_Receive_DMA+0xd2>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007fec:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b0f      	cmp	r3, #15
 8007ff4:	d905      	bls.n	8008002 <HAL_SPI_Receive_DMA+0xe6>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008000:	d10f      	bne.n	8008022 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008006:	2b07      	cmp	r3, #7
 8008008:	d913      	bls.n	8008032 <HAL_SPI_Receive_DMA+0x116>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008014:	d00d      	beq.n	8008032 <HAL_SPI_Receive_DMA+0x116>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800801a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800801c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008020:	d007      	beq.n	8008032 <HAL_SPI_Receive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	e0b9      	b.n	80081a6 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008040:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	2b07      	cmp	r3, #7
 8008048:	d820      	bhi.n	800808c <HAL_SPI_Receive_DMA+0x170>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008054:	d109      	bne.n	800806a <HAL_SPI_Receive_DMA+0x14e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800805c:	b29b      	uxth	r3, r3
 800805e:	3301      	adds	r3, #1
 8008060:	105b      	asrs	r3, r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008074:	d11e      	bne.n	80080b4 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800807c:	b29b      	uxth	r3, r3
 800807e:	3303      	adds	r3, #3
 8008080:	109b      	asrs	r3, r3, #2
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800808a:	e013      	b.n	80080b4 <HAL_SPI_Receive_DMA+0x198>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b0f      	cmp	r3, #15
 8008092:	d80f      	bhi.n	80080b4 <HAL_SPI_Receive_DMA+0x198>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800809e:	d109      	bne.n	80080b4 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3301      	adds	r3, #1
 80080aa:	105b      	asrs	r3, r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080b8:	4a3d      	ldr	r2, [pc, #244]	; (80081b0 <HAL_SPI_Receive_DMA+0x294>)
 80080ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080c0:	4a3c      	ldr	r2, [pc, #240]	; (80081b4 <HAL_SPI_Receive_DMA+0x298>)
 80080c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080c8:	4a3b      	ldr	r2, [pc, #236]	; (80081b8 <HAL_SPI_Receive_DMA+0x29c>)
 80080ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080d0:	2200      	movs	r2, #0
 80080d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3330      	adds	r3, #48	; 0x30
 80080de:	4619      	mov	r1, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080ec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80080ee:	f7f9 ff51 	bl	8001f94 <HAL_DMA_Start_IT>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d013      	beq.n	8008120 <HAL_SPI_Receive_DMA+0x204>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fe:	f043 0210 	orr.w	r2, r3, #16
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	e042      	b.n	80081a6 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d108      	bne.n	800813e <HAL_SPI_Receive_DMA+0x222>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6859      	ldr	r1, [r3, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b21      	ldr	r3, [pc, #132]	; (80081bc <HAL_SPI_Receive_DMA+0x2a0>)
 8008138:	400b      	ands	r3, r1
 800813a:	6053      	str	r3, [r2, #4]
 800813c:	e009      	b.n	8008152 <HAL_SPI_Receive_DMA+0x236>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	4b1d      	ldr	r3, [pc, #116]	; (80081bc <HAL_SPI_Receive_DMA+0x2a0>)
 8008146:	4013      	ands	r3, r2
 8008148:	88f9      	ldrh	r1, [r7, #6]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	6812      	ldr	r2, [r2, #0]
 800814e:	430b      	orrs	r3, r1
 8008150:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008160:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8008170:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f042 0201 	orr.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800818a:	d107      	bne.n	800819c <HAL_SPI_Receive_DMA+0x280>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800819a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	08008673 	.word	0x08008673
 80081b4:	08008629 	.word	0x08008629
 80081b8:	08008693 	.word	0x08008693
 80081bc:	ffff0000 	.word	0xffff0000

080081c0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08a      	sub	sp, #40	; 0x28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80081d8:	6a3a      	ldr	r2, [r7, #32]
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	4013      	ands	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80081e8:	2300      	movs	r3, #0
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80081f2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3330      	adds	r3, #48	; 0x30
 80081fa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008202:	2b00      	cmp	r3, #0
 8008204:	d012      	beq.n	800822c <HAL_SPI_IRQHandler+0x6c>
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	f003 0308 	and.w	r3, r3, #8
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00d      	beq.n	800822c <HAL_SPI_IRQHandler+0x6c>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800821e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
#else
    HAL_SPI_SuspendCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800822a:	e19c      	b.n	8008566 <HAL_SPI_IRQHandler+0x3a6>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d113      	bne.n	800825e <HAL_SPI_IRQHandler+0x9e>
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10e      	bne.n	800825e <HAL_SPI_IRQHandler+0x9e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <HAL_SPI_IRQHandler+0x9e>
  {
    hspi->TxISR(hspi);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
    handled = 1UL;
 800825a:	2301      	movs	r3, #1
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10f      	bne.n	8008288 <HAL_SPI_IRQHandler+0xc8>
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00a      	beq.n	8008288 <HAL_SPI_IRQHandler+0xc8>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <HAL_SPI_IRQHandler+0xc8>
  {
    hspi->RxISR(hspi);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	4798      	blx	r3
    handled = 1UL;
 8008284:	2301      	movs	r3, #1
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10f      	bne.n	80082b2 <HAL_SPI_IRQHandler+0xf2>
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <HAL_SPI_IRQHandler+0xf2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d105      	bne.n	80082b2 <HAL_SPI_IRQHandler+0xf2>
  {
    hspi->TxISR(hspi);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
    handled = 1UL;
 80082ae:	2301      	movs	r3, #1
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f040 8151 	bne.w	800855c <HAL_SPI_IRQHandler+0x39c>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8093 	beq.w	80083ec <HAL_SPI_IRQHandler+0x22c>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	699a      	ldr	r2, [r3, #24]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0208 	orr.w	r2, r2, #8
 80082d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699a      	ldr	r2, [r3, #24]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0210 	orr.w	r2, r2, #16
 80082e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699a      	ldr	r2, [r3, #24]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0208 	bic.w	r2, r2, #8
 8008304:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d13d      	bne.n	8008390 <HAL_SPI_IRQHandler+0x1d0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008314:	e036      	b.n	8008384 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	2b0f      	cmp	r3, #15
 800831c:	d90b      	bls.n	8008336 <HAL_SPI_IRQHandler+0x176>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008326:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008328:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800832e:	1d1a      	adds	r2, r3, #4
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	665a      	str	r2, [r3, #100]	; 0x64
 8008334:	e01d      	b.n	8008372 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b07      	cmp	r3, #7
 800833c:	d90b      	bls.n	8008356 <HAL_SPI_IRQHandler+0x196>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	8812      	ldrh	r2, [r2, #0]
 8008346:	b292      	uxth	r2, r2
 8008348:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800834e:	1c9a      	adds	r2, r3, #2
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	665a      	str	r2, [r3, #100]	; 0x64
 8008354:	e00d      	b.n	8008372 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800836c:	1c5a      	adds	r2, r3, #1
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008378:	b29b      	uxth	r3, r3
 800837a:	3b01      	subs	r3, #1
 800837c:	b29a      	uxth	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800838a:	b29b      	uxth	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1c2      	bne.n	8008316 <HAL_SPI_IRQHandler+0x156>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f9bf 	bl	8008714 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <HAL_SPI_IRQHandler+0x1f4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80083b2:	e0d8      	b.n	8008566 <HAL_SPI_IRQHandler+0x3a6>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80083b4:	7cfb      	ldrb	r3, [r7, #19]
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	d105      	bne.n	80083c6 <HAL_SPI_IRQHandler+0x206>
    {
      hspi->TxRxCpltCallback(hspi);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 80083c4:	e0cc      	b.n	8008560 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80083c6:	7cfb      	ldrb	r3, [r7, #19]
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d105      	bne.n	80083d8 <HAL_SPI_IRQHandler+0x218>
      hspi->RxCpltCallback(hspi);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	4798      	blx	r3
    return;
 80083d6:	e0c3      	b.n	8008560 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80083d8:	7cfb      	ldrb	r3, [r7, #19]
 80083da:	2b03      	cmp	r3, #3
 80083dc:	f040 80c0 	bne.w	8008560 <HAL_SPI_IRQHandler+0x3a0>
      hspi->TxCpltCallback(hspi);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
    return;
 80083ea:	e0b9      	b.n	8008560 <HAL_SPI_IRQHandler+0x3a0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 80b7 	beq.w	8008566 <HAL_SPI_IRQHandler+0x3a6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00f      	beq.n	8008422 <HAL_SPI_IRQHandler+0x262>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008408:	f043 0204 	orr.w	r2, r3, #4
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699a      	ldr	r2, [r3, #24]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008420:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00f      	beq.n	800844c <HAL_SPI_IRQHandler+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008432:	f043 0201 	orr.w	r2, r3, #1
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800844a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00f      	beq.n	8008476 <HAL_SPI_IRQHandler+0x2b6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800845c:	f043 0208 	orr.w	r2, r3, #8
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	699a      	ldr	r2, [r3, #24]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008474:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00f      	beq.n	80084a0 <HAL_SPI_IRQHandler+0x2e0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008486:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699a      	ldr	r2, [r3, #24]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0220 	orr.w	r2, r2, #32
 800849e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d05c      	beq.n	8008564 <HAL_SPI_IRQHandler+0x3a4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0201 	bic.w	r2, r2, #1
 80084b8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6919      	ldr	r1, [r3, #16]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4b29      	ldr	r3, [pc, #164]	; (800856c <HAL_SPI_IRQHandler+0x3ac>)
 80084c6:	400b      	ands	r3, r1
 80084c8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084d4:	d138      	bne.n	8008548 <HAL_SPI_IRQHandler+0x388>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80084e4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d013      	beq.n	8008516 <HAL_SPI_IRQHandler+0x356>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f2:	4a1f      	ldr	r2, [pc, #124]	; (8008570 <HAL_SPI_IRQHandler+0x3b0>)
 80084f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f9 ffb4 	bl	8002468 <HAL_DMA_Abort_IT>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d007      	beq.n	8008516 <HAL_SPI_IRQHandler+0x356>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800851a:	2b00      	cmp	r3, #0
 800851c:	d022      	beq.n	8008564 <HAL_SPI_IRQHandler+0x3a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008522:	4a13      	ldr	r2, [pc, #76]	; (8008570 <HAL_SPI_IRQHandler+0x3b0>)
 8008524:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800852a:	4618      	mov	r0, r3
 800852c:	f7f9 ff9c 	bl	8002468 <HAL_DMA_Abort_IT>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d016      	beq.n	8008564 <HAL_SPI_IRQHandler+0x3a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008546:	e00d      	b.n	8008564 <HAL_SPI_IRQHandler+0x3a4>
        hspi->State = HAL_SPI_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        hspi->ErrorCallback(hspi);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
    return;
 800855a:	e003      	b.n	8008564 <HAL_SPI_IRQHandler+0x3a4>
    return;
 800855c:	bf00      	nop
 800855e:	e002      	b.n	8008566 <HAL_SPI_IRQHandler+0x3a6>
    return;
 8008560:	bf00      	nop
 8008562:	e000      	b.n	8008566 <HAL_SPI_IRQHandler+0x3a6>
    return;
 8008564:	bf00      	nop
  }
}
 8008566:	3728      	adds	r7, #40	; 0x28
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	fffffc94 	.word	0xfffffc94
 8008570:	080086dd 	.word	0x080086dd

08008574 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b07      	cmp	r3, #7
 8008640:	d013      	beq.n	800866a <SPI_DMAReceiveCplt+0x42>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864c:	d105      	bne.n	800865a <SPI_DMAReceiveCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008658:	e007      	b.n	800866a <SPI_DMAReceiveCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0208 	orr.w	r2, r2, #8
 8008668:	611a      	str	r2, [r3, #16]
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800868a:	bf00      	nop
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7fb f851 	bl	8003748 <HAL_DMA_GetError>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d013      	beq.n	80086d4 <SPI_DMAError+0x42>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f831 	bl	8008714 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b8:	f043 0210 	orr.w	r2, r3, #16
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	4798      	blx	r3
#else
    HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0208 	orr.w	r2, r2, #8
 8008732:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0210 	orr.w	r2, r2, #16
 8008742:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 0201 	bic.w	r2, r2, #1
 8008752:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6919      	ldr	r1, [r3, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b3c      	ldr	r3, [pc, #240]	; (8008850 <SPI_CloseTransfer+0x13c>)
 8008760:	400b      	ands	r3, r1
 8008762:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008772:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b04      	cmp	r3, #4
 800877e:	d014      	beq.n	80087aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00f      	beq.n	80087aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008790:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	699a      	ldr	r2, [r3, #24]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0220 	orr.w	r2, r2, #32
 80087a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d014      	beq.n	80087e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00f      	beq.n	80087e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087c6:	f043 0204 	orr.w	r2, r3, #4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00f      	beq.n	800880a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f0:	f043 0201 	orr.w	r2, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008808:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00f      	beq.n	8008834 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800881a:	f043 0208 	orr.w	r2, r3, #8
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008832:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008844:	bf00      	nop
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	fffffc90 	.word	0xfffffc90

08008854 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008860:	095b      	lsrs	r3, r3, #5
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	3307      	adds	r3, #7
 8008872:	08db      	lsrs	r3, r3, #3
 8008874:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	fb02 f303 	mul.w	r3, r2, r3
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e049      	b.n	8008930 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f841 	bl	8008938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f000 f9ff 	bl	8008ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b01      	cmp	r3, #1
 800895e:	d001      	beq.n	8008964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e054      	b.n	8008a0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a26      	ldr	r2, [pc, #152]	; (8008a1c <HAL_TIM_Base_Start_IT+0xd0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d022      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x80>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898e:	d01d      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x80>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <HAL_TIM_Base_Start_IT+0xd4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d018      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x80>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a21      	ldr	r2, [pc, #132]	; (8008a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d013      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x80>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d00e      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x80>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a1e      	ldr	r2, [pc, #120]	; (8008a2c <HAL_TIM_Base_Start_IT+0xe0>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d009      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x80>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a1c      	ldr	r2, [pc, #112]	; (8008a30 <HAL_TIM_Base_Start_IT+0xe4>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d004      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x80>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a1b      	ldr	r2, [pc, #108]	; (8008a34 <HAL_TIM_Base_Start_IT+0xe8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d115      	bne.n	80089f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	4b19      	ldr	r3, [pc, #100]	; (8008a38 <HAL_TIM_Base_Start_IT+0xec>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b06      	cmp	r3, #6
 80089dc:	d015      	beq.n	8008a0a <HAL_TIM_Base_Start_IT+0xbe>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e4:	d011      	beq.n	8008a0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f042 0201 	orr.w	r2, r2, #1
 80089f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089f6:	e008      	b.n	8008a0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	e000      	b.n	8008a0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	40010000 	.word	0x40010000
 8008a20:	40000400 	.word	0x40000400
 8008a24:	40000800 	.word	0x40000800
 8008a28:	40000c00 	.word	0x40000c00
 8008a2c:	40010400 	.word	0x40010400
 8008a30:	40001800 	.word	0x40001800
 8008a34:	40014000 	.word	0x40014000
 8008a38:	00010007 	.word	0x00010007

08008a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d122      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d11b      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f06f 0202 	mvn.w	r2, #2
 8008a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f905 	bl	8008c8e <HAL_TIM_IC_CaptureCallback>
 8008a84:	e005      	b.n	8008a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f8f7 	bl	8008c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f908 	bl	8008ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d122      	bne.n	8008aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d11b      	bne.n	8008aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0204 	mvn.w	r2, #4
 8008abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f8db 	bl	8008c8e <HAL_TIM_IC_CaptureCallback>
 8008ad8:	e005      	b.n	8008ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f8cd 	bl	8008c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f8de 	bl	8008ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f003 0308 	and.w	r3, r3, #8
 8008af6:	2b08      	cmp	r3, #8
 8008af8:	d122      	bne.n	8008b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d11b      	bne.n	8008b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f06f 0208 	mvn.w	r2, #8
 8008b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2204      	movs	r2, #4
 8008b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f8b1 	bl	8008c8e <HAL_TIM_IC_CaptureCallback>
 8008b2c:	e005      	b.n	8008b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f8a3 	bl	8008c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f8b4 	bl	8008ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	f003 0310 	and.w	r3, r3, #16
 8008b4a:	2b10      	cmp	r3, #16
 8008b4c:	d122      	bne.n	8008b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	2b10      	cmp	r3, #16
 8008b5a:	d11b      	bne.n	8008b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f06f 0210 	mvn.w	r2, #16
 8008b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2208      	movs	r2, #8
 8008b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f887 	bl	8008c8e <HAL_TIM_IC_CaptureCallback>
 8008b80:	e005      	b.n	8008b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f879 	bl	8008c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f88a 	bl	8008ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d10e      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d107      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f06f 0201 	mvn.w	r2, #1
 8008bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7f8 f928 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bca:	2b80      	cmp	r3, #128	; 0x80
 8008bcc:	d10e      	bne.n	8008bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd8:	2b80      	cmp	r3, #128	; 0x80
 8008bda:	d107      	bne.n	8008bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f914 	bl	8008e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfa:	d10e      	bne.n	8008c1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c06:	2b80      	cmp	r3, #128	; 0x80
 8008c08:	d107      	bne.n	8008c1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f907 	bl	8008e28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c24:	2b40      	cmp	r3, #64	; 0x40
 8008c26:	d10e      	bne.n	8008c46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d107      	bne.n	8008c46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f838 	bl	8008cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	d10e      	bne.n	8008c72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d107      	bne.n	8008c72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f06f 0220 	mvn.w	r2, #32
 8008c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f8c7 	bl	8008e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a40      	ldr	r2, [pc, #256]	; (8008de0 <TIM_Base_SetConfig+0x114>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cea:	d00f      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a3d      	ldr	r2, [pc, #244]	; (8008de4 <TIM_Base_SetConfig+0x118>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00b      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a3c      	ldr	r2, [pc, #240]	; (8008de8 <TIM_Base_SetConfig+0x11c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d007      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a3b      	ldr	r2, [pc, #236]	; (8008dec <TIM_Base_SetConfig+0x120>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d003      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a3a      	ldr	r2, [pc, #232]	; (8008df0 <TIM_Base_SetConfig+0x124>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d108      	bne.n	8008d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a2f      	ldr	r2, [pc, #188]	; (8008de0 <TIM_Base_SetConfig+0x114>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d01f      	beq.n	8008d66 <TIM_Base_SetConfig+0x9a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2c:	d01b      	beq.n	8008d66 <TIM_Base_SetConfig+0x9a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a2c      	ldr	r2, [pc, #176]	; (8008de4 <TIM_Base_SetConfig+0x118>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d017      	beq.n	8008d66 <TIM_Base_SetConfig+0x9a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a2b      	ldr	r2, [pc, #172]	; (8008de8 <TIM_Base_SetConfig+0x11c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <TIM_Base_SetConfig+0x9a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a2a      	ldr	r2, [pc, #168]	; (8008dec <TIM_Base_SetConfig+0x120>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00f      	beq.n	8008d66 <TIM_Base_SetConfig+0x9a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a29      	ldr	r2, [pc, #164]	; (8008df0 <TIM_Base_SetConfig+0x124>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00b      	beq.n	8008d66 <TIM_Base_SetConfig+0x9a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a28      	ldr	r2, [pc, #160]	; (8008df4 <TIM_Base_SetConfig+0x128>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d007      	beq.n	8008d66 <TIM_Base_SetConfig+0x9a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a27      	ldr	r2, [pc, #156]	; (8008df8 <TIM_Base_SetConfig+0x12c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <TIM_Base_SetConfig+0x9a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a26      	ldr	r2, [pc, #152]	; (8008dfc <TIM_Base_SetConfig+0x130>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d108      	bne.n	8008d78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a10      	ldr	r2, [pc, #64]	; (8008de0 <TIM_Base_SetConfig+0x114>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00f      	beq.n	8008dc4 <TIM_Base_SetConfig+0xf8>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a12      	ldr	r2, [pc, #72]	; (8008df0 <TIM_Base_SetConfig+0x124>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00b      	beq.n	8008dc4 <TIM_Base_SetConfig+0xf8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a11      	ldr	r2, [pc, #68]	; (8008df4 <TIM_Base_SetConfig+0x128>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d007      	beq.n	8008dc4 <TIM_Base_SetConfig+0xf8>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a10      	ldr	r2, [pc, #64]	; (8008df8 <TIM_Base_SetConfig+0x12c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_Base_SetConfig+0xf8>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a0f      	ldr	r2, [pc, #60]	; (8008dfc <TIM_Base_SetConfig+0x130>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d103      	bne.n	8008dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	691a      	ldr	r2, [r3, #16]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	615a      	str	r2, [r3, #20]
}
 8008dd2:	bf00      	nop
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40010000 	.word	0x40010000
 8008de4:	40000400 	.word	0x40000400
 8008de8:	40000800 	.word	0x40000800
 8008dec:	40000c00 	.word	0x40000c00
 8008df0:	40010400 	.word	0x40010400
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40014400 	.word	0x40014400
 8008dfc:	40014800 	.word	0x40014800

08008e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e042      	b.n	8008ed4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7f8 f97b 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2224      	movs	r2, #36	; 0x24
 8008e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0201 	bic.w	r2, r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f82c 	bl	8008edc <UART_SetConfig>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d101      	bne.n	8008e8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e022      	b.n	8008ed4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fd88 	bl	80099ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fe0f 	bl	8009af0 <UART_CheckIdleState>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ee0:	b092      	sub	sp, #72	; 0x48
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4bbe      	ldr	r3, [pc, #760]	; (8009204 <UART_SetConfig+0x328>)
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4ab3      	ldr	r2, [pc, #716]	; (8009208 <UART_SetConfig+0x32c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f44:	4313      	orrs	r3, r2
 8008f46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4baf      	ldr	r3, [pc, #700]	; (800920c <UART_SetConfig+0x330>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	f023 010f 	bic.w	r1, r3, #15
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4aa6      	ldr	r2, [pc, #664]	; (8009210 <UART_SetConfig+0x334>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d177      	bne.n	800906c <UART_SetConfig+0x190>
 8008f7c:	4ba5      	ldr	r3, [pc, #660]	; (8009214 <UART_SetConfig+0x338>)
 8008f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f84:	2b28      	cmp	r3, #40	; 0x28
 8008f86:	d86d      	bhi.n	8009064 <UART_SetConfig+0x188>
 8008f88:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <UART_SetConfig+0xb4>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08009035 	.word	0x08009035
 8008f94:	08009065 	.word	0x08009065
 8008f98:	08009065 	.word	0x08009065
 8008f9c:	08009065 	.word	0x08009065
 8008fa0:	08009065 	.word	0x08009065
 8008fa4:	08009065 	.word	0x08009065
 8008fa8:	08009065 	.word	0x08009065
 8008fac:	08009065 	.word	0x08009065
 8008fb0:	0800903d 	.word	0x0800903d
 8008fb4:	08009065 	.word	0x08009065
 8008fb8:	08009065 	.word	0x08009065
 8008fbc:	08009065 	.word	0x08009065
 8008fc0:	08009065 	.word	0x08009065
 8008fc4:	08009065 	.word	0x08009065
 8008fc8:	08009065 	.word	0x08009065
 8008fcc:	08009065 	.word	0x08009065
 8008fd0:	08009045 	.word	0x08009045
 8008fd4:	08009065 	.word	0x08009065
 8008fd8:	08009065 	.word	0x08009065
 8008fdc:	08009065 	.word	0x08009065
 8008fe0:	08009065 	.word	0x08009065
 8008fe4:	08009065 	.word	0x08009065
 8008fe8:	08009065 	.word	0x08009065
 8008fec:	08009065 	.word	0x08009065
 8008ff0:	0800904d 	.word	0x0800904d
 8008ff4:	08009065 	.word	0x08009065
 8008ff8:	08009065 	.word	0x08009065
 8008ffc:	08009065 	.word	0x08009065
 8009000:	08009065 	.word	0x08009065
 8009004:	08009065 	.word	0x08009065
 8009008:	08009065 	.word	0x08009065
 800900c:	08009065 	.word	0x08009065
 8009010:	08009055 	.word	0x08009055
 8009014:	08009065 	.word	0x08009065
 8009018:	08009065 	.word	0x08009065
 800901c:	08009065 	.word	0x08009065
 8009020:	08009065 	.word	0x08009065
 8009024:	08009065 	.word	0x08009065
 8009028:	08009065 	.word	0x08009065
 800902c:	08009065 	.word	0x08009065
 8009030:	0800905d 	.word	0x0800905d
 8009034:	2301      	movs	r3, #1
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903a:	e222      	b.n	8009482 <UART_SetConfig+0x5a6>
 800903c:	2304      	movs	r3, #4
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009042:	e21e      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009044:	2308      	movs	r3, #8
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904a:	e21a      	b.n	8009482 <UART_SetConfig+0x5a6>
 800904c:	2310      	movs	r3, #16
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009052:	e216      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009054:	2320      	movs	r3, #32
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905a:	e212      	b.n	8009482 <UART_SetConfig+0x5a6>
 800905c:	2340      	movs	r3, #64	; 0x40
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009062:	e20e      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009064:	2380      	movs	r3, #128	; 0x80
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e20a      	b.n	8009482 <UART_SetConfig+0x5a6>
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a69      	ldr	r2, [pc, #420]	; (8009218 <UART_SetConfig+0x33c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d130      	bne.n	80090d8 <UART_SetConfig+0x1fc>
 8009076:	4b67      	ldr	r3, [pc, #412]	; (8009214 <UART_SetConfig+0x338>)
 8009078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	2b05      	cmp	r3, #5
 8009080:	d826      	bhi.n	80090d0 <UART_SetConfig+0x1f4>
 8009082:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <UART_SetConfig+0x1ac>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	080090a1 	.word	0x080090a1
 800908c:	080090a9 	.word	0x080090a9
 8009090:	080090b1 	.word	0x080090b1
 8009094:	080090b9 	.word	0x080090b9
 8009098:	080090c1 	.word	0x080090c1
 800909c:	080090c9 	.word	0x080090c9
 80090a0:	2300      	movs	r3, #0
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a6:	e1ec      	b.n	8009482 <UART_SetConfig+0x5a6>
 80090a8:	2304      	movs	r3, #4
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ae:	e1e8      	b.n	8009482 <UART_SetConfig+0x5a6>
 80090b0:	2308      	movs	r3, #8
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e1e4      	b.n	8009482 <UART_SetConfig+0x5a6>
 80090b8:	2310      	movs	r3, #16
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e1e0      	b.n	8009482 <UART_SetConfig+0x5a6>
 80090c0:	2320      	movs	r3, #32
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e1dc      	b.n	8009482 <UART_SetConfig+0x5a6>
 80090c8:	2340      	movs	r3, #64	; 0x40
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e1d8      	b.n	8009482 <UART_SetConfig+0x5a6>
 80090d0:	2380      	movs	r3, #128	; 0x80
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e1d4      	b.n	8009482 <UART_SetConfig+0x5a6>
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a4f      	ldr	r2, [pc, #316]	; (800921c <UART_SetConfig+0x340>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d130      	bne.n	8009144 <UART_SetConfig+0x268>
 80090e2:	4b4c      	ldr	r3, [pc, #304]	; (8009214 <UART_SetConfig+0x338>)
 80090e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	2b05      	cmp	r3, #5
 80090ec:	d826      	bhi.n	800913c <UART_SetConfig+0x260>
 80090ee:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <UART_SetConfig+0x218>)
 80090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f4:	0800910d 	.word	0x0800910d
 80090f8:	08009115 	.word	0x08009115
 80090fc:	0800911d 	.word	0x0800911d
 8009100:	08009125 	.word	0x08009125
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009135 	.word	0x08009135
 800910c:	2300      	movs	r3, #0
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009112:	e1b6      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009114:	2304      	movs	r3, #4
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800911a:	e1b2      	b.n	8009482 <UART_SetConfig+0x5a6>
 800911c:	2308      	movs	r3, #8
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009122:	e1ae      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009124:	2310      	movs	r3, #16
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912a:	e1aa      	b.n	8009482 <UART_SetConfig+0x5a6>
 800912c:	2320      	movs	r3, #32
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009132:	e1a6      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009134:	2340      	movs	r3, #64	; 0x40
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913a:	e1a2      	b.n	8009482 <UART_SetConfig+0x5a6>
 800913c:	2380      	movs	r3, #128	; 0x80
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009142:	e19e      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a35      	ldr	r2, [pc, #212]	; (8009220 <UART_SetConfig+0x344>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d130      	bne.n	80091b0 <UART_SetConfig+0x2d4>
 800914e:	4b31      	ldr	r3, [pc, #196]	; (8009214 <UART_SetConfig+0x338>)
 8009150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	2b05      	cmp	r3, #5
 8009158:	d826      	bhi.n	80091a8 <UART_SetConfig+0x2cc>
 800915a:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <UART_SetConfig+0x284>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009179 	.word	0x08009179
 8009164:	08009181 	.word	0x08009181
 8009168:	08009189 	.word	0x08009189
 800916c:	08009191 	.word	0x08009191
 8009170:	08009199 	.word	0x08009199
 8009174:	080091a1 	.word	0x080091a1
 8009178:	2300      	movs	r3, #0
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917e:	e180      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009180:	2304      	movs	r3, #4
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009186:	e17c      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009188:	2308      	movs	r3, #8
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918e:	e178      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009190:	2310      	movs	r3, #16
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009196:	e174      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009198:	2320      	movs	r3, #32
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800919e:	e170      	b.n	8009482 <UART_SetConfig+0x5a6>
 80091a0:	2340      	movs	r3, #64	; 0x40
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a6:	e16c      	b.n	8009482 <UART_SetConfig+0x5a6>
 80091a8:	2380      	movs	r3, #128	; 0x80
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ae:	e168      	b.n	8009482 <UART_SetConfig+0x5a6>
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <UART_SetConfig+0x348>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d142      	bne.n	8009240 <UART_SetConfig+0x364>
 80091ba:	4b16      	ldr	r3, [pc, #88]	; (8009214 <UART_SetConfig+0x338>)
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	f003 0307 	and.w	r3, r3, #7
 80091c2:	2b05      	cmp	r3, #5
 80091c4:	d838      	bhi.n	8009238 <UART_SetConfig+0x35c>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <UART_SetConfig+0x2f0>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	080091e5 	.word	0x080091e5
 80091d0:	080091ed 	.word	0x080091ed
 80091d4:	080091f5 	.word	0x080091f5
 80091d8:	080091fd 	.word	0x080091fd
 80091dc:	08009229 	.word	0x08009229
 80091e0:	08009231 	.word	0x08009231
 80091e4:	2300      	movs	r3, #0
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ea:	e14a      	b.n	8009482 <UART_SetConfig+0x5a6>
 80091ec:	2304      	movs	r3, #4
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091f2:	e146      	b.n	8009482 <UART_SetConfig+0x5a6>
 80091f4:	2308      	movs	r3, #8
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091fa:	e142      	b.n	8009482 <UART_SetConfig+0x5a6>
 80091fc:	2310      	movs	r3, #16
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009202:	e13e      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009204:	cfff69f3 	.word	0xcfff69f3
 8009208:	58000c00 	.word	0x58000c00
 800920c:	11fff4ff 	.word	0x11fff4ff
 8009210:	40011000 	.word	0x40011000
 8009214:	58024400 	.word	0x58024400
 8009218:	40004400 	.word	0x40004400
 800921c:	40004800 	.word	0x40004800
 8009220:	40004c00 	.word	0x40004c00
 8009224:	40005000 	.word	0x40005000
 8009228:	2320      	movs	r3, #32
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922e:	e128      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009230:	2340      	movs	r3, #64	; 0x40
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009236:	e124      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009238:	2380      	movs	r3, #128	; 0x80
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923e:	e120      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4acb      	ldr	r2, [pc, #812]	; (8009574 <UART_SetConfig+0x698>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d176      	bne.n	8009338 <UART_SetConfig+0x45c>
 800924a:	4bcb      	ldr	r3, [pc, #812]	; (8009578 <UART_SetConfig+0x69c>)
 800924c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009252:	2b28      	cmp	r3, #40	; 0x28
 8009254:	d86c      	bhi.n	8009330 <UART_SetConfig+0x454>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <UART_SetConfig+0x380>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009301 	.word	0x08009301
 8009260:	08009331 	.word	0x08009331
 8009264:	08009331 	.word	0x08009331
 8009268:	08009331 	.word	0x08009331
 800926c:	08009331 	.word	0x08009331
 8009270:	08009331 	.word	0x08009331
 8009274:	08009331 	.word	0x08009331
 8009278:	08009331 	.word	0x08009331
 800927c:	08009309 	.word	0x08009309
 8009280:	08009331 	.word	0x08009331
 8009284:	08009331 	.word	0x08009331
 8009288:	08009331 	.word	0x08009331
 800928c:	08009331 	.word	0x08009331
 8009290:	08009331 	.word	0x08009331
 8009294:	08009331 	.word	0x08009331
 8009298:	08009331 	.word	0x08009331
 800929c:	08009311 	.word	0x08009311
 80092a0:	08009331 	.word	0x08009331
 80092a4:	08009331 	.word	0x08009331
 80092a8:	08009331 	.word	0x08009331
 80092ac:	08009331 	.word	0x08009331
 80092b0:	08009331 	.word	0x08009331
 80092b4:	08009331 	.word	0x08009331
 80092b8:	08009331 	.word	0x08009331
 80092bc:	08009319 	.word	0x08009319
 80092c0:	08009331 	.word	0x08009331
 80092c4:	08009331 	.word	0x08009331
 80092c8:	08009331 	.word	0x08009331
 80092cc:	08009331 	.word	0x08009331
 80092d0:	08009331 	.word	0x08009331
 80092d4:	08009331 	.word	0x08009331
 80092d8:	08009331 	.word	0x08009331
 80092dc:	08009321 	.word	0x08009321
 80092e0:	08009331 	.word	0x08009331
 80092e4:	08009331 	.word	0x08009331
 80092e8:	08009331 	.word	0x08009331
 80092ec:	08009331 	.word	0x08009331
 80092f0:	08009331 	.word	0x08009331
 80092f4:	08009331 	.word	0x08009331
 80092f8:	08009331 	.word	0x08009331
 80092fc:	08009329 	.word	0x08009329
 8009300:	2301      	movs	r3, #1
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009306:	e0bc      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009308:	2304      	movs	r3, #4
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930e:	e0b8      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009310:	2308      	movs	r3, #8
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009316:	e0b4      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009318:	2310      	movs	r3, #16
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800931e:	e0b0      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009320:	2320      	movs	r3, #32
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009326:	e0ac      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009328:	2340      	movs	r3, #64	; 0x40
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800932e:	e0a8      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009330:	2380      	movs	r3, #128	; 0x80
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009336:	e0a4      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a8f      	ldr	r2, [pc, #572]	; (800957c <UART_SetConfig+0x6a0>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d130      	bne.n	80093a4 <UART_SetConfig+0x4c8>
 8009342:	4b8d      	ldr	r3, [pc, #564]	; (8009578 <UART_SetConfig+0x69c>)
 8009344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	2b05      	cmp	r3, #5
 800934c:	d826      	bhi.n	800939c <UART_SetConfig+0x4c0>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <UART_SetConfig+0x478>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	0800936d 	.word	0x0800936d
 8009358:	08009375 	.word	0x08009375
 800935c:	0800937d 	.word	0x0800937d
 8009360:	08009385 	.word	0x08009385
 8009364:	0800938d 	.word	0x0800938d
 8009368:	08009395 	.word	0x08009395
 800936c:	2300      	movs	r3, #0
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009372:	e086      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009374:	2304      	movs	r3, #4
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937a:	e082      	b.n	8009482 <UART_SetConfig+0x5a6>
 800937c:	2308      	movs	r3, #8
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009382:	e07e      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009384:	2310      	movs	r3, #16
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800938a:	e07a      	b.n	8009482 <UART_SetConfig+0x5a6>
 800938c:	2320      	movs	r3, #32
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009392:	e076      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009394:	2340      	movs	r3, #64	; 0x40
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800939a:	e072      	b.n	8009482 <UART_SetConfig+0x5a6>
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093a2:	e06e      	b.n	8009482 <UART_SetConfig+0x5a6>
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a75      	ldr	r2, [pc, #468]	; (8009580 <UART_SetConfig+0x6a4>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d130      	bne.n	8009410 <UART_SetConfig+0x534>
 80093ae:	4b72      	ldr	r3, [pc, #456]	; (8009578 <UART_SetConfig+0x69c>)
 80093b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b05      	cmp	r3, #5
 80093b8:	d826      	bhi.n	8009408 <UART_SetConfig+0x52c>
 80093ba:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <UART_SetConfig+0x4e4>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	080093d9 	.word	0x080093d9
 80093c4:	080093e1 	.word	0x080093e1
 80093c8:	080093e9 	.word	0x080093e9
 80093cc:	080093f1 	.word	0x080093f1
 80093d0:	080093f9 	.word	0x080093f9
 80093d4:	08009401 	.word	0x08009401
 80093d8:	2300      	movs	r3, #0
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e050      	b.n	8009482 <UART_SetConfig+0x5a6>
 80093e0:	2304      	movs	r3, #4
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e6:	e04c      	b.n	8009482 <UART_SetConfig+0x5a6>
 80093e8:	2308      	movs	r3, #8
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ee:	e048      	b.n	8009482 <UART_SetConfig+0x5a6>
 80093f0:	2310      	movs	r3, #16
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093f6:	e044      	b.n	8009482 <UART_SetConfig+0x5a6>
 80093f8:	2320      	movs	r3, #32
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093fe:	e040      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009400:	2340      	movs	r3, #64	; 0x40
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009406:	e03c      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009408:	2380      	movs	r3, #128	; 0x80
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800940e:	e038      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a5b      	ldr	r2, [pc, #364]	; (8009584 <UART_SetConfig+0x6a8>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d130      	bne.n	800947c <UART_SetConfig+0x5a0>
 800941a:	4b57      	ldr	r3, [pc, #348]	; (8009578 <UART_SetConfig+0x69c>)
 800941c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941e:	f003 0307 	and.w	r3, r3, #7
 8009422:	2b05      	cmp	r3, #5
 8009424:	d826      	bhi.n	8009474 <UART_SetConfig+0x598>
 8009426:	a201      	add	r2, pc, #4	; (adr r2, 800942c <UART_SetConfig+0x550>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	08009445 	.word	0x08009445
 8009430:	0800944d 	.word	0x0800944d
 8009434:	08009455 	.word	0x08009455
 8009438:	0800945d 	.word	0x0800945d
 800943c:	08009465 	.word	0x08009465
 8009440:	0800946d 	.word	0x0800946d
 8009444:	2302      	movs	r3, #2
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800944a:	e01a      	b.n	8009482 <UART_SetConfig+0x5a6>
 800944c:	2304      	movs	r3, #4
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009452:	e016      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009454:	2308      	movs	r3, #8
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800945a:	e012      	b.n	8009482 <UART_SetConfig+0x5a6>
 800945c:	2310      	movs	r3, #16
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009462:	e00e      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009464:	2320      	movs	r3, #32
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946a:	e00a      	b.n	8009482 <UART_SetConfig+0x5a6>
 800946c:	2340      	movs	r3, #64	; 0x40
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009472:	e006      	b.n	8009482 <UART_SetConfig+0x5a6>
 8009474:	2380      	movs	r3, #128	; 0x80
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947a:	e002      	b.n	8009482 <UART_SetConfig+0x5a6>
 800947c:	2380      	movs	r3, #128	; 0x80
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a3f      	ldr	r2, [pc, #252]	; (8009584 <UART_SetConfig+0x6a8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	f040 80f8 	bne.w	800967e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800948e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009492:	2b20      	cmp	r3, #32
 8009494:	dc46      	bgt.n	8009524 <UART_SetConfig+0x648>
 8009496:	2b02      	cmp	r3, #2
 8009498:	f2c0 8082 	blt.w	80095a0 <UART_SetConfig+0x6c4>
 800949c:	3b02      	subs	r3, #2
 800949e:	2b1e      	cmp	r3, #30
 80094a0:	d87e      	bhi.n	80095a0 <UART_SetConfig+0x6c4>
 80094a2:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <UART_SetConfig+0x5cc>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	0800952b 	.word	0x0800952b
 80094ac:	080095a1 	.word	0x080095a1
 80094b0:	08009533 	.word	0x08009533
 80094b4:	080095a1 	.word	0x080095a1
 80094b8:	080095a1 	.word	0x080095a1
 80094bc:	080095a1 	.word	0x080095a1
 80094c0:	08009543 	.word	0x08009543
 80094c4:	080095a1 	.word	0x080095a1
 80094c8:	080095a1 	.word	0x080095a1
 80094cc:	080095a1 	.word	0x080095a1
 80094d0:	080095a1 	.word	0x080095a1
 80094d4:	080095a1 	.word	0x080095a1
 80094d8:	080095a1 	.word	0x080095a1
 80094dc:	080095a1 	.word	0x080095a1
 80094e0:	08009553 	.word	0x08009553
 80094e4:	080095a1 	.word	0x080095a1
 80094e8:	080095a1 	.word	0x080095a1
 80094ec:	080095a1 	.word	0x080095a1
 80094f0:	080095a1 	.word	0x080095a1
 80094f4:	080095a1 	.word	0x080095a1
 80094f8:	080095a1 	.word	0x080095a1
 80094fc:	080095a1 	.word	0x080095a1
 8009500:	080095a1 	.word	0x080095a1
 8009504:	080095a1 	.word	0x080095a1
 8009508:	080095a1 	.word	0x080095a1
 800950c:	080095a1 	.word	0x080095a1
 8009510:	080095a1 	.word	0x080095a1
 8009514:	080095a1 	.word	0x080095a1
 8009518:	080095a1 	.word	0x080095a1
 800951c:	080095a1 	.word	0x080095a1
 8009520:	08009593 	.word	0x08009593
 8009524:	2b40      	cmp	r3, #64	; 0x40
 8009526:	d037      	beq.n	8009598 <UART_SetConfig+0x6bc>
 8009528:	e03a      	b.n	80095a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800952a:	f7fd feb3 	bl	8007294 <HAL_RCCEx_GetD3PCLK1Freq>
 800952e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009530:	e03c      	b.n	80095ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009536:	4618      	mov	r0, r3
 8009538:	f7fd fec2 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009540:	e034      	b.n	80095ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009542:	f107 0318 	add.w	r3, r7, #24
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe f80e 	bl	8007568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009550:	e02c      	b.n	80095ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009552:	4b09      	ldr	r3, [pc, #36]	; (8009578 <UART_SetConfig+0x69c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b00      	cmp	r3, #0
 800955c:	d016      	beq.n	800958c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800955e:	4b06      	ldr	r3, [pc, #24]	; (8009578 <UART_SetConfig+0x69c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	08db      	lsrs	r3, r3, #3
 8009564:	f003 0303 	and.w	r3, r3, #3
 8009568:	4a07      	ldr	r2, [pc, #28]	; (8009588 <UART_SetConfig+0x6ac>)
 800956a:	fa22 f303 	lsr.w	r3, r2, r3
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009570:	e01c      	b.n	80095ac <UART_SetConfig+0x6d0>
 8009572:	bf00      	nop
 8009574:	40011400 	.word	0x40011400
 8009578:	58024400 	.word	0x58024400
 800957c:	40007800 	.word	0x40007800
 8009580:	40007c00 	.word	0x40007c00
 8009584:	58000c00 	.word	0x58000c00
 8009588:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800958c:	4b9d      	ldr	r3, [pc, #628]	; (8009804 <UART_SetConfig+0x928>)
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009590:	e00c      	b.n	80095ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009592:	4b9d      	ldr	r3, [pc, #628]	; (8009808 <UART_SetConfig+0x92c>)
 8009594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009596:	e009      	b.n	80095ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800959c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800959e:	e005      	b.n	80095ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80095aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 81de 	beq.w	8009970 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	4a94      	ldr	r2, [pc, #592]	; (800980c <UART_SetConfig+0x930>)
 80095ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095be:	461a      	mov	r2, r3
 80095c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	4613      	mov	r3, r2
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	4413      	add	r3, r2
 80095d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d305      	bcc.n	80095e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d903      	bls.n	80095ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80095ea:	e1c1      	b.n	8009970 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ee:	2200      	movs	r2, #0
 80095f0:	60bb      	str	r3, [r7, #8]
 80095f2:	60fa      	str	r2, [r7, #12]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	4a84      	ldr	r2, [pc, #528]	; (800980c <UART_SetConfig+0x930>)
 80095fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	2200      	movs	r2, #0
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	607a      	str	r2, [r7, #4]
 8009606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800960a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800960e:	f7f6 fe67 	bl	80002e0 <__aeabi_uldivmod>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	4610      	mov	r0, r2
 8009618:	4619      	mov	r1, r3
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	020b      	lsls	r3, r1, #8
 8009624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009628:	0202      	lsls	r2, r0, #8
 800962a:	6979      	ldr	r1, [r7, #20]
 800962c:	6849      	ldr	r1, [r1, #4]
 800962e:	0849      	lsrs	r1, r1, #1
 8009630:	2000      	movs	r0, #0
 8009632:	460c      	mov	r4, r1
 8009634:	4605      	mov	r5, r0
 8009636:	eb12 0804 	adds.w	r8, r2, r4
 800963a:	eb43 0905 	adc.w	r9, r3, r5
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	469a      	mov	sl, r3
 8009646:	4693      	mov	fp, r2
 8009648:	4652      	mov	r2, sl
 800964a:	465b      	mov	r3, fp
 800964c:	4640      	mov	r0, r8
 800964e:	4649      	mov	r1, r9
 8009650:	f7f6 fe46 	bl	80002e0 <__aeabi_uldivmod>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4613      	mov	r3, r2
 800965a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009662:	d308      	bcc.n	8009676 <UART_SetConfig+0x79a>
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800966a:	d204      	bcs.n	8009676 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009672:	60da      	str	r2, [r3, #12]
 8009674:	e17c      	b.n	8009970 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800967c:	e178      	b.n	8009970 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009686:	f040 80c5 	bne.w	8009814 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800968a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800968e:	2b20      	cmp	r3, #32
 8009690:	dc48      	bgt.n	8009724 <UART_SetConfig+0x848>
 8009692:	2b00      	cmp	r3, #0
 8009694:	db7b      	blt.n	800978e <UART_SetConfig+0x8b2>
 8009696:	2b20      	cmp	r3, #32
 8009698:	d879      	bhi.n	800978e <UART_SetConfig+0x8b2>
 800969a:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <UART_SetConfig+0x7c4>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	0800972b 	.word	0x0800972b
 80096a4:	08009733 	.word	0x08009733
 80096a8:	0800978f 	.word	0x0800978f
 80096ac:	0800978f 	.word	0x0800978f
 80096b0:	0800973b 	.word	0x0800973b
 80096b4:	0800978f 	.word	0x0800978f
 80096b8:	0800978f 	.word	0x0800978f
 80096bc:	0800978f 	.word	0x0800978f
 80096c0:	0800974b 	.word	0x0800974b
 80096c4:	0800978f 	.word	0x0800978f
 80096c8:	0800978f 	.word	0x0800978f
 80096cc:	0800978f 	.word	0x0800978f
 80096d0:	0800978f 	.word	0x0800978f
 80096d4:	0800978f 	.word	0x0800978f
 80096d8:	0800978f 	.word	0x0800978f
 80096dc:	0800978f 	.word	0x0800978f
 80096e0:	0800975b 	.word	0x0800975b
 80096e4:	0800978f 	.word	0x0800978f
 80096e8:	0800978f 	.word	0x0800978f
 80096ec:	0800978f 	.word	0x0800978f
 80096f0:	0800978f 	.word	0x0800978f
 80096f4:	0800978f 	.word	0x0800978f
 80096f8:	0800978f 	.word	0x0800978f
 80096fc:	0800978f 	.word	0x0800978f
 8009700:	0800978f 	.word	0x0800978f
 8009704:	0800978f 	.word	0x0800978f
 8009708:	0800978f 	.word	0x0800978f
 800970c:	0800978f 	.word	0x0800978f
 8009710:	0800978f 	.word	0x0800978f
 8009714:	0800978f 	.word	0x0800978f
 8009718:	0800978f 	.word	0x0800978f
 800971c:	0800978f 	.word	0x0800978f
 8009720:	08009781 	.word	0x08009781
 8009724:	2b40      	cmp	r3, #64	; 0x40
 8009726:	d02e      	beq.n	8009786 <UART_SetConfig+0x8aa>
 8009728:	e031      	b.n	800978e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800972a:	f7fc fb3b 	bl	8005da4 <HAL_RCC_GetPCLK1Freq>
 800972e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009730:	e033      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009732:	f7fc fb4d 	bl	8005dd0 <HAL_RCC_GetPCLK2Freq>
 8009736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009738:	e02f      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800973a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800973e:	4618      	mov	r0, r3
 8009740:	f7fd fdbe 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009748:	e027      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800974a:	f107 0318 	add.w	r3, r7, #24
 800974e:	4618      	mov	r0, r3
 8009750:	f7fd ff0a 	bl	8007568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009758:	e01f      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800975a:	4b2d      	ldr	r3, [pc, #180]	; (8009810 <UART_SetConfig+0x934>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009766:	4b2a      	ldr	r3, [pc, #168]	; (8009810 <UART_SetConfig+0x934>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	08db      	lsrs	r3, r3, #3
 800976c:	f003 0303 	and.w	r3, r3, #3
 8009770:	4a24      	ldr	r2, [pc, #144]	; (8009804 <UART_SetConfig+0x928>)
 8009772:	fa22 f303 	lsr.w	r3, r2, r3
 8009776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009778:	e00f      	b.n	800979a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800977a:	4b22      	ldr	r3, [pc, #136]	; (8009804 <UART_SetConfig+0x928>)
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800977e:	e00c      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009780:	4b21      	ldr	r3, [pc, #132]	; (8009808 <UART_SetConfig+0x92c>)
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009784:	e009      	b.n	800979a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800978c:	e005      	b.n	800979a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800979a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 80e7 	beq.w	8009970 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	4a19      	ldr	r2, [pc, #100]	; (800980c <UART_SetConfig+0x930>)
 80097a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ac:	461a      	mov	r2, r3
 80097ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097b4:	005a      	lsls	r2, r3, #1
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	085b      	lsrs	r3, r3, #1
 80097bc:	441a      	add	r2, r3
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	2b0f      	cmp	r3, #15
 80097cc:	d916      	bls.n	80097fc <UART_SetConfig+0x920>
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d4:	d212      	bcs.n	80097fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	b29b      	uxth	r3, r3
 80097da:	f023 030f 	bic.w	r3, r3, #15
 80097de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	085b      	lsrs	r3, r3, #1
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80097ee:	4313      	orrs	r3, r2
 80097f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80097f8:	60da      	str	r2, [r3, #12]
 80097fa:	e0b9      	b.n	8009970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009802:	e0b5      	b.n	8009970 <UART_SetConfig+0xa94>
 8009804:	03d09000 	.word	0x03d09000
 8009808:	003d0900 	.word	0x003d0900
 800980c:	0800d5f8 	.word	0x0800d5f8
 8009810:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009818:	2b20      	cmp	r3, #32
 800981a:	dc49      	bgt.n	80098b0 <UART_SetConfig+0x9d4>
 800981c:	2b00      	cmp	r3, #0
 800981e:	db7c      	blt.n	800991a <UART_SetConfig+0xa3e>
 8009820:	2b20      	cmp	r3, #32
 8009822:	d87a      	bhi.n	800991a <UART_SetConfig+0xa3e>
 8009824:	a201      	add	r2, pc, #4	; (adr r2, 800982c <UART_SetConfig+0x950>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	080098b7 	.word	0x080098b7
 8009830:	080098bf 	.word	0x080098bf
 8009834:	0800991b 	.word	0x0800991b
 8009838:	0800991b 	.word	0x0800991b
 800983c:	080098c7 	.word	0x080098c7
 8009840:	0800991b 	.word	0x0800991b
 8009844:	0800991b 	.word	0x0800991b
 8009848:	0800991b 	.word	0x0800991b
 800984c:	080098d7 	.word	0x080098d7
 8009850:	0800991b 	.word	0x0800991b
 8009854:	0800991b 	.word	0x0800991b
 8009858:	0800991b 	.word	0x0800991b
 800985c:	0800991b 	.word	0x0800991b
 8009860:	0800991b 	.word	0x0800991b
 8009864:	0800991b 	.word	0x0800991b
 8009868:	0800991b 	.word	0x0800991b
 800986c:	080098e7 	.word	0x080098e7
 8009870:	0800991b 	.word	0x0800991b
 8009874:	0800991b 	.word	0x0800991b
 8009878:	0800991b 	.word	0x0800991b
 800987c:	0800991b 	.word	0x0800991b
 8009880:	0800991b 	.word	0x0800991b
 8009884:	0800991b 	.word	0x0800991b
 8009888:	0800991b 	.word	0x0800991b
 800988c:	0800991b 	.word	0x0800991b
 8009890:	0800991b 	.word	0x0800991b
 8009894:	0800991b 	.word	0x0800991b
 8009898:	0800991b 	.word	0x0800991b
 800989c:	0800991b 	.word	0x0800991b
 80098a0:	0800991b 	.word	0x0800991b
 80098a4:	0800991b 	.word	0x0800991b
 80098a8:	0800991b 	.word	0x0800991b
 80098ac:	0800990d 	.word	0x0800990d
 80098b0:	2b40      	cmp	r3, #64	; 0x40
 80098b2:	d02e      	beq.n	8009912 <UART_SetConfig+0xa36>
 80098b4:	e031      	b.n	800991a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b6:	f7fc fa75 	bl	8005da4 <HAL_RCC_GetPCLK1Freq>
 80098ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80098bc:	e033      	b.n	8009926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098be:	f7fc fa87 	bl	8005dd0 <HAL_RCC_GetPCLK2Freq>
 80098c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80098c4:	e02f      	b.n	8009926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd fcf8 	bl	80072c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098d4:	e027      	b.n	8009926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098d6:	f107 0318 	add.w	r3, r7, #24
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fd fe44 	bl	8007568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098e4:	e01f      	b.n	8009926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e6:	4b2d      	ldr	r3, [pc, #180]	; (800999c <UART_SetConfig+0xac0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d009      	beq.n	8009906 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098f2:	4b2a      	ldr	r3, [pc, #168]	; (800999c <UART_SetConfig+0xac0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	08db      	lsrs	r3, r3, #3
 80098f8:	f003 0303 	and.w	r3, r3, #3
 80098fc:	4a28      	ldr	r2, [pc, #160]	; (80099a0 <UART_SetConfig+0xac4>)
 80098fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009904:	e00f      	b.n	8009926 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009906:	4b26      	ldr	r3, [pc, #152]	; (80099a0 <UART_SetConfig+0xac4>)
 8009908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800990a:	e00c      	b.n	8009926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800990c:	4b25      	ldr	r3, [pc, #148]	; (80099a4 <UART_SetConfig+0xac8>)
 800990e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009910:	e009      	b.n	8009926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009918:	e005      	b.n	8009926 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009924:	bf00      	nop
    }

    if (pclk != 0U)
 8009926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009928:	2b00      	cmp	r3, #0
 800992a:	d021      	beq.n	8009970 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	4a1d      	ldr	r2, [pc, #116]	; (80099a8 <UART_SetConfig+0xacc>)
 8009932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009936:	461a      	mov	r2, r3
 8009938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993a:	fbb3 f2f2 	udiv	r2, r3, r2
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	085b      	lsrs	r3, r3, #1
 8009944:	441a      	add	r2, r3
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	fbb2 f3f3 	udiv	r3, r2, r3
 800994e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	2b0f      	cmp	r3, #15
 8009954:	d909      	bls.n	800996a <UART_SetConfig+0xa8e>
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800995c:	d205      	bcs.n	800996a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	b29a      	uxth	r2, r3
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60da      	str	r2, [r3, #12]
 8009968:	e002      	b.n	8009970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2201      	movs	r2, #1
 8009974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2201      	movs	r2, #1
 800997c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2200      	movs	r2, #0
 8009984:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2200      	movs	r2, #0
 800998a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800998c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009990:	4618      	mov	r0, r3
 8009992:	3748      	adds	r7, #72	; 0x48
 8009994:	46bd      	mov	sp, r7
 8009996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800999a:	bf00      	nop
 800999c:	58024400 	.word	0x58024400
 80099a0:	03d09000 	.word	0x03d09000
 80099a4:	003d0900 	.word	0x003d0900
 80099a8:	0800d5f8 	.word	0x0800d5f8

080099ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00a      	beq.n	80099d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	430a      	orrs	r2, r1
 80099f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	f003 0304 	and.w	r3, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00a      	beq.n	8009a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1e:	f003 0308 	and.w	r3, r3, #8
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00a      	beq.n	8009a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a40:	f003 0310 	and.w	r3, r3, #16
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00a      	beq.n	8009a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01a      	beq.n	8009ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aaa:	d10a      	bne.n	8009ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	605a      	str	r2, [r3, #4]
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b098      	sub	sp, #96	; 0x60
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b00:	f7f7 fdbc 	bl	800167c <HAL_GetTick>
 8009b04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0308 	and.w	r3, r3, #8
 8009b10:	2b08      	cmp	r3, #8
 8009b12:	d12f      	bne.n	8009b74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f88e 	bl	8009c44 <UART_WaitOnFlagUntilTimeout>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d022      	beq.n	8009b74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b42:	653b      	str	r3, [r7, #80]	; 0x50
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e6      	bne.n	8009b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e063      	b.n	8009c3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d149      	bne.n	8009c16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f857 	bl	8009c44 <UART_WaitOnFlagUntilTimeout>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d03c      	beq.n	8009c16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bba:	633b      	str	r3, [r7, #48]	; 0x30
 8009bbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e6      	bne.n	8009b9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f023 0301 	bic.w	r3, r3, #1
 8009be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3308      	adds	r3, #8
 8009bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bee:	61fa      	str	r2, [r7, #28]
 8009bf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	69b9      	ldr	r1, [r7, #24]
 8009bf4:	69fa      	ldr	r2, [r7, #28]
 8009bf6:	e841 2300 	strex	r3, r2, [r1]
 8009bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e5      	bne.n	8009bce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2220      	movs	r2, #32
 8009c06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e012      	b.n	8009c3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2220      	movs	r2, #32
 8009c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3758      	adds	r7, #88	; 0x58
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	4613      	mov	r3, r2
 8009c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c54:	e049      	b.n	8009cea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c5c:	d045      	beq.n	8009cea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5e:	f7f7 fd0d 	bl	800167c <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d302      	bcc.n	8009c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e048      	b.n	8009d0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d031      	beq.n	8009cea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	f003 0308 	and.w	r3, r3, #8
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	d110      	bne.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2208      	movs	r2, #8
 8009c9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 f839 	bl	8009d14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2208      	movs	r2, #8
 8009ca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e029      	b.n	8009d0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cc4:	d111      	bne.n	8009cea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f81f 	bl	8009d14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2220      	movs	r2, #32
 8009cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e00f      	b.n	8009d0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	69da      	ldr	r2, [r3, #28]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	bf0c      	ite	eq
 8009cfa:	2301      	moveq	r3, #1
 8009cfc:	2300      	movne	r3, #0
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d0a6      	beq.n	8009c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b095      	sub	sp, #84	; 0x54
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d24:	e853 3f00 	ldrex	r3, [r3]
 8009d28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d42:	e841 2300 	strex	r3, r2, [r1]
 8009d46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e6      	bne.n	8009d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3308      	adds	r3, #8
 8009d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d5e:	69fa      	ldr	r2, [r7, #28]
 8009d60:	4b1e      	ldr	r3, [pc, #120]	; (8009ddc <UART_EndRxTransfer+0xc8>)
 8009d62:	4013      	ands	r3, r2
 8009d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3308      	adds	r3, #8
 8009d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e5      	bne.n	8009d4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d118      	bne.n	8009dbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	e853 3f00 	ldrex	r3, [r3]
 8009d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f023 0310 	bic.w	r3, r3, #16
 8009d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009da8:	61bb      	str	r3, [r7, #24]
 8009daa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dac:	6979      	ldr	r1, [r7, #20]
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	e841 2300 	strex	r3, r2, [r1]
 8009db4:	613b      	str	r3, [r7, #16]
   return(result);
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1e6      	bne.n	8009d8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009dd0:	bf00      	nop
 8009dd2:	3754      	adds	r7, #84	; 0x54
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	effffffe 	.word	0xeffffffe

08009de0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e027      	b.n	8009e46 <HAL_UARTEx_DisableFifoMode+0x66>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2224      	movs	r2, #36	; 0x24
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 0201 	bic.w	r2, r2, #1
 8009e1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2220      	movs	r2, #32
 8009e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e02d      	b.n	8009ec6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2224      	movs	r2, #36	; 0x24
 8009e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0201 	bic.w	r2, r2, #1
 8009e90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f850 	bl	8009f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d101      	bne.n	8009ee6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e02d      	b.n	8009f42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2224      	movs	r2, #36	; 0x24
 8009ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0201 	bic.w	r2, r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f812 	bl	8009f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2220      	movs	r2, #32
 8009f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d108      	bne.n	8009f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f6c:	e031      	b.n	8009fd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f6e:	2310      	movs	r3, #16
 8009f70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f72:	2310      	movs	r3, #16
 8009f74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	0e5b      	lsrs	r3, r3, #25
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	f003 0307 	and.w	r3, r3, #7
 8009f84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	0f5b      	lsrs	r3, r3, #29
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	f003 0307 	and.w	r3, r3, #7
 8009f94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
 8009f98:	7b3a      	ldrb	r2, [r7, #12]
 8009f9a:	4911      	ldr	r1, [pc, #68]	; (8009fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8009f9c:	5c8a      	ldrb	r2, [r1, r2]
 8009f9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fa2:	7b3a      	ldrb	r2, [r7, #12]
 8009fa4:	490f      	ldr	r1, [pc, #60]	; (8009fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8009fa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	7b7a      	ldrb	r2, [r7, #13]
 8009fb8:	4909      	ldr	r1, [pc, #36]	; (8009fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8009fba:	5c8a      	ldrb	r2, [r1, r2]
 8009fbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fc0:	7b7a      	ldrb	r2, [r7, #13]
 8009fc2:	4908      	ldr	r1, [pc, #32]	; (8009fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8009fc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009fd2:	bf00      	nop
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	0800d610 	.word	0x0800d610
 8009fe4:	0800d618 	.word	0x0800d618

08009fe8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fe8:	b084      	sub	sp, #16
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	f107 001c 	add.w	r0, r7, #28
 8009ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d120      	bne.n	800a042 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	4b2a      	ldr	r3, [pc, #168]	; (800a0bc <USB_CoreInit+0xd4>)
 800a012:	4013      	ands	r3, r2
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d105      	bne.n	800a036 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 faac 	bl	800a594 <USB_CoreReset>
 800a03c:	4603      	mov	r3, r0
 800a03e:	73fb      	strb	r3, [r7, #15]
 800a040:	e01a      	b.n	800a078 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 faa0 	bl	800a594 <USB_CoreReset>
 800a054:	4603      	mov	r3, r0
 800a056:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a062:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	639a      	str	r2, [r3, #56]	; 0x38
 800a06a:	e005      	b.n	800a078 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d116      	bne.n	800a0ac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a08c:	4b0c      	ldr	r3, [pc, #48]	; (800a0c0 <USB_CoreInit+0xd8>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f043 0206 	orr.w	r2, r3, #6
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f043 0220 	orr.w	r2, r3, #32
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0b8:	b004      	add	sp, #16
 800a0ba:	4770      	bx	lr
 800a0bc:	ffbdffbf 	.word	0xffbdffbf
 800a0c0:	03ee0000 	.word	0x03ee0000

0800a0c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f023 0201 	bic.w	r2, r3, #1
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a102:	78fb      	ldrb	r3, [r7, #3]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d115      	bne.n	800a134 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a114:	2001      	movs	r0, #1
 800a116:	f7f7 fabd 	bl	8001694 <HAL_Delay>
      ms++;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3301      	adds	r3, #1
 800a11e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fa29 	bl	800a578 <USB_GetMode>
 800a126:	4603      	mov	r3, r0
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d01e      	beq.n	800a16a <USB_SetCurrentMode+0x84>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b31      	cmp	r3, #49	; 0x31
 800a130:	d9f0      	bls.n	800a114 <USB_SetCurrentMode+0x2e>
 800a132:	e01a      	b.n	800a16a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d115      	bne.n	800a166 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a146:	2001      	movs	r0, #1
 800a148:	f7f7 faa4 	bl	8001694 <HAL_Delay>
      ms++;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	3301      	adds	r3, #1
 800a150:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa10 	bl	800a578 <USB_GetMode>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <USB_SetCurrentMode+0x84>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b31      	cmp	r3, #49	; 0x31
 800a162:	d9f0      	bls.n	800a146 <USB_SetCurrentMode+0x60>
 800a164:	e001      	b.n	800a16a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e005      	b.n	800a176 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b32      	cmp	r3, #50	; 0x32
 800a16e:	d101      	bne.n	800a174 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e000      	b.n	800a176 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a180:	b084      	sub	sp, #16
 800a182:	b580      	push	{r7, lr}
 800a184:	b086      	sub	sp, #24
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a18e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a19a:	2300      	movs	r3, #0
 800a19c:	613b      	str	r3, [r7, #16]
 800a19e:	e009      	b.n	800a1b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	3340      	adds	r3, #64	; 0x40
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	2b0e      	cmp	r3, #14
 800a1b8:	d9f2      	bls.n	800a1a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d11c      	bne.n	800a1fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ce:	f043 0302 	orr.w	r3, r3, #2
 800a1d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	e005      	b.n	800a206 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a20c:	461a      	mov	r2, r3
 800a20e:	2300      	movs	r3, #0
 800a210:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a218:	4619      	mov	r1, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a220:	461a      	mov	r2, r3
 800a222:	680b      	ldr	r3, [r1, #0]
 800a224:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d10c      	bne.n	800a246 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d104      	bne.n	800a23c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a232:	2100      	movs	r1, #0
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f965 	bl	800a504 <USB_SetDevSpeed>
 800a23a:	e008      	b.n	800a24e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a23c:	2101      	movs	r1, #1
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f960 	bl	800a504 <USB_SetDevSpeed>
 800a244:	e003      	b.n	800a24e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a246:	2103      	movs	r1, #3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f95b 	bl	800a504 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a24e:	2110      	movs	r1, #16
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f8f3 	bl	800a43c <USB_FlushTxFifo>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f91f 	bl	800a4a4 <USB_FlushRxFifo>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a276:	461a      	mov	r2, r3
 800a278:	2300      	movs	r3, #0
 800a27a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a282:	461a      	mov	r2, r3
 800a284:	2300      	movs	r3, #0
 800a286:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a28e:	461a      	mov	r2, r3
 800a290:	2300      	movs	r3, #0
 800a292:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a294:	2300      	movs	r3, #0
 800a296:	613b      	str	r3, [r7, #16]
 800a298:	e043      	b.n	800a322 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	015a      	lsls	r2, r3, #5
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2b0:	d118      	bne.n	800a2e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	e013      	b.n	800a2f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	e008      	b.n	800a2f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	015a      	lsls	r2, r3, #5
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a302:	461a      	mov	r2, r3
 800a304:	2300      	movs	r3, #0
 800a306:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	461a      	mov	r2, r3
 800a316:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a31a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	3301      	adds	r3, #1
 800a320:	613b      	str	r3, [r7, #16]
 800a322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	429a      	cmp	r2, r3
 800a328:	d3b7      	bcc.n	800a29a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a32a:	2300      	movs	r3, #0
 800a32c:	613b      	str	r3, [r7, #16]
 800a32e:	e043      	b.n	800a3b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a346:	d118      	bne.n	800a37a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a35a:	461a      	mov	r2, r3
 800a35c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a360:	6013      	str	r3, [r2, #0]
 800a362:	e013      	b.n	800a38c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a370:	461a      	mov	r2, r3
 800a372:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	e008      	b.n	800a38c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a386:	461a      	mov	r2, r3
 800a388:	2300      	movs	r3, #0
 800a38a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a398:	461a      	mov	r2, r3
 800a39a:	2300      	movs	r3, #0
 800a39c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	015a      	lsls	r2, r3, #5
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a3b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	613b      	str	r3, [r7, #16]
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d3b7      	bcc.n	800a330 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a3e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d105      	bne.n	800a3f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	f043 0210 	orr.w	r2, r3, #16
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <USB_DevInit+0x2b4>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d005      	beq.n	800a412 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	f043 0208 	orr.w	r2, r3, #8
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a414:	2b01      	cmp	r3, #1
 800a416:	d105      	bne.n	800a424 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	699a      	ldr	r2, [r3, #24]
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <USB_DevInit+0x2b8>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a424:	7dfb      	ldrb	r3, [r7, #23]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a430:	b004      	add	sp, #16
 800a432:	4770      	bx	lr
 800a434:	803c3800 	.word	0x803c3800
 800a438:	40000004 	.word	0x40000004

0800a43c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4a13      	ldr	r2, [pc, #76]	; (800a4a0 <USB_FlushTxFifo+0x64>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d901      	bls.n	800a45c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e01b      	b.n	800a494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	daf2      	bge.n	800a44a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	019b      	lsls	r3, r3, #6
 800a46c:	f043 0220 	orr.w	r2, r3, #32
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3301      	adds	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4a08      	ldr	r2, [pc, #32]	; (800a4a0 <USB_FlushTxFifo+0x64>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d901      	bls.n	800a486 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e006      	b.n	800a494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0320 	and.w	r3, r3, #32
 800a48e:	2b20      	cmp	r3, #32
 800a490:	d0f0      	beq.n	800a474 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	00030d40 	.word	0x00030d40

0800a4a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4a11      	ldr	r2, [pc, #68]	; (800a500 <USB_FlushRxFifo+0x5c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d901      	bls.n	800a4c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e018      	b.n	800a4f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	daf2      	bge.n	800a4b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2210      	movs	r2, #16
 800a4d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4a08      	ldr	r2, [pc, #32]	; (800a500 <USB_FlushRxFifo+0x5c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d901      	bls.n	800a4e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e006      	b.n	800a4f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	f003 0310 	and.w	r3, r3, #16
 800a4ee:	2b10      	cmp	r3, #16
 800a4f0:	d0f0      	beq.n	800a4d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	00030d40 	.word	0x00030d40

0800a504 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	78fb      	ldrb	r3, [r7, #3]
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a524:	4313      	orrs	r3, r2
 800a526:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a550:	f023 0303 	bic.w	r3, r3, #3
 800a554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a564:	f043 0302 	orr.w	r3, r3, #2
 800a568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	f003 0301 	and.w	r3, r3, #1
}
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4a13      	ldr	r2, [pc, #76]	; (800a5f8 <USB_CoreReset+0x64>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d901      	bls.n	800a5b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e01b      	b.n	800a5ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	daf2      	bge.n	800a5a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f043 0201 	orr.w	r2, r3, #1
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4a09      	ldr	r2, [pc, #36]	; (800a5f8 <USB_CoreReset+0x64>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d901      	bls.n	800a5dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e006      	b.n	800a5ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d0f0      	beq.n	800a5ca <USB_CoreReset+0x36>

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	00030d40 	.word	0x00030d40

0800a5fc <__NVIC_SetPriority>:
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	6039      	str	r1, [r7, #0]
 800a606:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	db0a      	blt.n	800a626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	b2da      	uxtb	r2, r3
 800a614:	490c      	ldr	r1, [pc, #48]	; (800a648 <__NVIC_SetPriority+0x4c>)
 800a616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a61a:	0112      	lsls	r2, r2, #4
 800a61c:	b2d2      	uxtb	r2, r2
 800a61e:	440b      	add	r3, r1
 800a620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a624:	e00a      	b.n	800a63c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	4908      	ldr	r1, [pc, #32]	; (800a64c <__NVIC_SetPriority+0x50>)
 800a62c:	88fb      	ldrh	r3, [r7, #6]
 800a62e:	f003 030f 	and.w	r3, r3, #15
 800a632:	3b04      	subs	r3, #4
 800a634:	0112      	lsls	r2, r2, #4
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	440b      	add	r3, r1
 800a63a:	761a      	strb	r2, [r3, #24]
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	e000e100 	.word	0xe000e100
 800a64c:	e000ed00 	.word	0xe000ed00

0800a650 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a654:	4b05      	ldr	r3, [pc, #20]	; (800a66c <SysTick_Handler+0x1c>)
 800a656:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a658:	f001 fd6a 	bl	800c130 <xTaskGetSchedulerState>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d001      	beq.n	800a666 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a662:	f002 fc09 	bl	800ce78 <xPortSysTickHandler>
  }
}
 800a666:	bf00      	nop
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	e000e010 	.word	0xe000e010

0800a670 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a674:	2100      	movs	r1, #0
 800a676:	f06f 0004 	mvn.w	r0, #4
 800a67a:	f7ff ffbf 	bl	800a5fc <__NVIC_SetPriority>
#endif
}
 800a67e:	bf00      	nop
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a68a:	f3ef 8305 	mrs	r3, IPSR
 800a68e:	603b      	str	r3, [r7, #0]
  return(result);
 800a690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a696:	f06f 0305 	mvn.w	r3, #5
 800a69a:	607b      	str	r3, [r7, #4]
 800a69c:	e00c      	b.n	800a6b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a69e:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <osKernelInitialize+0x44>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d105      	bne.n	800a6b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6a6:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <osKernelInitialize+0x44>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	607b      	str	r3, [r7, #4]
 800a6b0:	e002      	b.n	800a6b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6b8:	687b      	ldr	r3, [r7, #4]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	2400096c 	.word	0x2400096c

0800a6cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6d2:	f3ef 8305 	mrs	r3, IPSR
 800a6d6:	603b      	str	r3, [r7, #0]
  return(result);
 800a6d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6de:	f06f 0305 	mvn.w	r3, #5
 800a6e2:	607b      	str	r3, [r7, #4]
 800a6e4:	e010      	b.n	800a708 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6e6:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <osKernelStart+0x48>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d109      	bne.n	800a702 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6ee:	f7ff ffbf 	bl	800a670 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6f2:	4b08      	ldr	r3, [pc, #32]	; (800a714 <osKernelStart+0x48>)
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6f8:	f001 f8be 	bl	800b878 <vTaskStartScheduler>
      stat = osOK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	607b      	str	r3, [r7, #4]
 800a700:	e002      	b.n	800a708 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a708:	687b      	ldr	r3, [r7, #4]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	2400096c 	.word	0x2400096c

0800a718 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08e      	sub	sp, #56	; 0x38
 800a71c:	af04      	add	r7, sp, #16
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a724:	2300      	movs	r3, #0
 800a726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a728:	f3ef 8305 	mrs	r3, IPSR
 800a72c:	617b      	str	r3, [r7, #20]
  return(result);
 800a72e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a730:	2b00      	cmp	r3, #0
 800a732:	d17e      	bne.n	800a832 <osThreadNew+0x11a>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d07b      	beq.n	800a832 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a73a:	2380      	movs	r3, #128	; 0x80
 800a73c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a73e:	2318      	movs	r3, #24
 800a740:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a742:	2300      	movs	r3, #0
 800a744:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a74a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d045      	beq.n	800a7de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <osThreadNew+0x48>
        name = attr->name;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d008      	beq.n	800a786 <osThreadNew+0x6e>
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	2b38      	cmp	r3, #56	; 0x38
 800a778:	d805      	bhi.n	800a786 <osThreadNew+0x6e>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <osThreadNew+0x72>
        return (NULL);
 800a786:	2300      	movs	r3, #0
 800a788:	e054      	b.n	800a834 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	089b      	lsrs	r3, r3, #2
 800a798:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00e      	beq.n	800a7c0 <osThreadNew+0xa8>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	2ba7      	cmp	r3, #167	; 0xa7
 800a7a8:	d90a      	bls.n	800a7c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d006      	beq.n	800a7c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <osThreadNew+0xa8>
        mem = 1;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	61bb      	str	r3, [r7, #24]
 800a7be:	e010      	b.n	800a7e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10c      	bne.n	800a7e2 <osThreadNew+0xca>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d108      	bne.n	800a7e2 <osThreadNew+0xca>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <osThreadNew+0xca>
          mem = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	61bb      	str	r3, [r7, #24]
 800a7dc:	e001      	b.n	800a7e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d110      	bne.n	800a80a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7f0:	9202      	str	r2, [sp, #8]
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	6a3a      	ldr	r2, [r7, #32]
 800a7fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f000 fe82 	bl	800b508 <xTaskCreateStatic>
 800a804:	4603      	mov	r3, r0
 800a806:	613b      	str	r3, [r7, #16]
 800a808:	e013      	b.n	800a832 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d110      	bne.n	800a832 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	b29a      	uxth	r2, r3
 800a814:	f107 0310 	add.w	r3, r7, #16
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 fecd 	bl	800b5c2 <xTaskCreate>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d001      	beq.n	800a832 <osThreadNew+0x11a>
            hTask = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a832:	693b      	ldr	r3, [r7, #16]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3728      	adds	r7, #40	; 0x28
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f002 f93b 	bl	800cac0 <pvTimerGetTimerID>
 800a84a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d005      	beq.n	800a85e <TimerCallback+0x22>
    callb->func (callb->arg);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	6852      	ldr	r2, [r2, #4]
 800a85a:	4610      	mov	r0, r2
 800a85c:	4798      	blx	r3
  }
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08c      	sub	sp, #48	; 0x30
 800a86c:	af02      	add	r7, sp, #8
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	607a      	str	r2, [r7, #4]
 800a872:	603b      	str	r3, [r7, #0]
 800a874:	460b      	mov	r3, r1
 800a876:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a878:	2300      	movs	r3, #0
 800a87a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a87c:	f3ef 8305 	mrs	r3, IPSR
 800a880:	613b      	str	r3, [r7, #16]
  return(result);
 800a882:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a884:	2b00      	cmp	r3, #0
 800a886:	d163      	bne.n	800a950 <osTimerNew+0xe8>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d060      	beq.n	800a950 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a88e:	2008      	movs	r0, #8
 800a890:	f002 fb82 	bl	800cf98 <pvPortMalloc>
 800a894:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d059      	beq.n	800a950 <osTimerNew+0xe8>
      callb->func = func;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a8a8:	7afb      	ldrb	r3, [r7, #11]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d102      	bne.n	800a8b4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	61fb      	str	r3, [r7, #28]
 800a8b2:	e001      	b.n	800a8b8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a8b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8bc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d01c      	beq.n	800a902 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <osTimerNew+0x6e>
          name = attr->name;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d006      	beq.n	800a8ec <osTimerNew+0x84>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	2b2b      	cmp	r3, #43	; 0x2b
 800a8e4:	d902      	bls.n	800a8ec <osTimerNew+0x84>
          mem = 1;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	61bb      	str	r3, [r7, #24]
 800a8ea:	e00c      	b.n	800a906 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d108      	bne.n	800a906 <osTimerNew+0x9e>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d104      	bne.n	800a906 <osTimerNew+0x9e>
            mem = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	61bb      	str	r3, [r7, #24]
 800a900:	e001      	b.n	800a906 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d10c      	bne.n	800a926 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	4b12      	ldr	r3, [pc, #72]	; (800a95c <osTimerNew+0xf4>)
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	69fa      	ldr	r2, [r7, #28]
 800a91a:	2101      	movs	r1, #1
 800a91c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a91e:	f001 fd50 	bl	800c3c2 <xTimerCreateStatic>
 800a922:	6238      	str	r0, [r7, #32]
 800a924:	e00b      	b.n	800a93e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d108      	bne.n	800a93e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a92c:	4b0b      	ldr	r3, [pc, #44]	; (800a95c <osTimerNew+0xf4>)
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	69fa      	ldr	r2, [r7, #28]
 800a934:	2101      	movs	r1, #1
 800a936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a938:	f001 fd22 	bl	800c380 <xTimerCreate>
 800a93c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d105      	bne.n	800a950 <osTimerNew+0xe8>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d002      	beq.n	800a950 <osTimerNew+0xe8>
        vPortFree (callb);
 800a94a:	6978      	ldr	r0, [r7, #20]
 800a94c:	f002 fbf0 	bl	800d130 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a950:	6a3b      	ldr	r3, [r7, #32]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3728      	adds	r7, #40	; 0x28
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	0800a83d 	.word	0x0800a83d

0800a960 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4a07      	ldr	r2, [pc, #28]	; (800a98c <vApplicationGetIdleTaskMemory+0x2c>)
 800a970:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	4a06      	ldr	r2, [pc, #24]	; (800a990 <vApplicationGetIdleTaskMemory+0x30>)
 800a976:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2280      	movs	r2, #128	; 0x80
 800a97c:	601a      	str	r2, [r3, #0]
}
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	24000970 	.word	0x24000970
 800a990:	24000a18 	.word	0x24000a18

0800a994 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4a07      	ldr	r2, [pc, #28]	; (800a9c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a9a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	4a06      	ldr	r2, [pc, #24]	; (800a9c4 <vApplicationGetTimerTaskMemory+0x30>)
 800a9aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9b2:	601a      	str	r2, [r3, #0]
}
 800a9b4:	bf00      	nop
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	24000c18 	.word	0x24000c18
 800a9c4:	24000cc0 	.word	0x24000cc0

0800a9c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f103 0208 	add.w	r2, r3, #8
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f103 0208 	add.w	r2, r3, #8
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f103 0208 	add.w	r2, r3, #8
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa22:	b480      	push	{r7}
 800aa24:	b085      	sub	sp, #20
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	689a      	ldr	r2, [r3, #8]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	601a      	str	r2, [r3, #0]
}
 800aa5e:	bf00      	nop
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b085      	sub	sp, #20
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa80:	d103      	bne.n	800aa8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	e00c      	b.n	800aaa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	e002      	b.n	800aa98 <vListInsert+0x2e>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d2f6      	bcs.n	800aa92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	601a      	str	r2, [r3, #0]
}
 800aad0:	bf00      	nop
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	6892      	ldr	r2, [r2, #8]
 800aaf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	6852      	ldr	r2, [r2, #4]
 800aafc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d103      	bne.n	800ab10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	1e5a      	subs	r2, r3, #1
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10a      	bne.n	800ab5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab5a:	f002 f8fb 	bl	800cd54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab6a:	fb01 f303 	mul.w	r3, r1, r3
 800ab6e:	441a      	add	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	68f9      	ldr	r1, [r7, #12]
 800ab8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab90:	fb01 f303 	mul.w	r3, r1, r3
 800ab94:	441a      	add	r2, r3
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	22ff      	movs	r2, #255	; 0xff
 800ab9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	22ff      	movs	r2, #255	; 0xff
 800aba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d114      	bne.n	800abda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d01a      	beq.n	800abee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3310      	adds	r3, #16
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 f8f5 	bl	800bdac <xTaskRemoveFromEventList>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d012      	beq.n	800abee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abc8:	4b0c      	ldr	r3, [pc, #48]	; (800abfc <xQueueGenericReset+0xcc>)
 800abca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	e009      	b.n	800abee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3310      	adds	r3, #16
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff fef2 	bl	800a9c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3324      	adds	r3, #36	; 0x24
 800abe8:	4618      	mov	r0, r3
 800abea:	f7ff feed 	bl	800a9c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abee:	f002 f8e1 	bl	800cdb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abf2:	2301      	movs	r3, #1
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	e000ed04 	.word	0xe000ed04

0800ac00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b08e      	sub	sp, #56	; 0x38
 800ac04:	af02      	add	r7, sp, #8
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <xQueueGenericCreateStatic+0x52>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <xQueueGenericCreateStatic+0x56>
 800ac52:	2301      	movs	r3, #1
 800ac54:	e000      	b.n	800ac58 <xQueueGenericCreateStatic+0x58>
 800ac56:	2300      	movs	r3, #0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10a      	bne.n	800ac72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	623b      	str	r3, [r7, #32]
}
 800ac6e:	bf00      	nop
 800ac70:	e7fe      	b.n	800ac70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <xQueueGenericCreateStatic+0x7e>
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <xQueueGenericCreateStatic+0x82>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <xQueueGenericCreateStatic+0x84>
 800ac82:	2300      	movs	r3, #0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	61fb      	str	r3, [r7, #28]
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac9e:	2350      	movs	r3, #80	; 0x50
 800aca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2b50      	cmp	r3, #80	; 0x50
 800aca6:	d00a      	beq.n	800acbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	61bb      	str	r3, [r7, #24]
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800acbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00d      	beq.n	800ace6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	4613      	mov	r3, r2
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 f805 	bl	800acf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ace8:	4618      	mov	r0, r3
 800acea:	3730      	adds	r7, #48	; 0x30
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d103      	bne.n	800ad0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	e002      	b.n	800ad12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad1e:	2101      	movs	r1, #1
 800ad20:	69b8      	ldr	r0, [r7, #24]
 800ad22:	f7ff ff05 	bl	800ab30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	78fa      	ldrb	r2, [r7, #3]
 800ad2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
	...

0800ad38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08e      	sub	sp, #56	; 0x38
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad46:	2300      	movs	r3, #0
 800ad48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <xQueueGenericSend+0x32>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d103      	bne.n	800ad78 <xQueueGenericSend+0x40>
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <xQueueGenericSend+0x44>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e000      	b.n	800ad7e <xQueueGenericSend+0x46>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <xQueueGenericSend+0x60>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d103      	bne.n	800ada6 <xQueueGenericSend+0x6e>
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d101      	bne.n	800adaa <xQueueGenericSend+0x72>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e000      	b.n	800adac <xQueueGenericSend+0x74>
 800adaa:	2300      	movs	r3, #0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10a      	bne.n	800adc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	623b      	str	r3, [r7, #32]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adc6:	f001 f9b3 	bl	800c130 <xTaskGetSchedulerState>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d102      	bne.n	800add6 <xQueueGenericSend+0x9e>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <xQueueGenericSend+0xa2>
 800add6:	2301      	movs	r3, #1
 800add8:	e000      	b.n	800addc <xQueueGenericSend+0xa4>
 800adda:	2300      	movs	r3, #0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10a      	bne.n	800adf6 <xQueueGenericSend+0xbe>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	61fb      	str	r3, [r7, #28]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adf6:	f001 ffad 	bl	800cd54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d302      	bcc.n	800ae0c <xQueueGenericSend+0xd4>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d129      	bne.n	800ae60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	68b9      	ldr	r1, [r7, #8]
 800ae10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae12:	f000 fa0b 	bl	800b22c <prvCopyDataToQueue>
 800ae16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d010      	beq.n	800ae42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	3324      	adds	r3, #36	; 0x24
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 ffc1 	bl	800bdac <xTaskRemoveFromEventList>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d013      	beq.n	800ae58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae30:	4b3f      	ldr	r3, [pc, #252]	; (800af30 <xQueueGenericSend+0x1f8>)
 800ae32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	e00a      	b.n	800ae58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d007      	beq.n	800ae58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae48:	4b39      	ldr	r3, [pc, #228]	; (800af30 <xQueueGenericSend+0x1f8>)
 800ae4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae58:	f001 ffac 	bl	800cdb4 <vPortExitCritical>
				return pdPASS;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e063      	b.n	800af28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d103      	bne.n	800ae6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae66:	f001 ffa5 	bl	800cdb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e05c      	b.n	800af28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae74:	f107 0314 	add.w	r3, r7, #20
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fffb 	bl	800be74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae82:	f001 ff97 	bl	800cdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae86:	f000 fd67 	bl	800b958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae8a:	f001 ff63 	bl	800cd54 <vPortEnterCritical>
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae94:	b25b      	sxtb	r3, r3
 800ae96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae9a:	d103      	bne.n	800aea4 <xQueueGenericSend+0x16c>
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeaa:	b25b      	sxtb	r3, r3
 800aeac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeb0:	d103      	bne.n	800aeba <xQueueGenericSend+0x182>
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeba:	f001 ff7b 	bl	800cdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aebe:	1d3a      	adds	r2, r7, #4
 800aec0:	f107 0314 	add.w	r3, r7, #20
 800aec4:	4611      	mov	r1, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 ffea 	bl	800bea0 <xTaskCheckForTimeOut>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d124      	bne.n	800af1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed4:	f000 faa2 	bl	800b41c <prvIsQueueFull>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d018      	beq.n	800af10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	3310      	adds	r3, #16
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	4611      	mov	r1, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 ff10 	bl	800bd0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aeec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeee:	f000 fa2d 	bl	800b34c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aef2:	f000 fd3f 	bl	800b974 <xTaskResumeAll>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f47f af7c 	bne.w	800adf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aefe:	4b0c      	ldr	r3, [pc, #48]	; (800af30 <xQueueGenericSend+0x1f8>)
 800af00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	e772      	b.n	800adf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af12:	f000 fa1b 	bl	800b34c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af16:	f000 fd2d 	bl	800b974 <xTaskResumeAll>
 800af1a:	e76c      	b.n	800adf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af1e:	f000 fa15 	bl	800b34c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af22:	f000 fd27 	bl	800b974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3738      	adds	r7, #56	; 0x38
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	e000ed04 	.word	0xe000ed04

0800af34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b090      	sub	sp, #64	; 0x40
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af5e:	bf00      	nop
 800af60:	e7fe      	b.n	800af60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d103      	bne.n	800af70 <xQueueGenericSendFromISR+0x3c>
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <xQueueGenericSendFromISR+0x40>
 800af70:	2301      	movs	r3, #1
 800af72:	e000      	b.n	800af76 <xQueueGenericSendFromISR+0x42>
 800af74:	2300      	movs	r3, #0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10a      	bne.n	800af90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af8c:	bf00      	nop
 800af8e:	e7fe      	b.n	800af8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d103      	bne.n	800af9e <xQueueGenericSendFromISR+0x6a>
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d101      	bne.n	800afa2 <xQueueGenericSendFromISR+0x6e>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e000      	b.n	800afa4 <xQueueGenericSendFromISR+0x70>
 800afa2:	2300      	movs	r3, #0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10a      	bne.n	800afbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	623b      	str	r3, [r7, #32]
}
 800afba:	bf00      	nop
 800afbc:	e7fe      	b.n	800afbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afbe:	f001 ffab 	bl	800cf18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afc2:	f3ef 8211 	mrs	r2, BASEPRI
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	61fa      	str	r2, [r7, #28]
 800afd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d302      	bcc.n	800aff0 <xQueueGenericSendFromISR+0xbc>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d12f      	bne.n	800b050 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	68b9      	ldr	r1, [r7, #8]
 800b004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b006:	f000 f911 	bl	800b22c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b00a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b00e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b012:	d112      	bne.n	800b03a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d016      	beq.n	800b04a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	3324      	adds	r3, #36	; 0x24
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fec3 	bl	800bdac <xTaskRemoveFromEventList>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00e      	beq.n	800b04a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00b      	beq.n	800b04a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	e007      	b.n	800b04a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b03a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b03e:	3301      	adds	r3, #1
 800b040:	b2db      	uxtb	r3, r3
 800b042:	b25a      	sxtb	r2, r3
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b04a:	2301      	movs	r3, #1
 800b04c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b04e:	e001      	b.n	800b054 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b050:	2300      	movs	r3, #0
 800b052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b056:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b05e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b062:	4618      	mov	r0, r3
 800b064:	3740      	adds	r7, #64	; 0x40
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08c      	sub	sp, #48	; 0x30
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b078:	2300      	movs	r3, #0
 800b07a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10a      	bne.n	800b09c <xQueueReceive+0x30>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	623b      	str	r3, [r7, #32]
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d103      	bne.n	800b0aa <xQueueReceive+0x3e>
 800b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <xQueueReceive+0x42>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e000      	b.n	800b0b0 <xQueueReceive+0x44>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <xQueueReceive+0x5e>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	61fb      	str	r3, [r7, #28]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0ca:	f001 f831 	bl	800c130 <xTaskGetSchedulerState>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d102      	bne.n	800b0da <xQueueReceive+0x6e>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <xQueueReceive+0x72>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <xQueueReceive+0x74>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <xQueueReceive+0x8e>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	61bb      	str	r3, [r7, #24]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0fa:	f001 fe2b 	bl	800cd54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	2b00      	cmp	r3, #0
 800b108:	d01f      	beq.n	800b14a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b10e:	f000 f8f7 	bl	800b300 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	1e5a      	subs	r2, r3, #1
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00f      	beq.n	800b142 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	3310      	adds	r3, #16
 800b126:	4618      	mov	r0, r3
 800b128:	f000 fe40 	bl	800bdac <xTaskRemoveFromEventList>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d007      	beq.n	800b142 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b132:	4b3d      	ldr	r3, [pc, #244]	; (800b228 <xQueueReceive+0x1bc>)
 800b134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b142:	f001 fe37 	bl	800cdb4 <vPortExitCritical>
				return pdPASS;
 800b146:	2301      	movs	r3, #1
 800b148:	e069      	b.n	800b21e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d103      	bne.n	800b158 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b150:	f001 fe30 	bl	800cdb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b154:	2300      	movs	r3, #0
 800b156:	e062      	b.n	800b21e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d106      	bne.n	800b16c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b15e:	f107 0310 	add.w	r3, r7, #16
 800b162:	4618      	mov	r0, r3
 800b164:	f000 fe86 	bl	800be74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b168:	2301      	movs	r3, #1
 800b16a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b16c:	f001 fe22 	bl	800cdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b170:	f000 fbf2 	bl	800b958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b174:	f001 fdee 	bl	800cd54 <vPortEnterCritical>
 800b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b17e:	b25b      	sxtb	r3, r3
 800b180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b184:	d103      	bne.n	800b18e <xQueueReceive+0x122>
 800b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b194:	b25b      	sxtb	r3, r3
 800b196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b19a:	d103      	bne.n	800b1a4 <xQueueReceive+0x138>
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1a4:	f001 fe06 	bl	800cdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1a8:	1d3a      	adds	r2, r7, #4
 800b1aa:	f107 0310 	add.w	r3, r7, #16
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 fe75 	bl	800bea0 <xTaskCheckForTimeOut>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d123      	bne.n	800b204 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1be:	f000 f917 	bl	800b3f0 <prvIsQueueEmpty>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d017      	beq.n	800b1f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	3324      	adds	r3, #36	; 0x24
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 fd9b 	bl	800bd0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1d8:	f000 f8b8 	bl	800b34c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1dc:	f000 fbca 	bl	800b974 <xTaskResumeAll>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d189      	bne.n	800b0fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b1e6:	4b10      	ldr	r3, [pc, #64]	; (800b228 <xQueueReceive+0x1bc>)
 800b1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	e780      	b.n	800b0fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1fa:	f000 f8a7 	bl	800b34c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1fe:	f000 fbb9 	bl	800b974 <xTaskResumeAll>
 800b202:	e77a      	b.n	800b0fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b206:	f000 f8a1 	bl	800b34c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b20a:	f000 fbb3 	bl	800b974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b20e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b210:	f000 f8ee 	bl	800b3f0 <prvIsQueueEmpty>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	f43f af6f 	beq.w	800b0fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b21c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3730      	adds	r7, #48	; 0x30
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b240:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10d      	bne.n	800b266 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d14d      	bne.n	800b2ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	4618      	mov	r0, r3
 800b258:	f000 ff88 	bl	800c16c <xTaskPriorityDisinherit>
 800b25c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	609a      	str	r2, [r3, #8]
 800b264:	e043      	b.n	800b2ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d119      	bne.n	800b2a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6858      	ldr	r0, [r3, #4]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b274:	461a      	mov	r2, r3
 800b276:	68b9      	ldr	r1, [r7, #8]
 800b278:	f002 f8fc 	bl	800d474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b284:	441a      	add	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	429a      	cmp	r2, r3
 800b294:	d32b      	bcc.n	800b2ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	605a      	str	r2, [r3, #4]
 800b29e:	e026      	b.n	800b2ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	68d8      	ldr	r0, [r3, #12]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	f002 f8e2 	bl	800d474 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	68da      	ldr	r2, [r3, #12]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b8:	425b      	negs	r3, r3
 800b2ba:	441a      	add	r2, r3
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	68da      	ldr	r2, [r3, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d207      	bcs.n	800b2dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	689a      	ldr	r2, [r3, #8]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d4:	425b      	negs	r3, r3
 800b2d6:	441a      	add	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d105      	bne.n	800b2ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2f6:	697b      	ldr	r3, [r7, #20]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d018      	beq.n	800b344 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68da      	ldr	r2, [r3, #12]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31a:	441a      	add	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68da      	ldr	r2, [r3, #12]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d303      	bcc.n	800b334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	68d9      	ldr	r1, [r3, #12]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33c:	461a      	mov	r2, r3
 800b33e:	6838      	ldr	r0, [r7, #0]
 800b340:	f002 f898 	bl	800d474 <memcpy>
	}
}
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b354:	f001 fcfe 	bl	800cd54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b35e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b360:	e011      	b.n	800b386 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b366:	2b00      	cmp	r3, #0
 800b368:	d012      	beq.n	800b390 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3324      	adds	r3, #36	; 0x24
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fd1c 	bl	800bdac <xTaskRemoveFromEventList>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b37a:	f000 fdf3 	bl	800bf64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	3b01      	subs	r3, #1
 800b382:	b2db      	uxtb	r3, r3
 800b384:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dce9      	bgt.n	800b362 <prvUnlockQueue+0x16>
 800b38e:	e000      	b.n	800b392 <prvUnlockQueue+0x46>
					break;
 800b390:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	22ff      	movs	r2, #255	; 0xff
 800b396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b39a:	f001 fd0b 	bl	800cdb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b39e:	f001 fcd9 	bl	800cd54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3aa:	e011      	b.n	800b3d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d012      	beq.n	800b3da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	3310      	adds	r3, #16
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 fcf7 	bl	800bdac <xTaskRemoveFromEventList>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3c4:	f000 fdce 	bl	800bf64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dce9      	bgt.n	800b3ac <prvUnlockQueue+0x60>
 800b3d8:	e000      	b.n	800b3dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	22ff      	movs	r2, #255	; 0xff
 800b3e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3e4:	f001 fce6 	bl	800cdb4 <vPortExitCritical>
}
 800b3e8:	bf00      	nop
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3f8:	f001 fcac 	bl	800cd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b404:	2301      	movs	r3, #1
 800b406:	60fb      	str	r3, [r7, #12]
 800b408:	e001      	b.n	800b40e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b40e:	f001 fcd1 	bl	800cdb4 <vPortExitCritical>

	return xReturn;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b424:	f001 fc96 	bl	800cd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b430:	429a      	cmp	r2, r3
 800b432:	d102      	bne.n	800b43a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b434:	2301      	movs	r3, #1
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	e001      	b.n	800b43e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b43e:	f001 fcb9 	bl	800cdb4 <vPortExitCritical>

	return xReturn;
 800b442:	68fb      	ldr	r3, [r7, #12]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
 800b45a:	e014      	b.n	800b486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b45c:	4a0f      	ldr	r2, [pc, #60]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10b      	bne.n	800b480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b468:	490c      	ldr	r1, [pc, #48]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b472:	4a0a      	ldr	r2, [pc, #40]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	4413      	add	r3, r2
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b47e:	e006      	b.n	800b48e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3301      	adds	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b07      	cmp	r3, #7
 800b48a:	d9e7      	bls.n	800b45c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	240010c0 	.word	0x240010c0

0800b4a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4b0:	f001 fc50 	bl	800cd54 <vPortEnterCritical>
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4ba:	b25b      	sxtb	r3, r3
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4c0:	d103      	bne.n	800b4ca <vQueueWaitForMessageRestricted+0x2a>
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4d0:	b25b      	sxtb	r3, r3
 800b4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4d6:	d103      	bne.n	800b4e0 <vQueueWaitForMessageRestricted+0x40>
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4e0:	f001 fc68 	bl	800cdb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d106      	bne.n	800b4fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	3324      	adds	r3, #36	; 0x24
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	68b9      	ldr	r1, [r7, #8]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 fc2d 	bl	800bd54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4fa:	6978      	ldr	r0, [r7, #20]
 800b4fc:	f7ff ff26 	bl	800b34c <prvUnlockQueue>
	}
 800b500:	bf00      	nop
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08e      	sub	sp, #56	; 0x38
 800b50c:	af04      	add	r7, sp, #16
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10a      	bne.n	800b532 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	623b      	str	r3, [r7, #32]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <xTaskCreateStatic+0x46>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	61fb      	str	r3, [r7, #28]
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b54e:	23a8      	movs	r3, #168	; 0xa8
 800b550:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2ba8      	cmp	r3, #168	; 0xa8
 800b556:	d00a      	beq.n	800b56e <xTaskCreateStatic+0x66>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	61bb      	str	r3, [r7, #24]
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b56e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	2b00      	cmp	r3, #0
 800b574:	d01e      	beq.n	800b5b4 <xTaskCreateStatic+0xac>
 800b576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01b      	beq.n	800b5b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b584:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	2202      	movs	r2, #2
 800b58a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b58e:	2300      	movs	r3, #0
 800b590:	9303      	str	r3, [sp, #12]
 800b592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b594:	9302      	str	r3, [sp, #8]
 800b596:	f107 0314 	add.w	r3, r7, #20
 800b59a:	9301      	str	r3, [sp, #4]
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	68b9      	ldr	r1, [r7, #8]
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f000 f850 	bl	800b64c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5ae:	f000 f8f3 	bl	800b798 <prvAddNewTaskToReadyList>
 800b5b2:	e001      	b.n	800b5b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5b8:	697b      	ldr	r3, [r7, #20]
	}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3728      	adds	r7, #40	; 0x28
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b08c      	sub	sp, #48	; 0x30
 800b5c6:	af04      	add	r7, sp, #16
 800b5c8:	60f8      	str	r0, [r7, #12]
 800b5ca:	60b9      	str	r1, [r7, #8]
 800b5cc:	603b      	str	r3, [r7, #0]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5d2:	88fb      	ldrh	r3, [r7, #6]
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f001 fcde 	bl	800cf98 <pvPortMalloc>
 800b5dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00e      	beq.n	800b602 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5e4:	20a8      	movs	r0, #168	; 0xa8
 800b5e6:	f001 fcd7 	bl	800cf98 <pvPortMalloc>
 800b5ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	631a      	str	r2, [r3, #48]	; 0x30
 800b5f8:	e005      	b.n	800b606 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5fa:	6978      	ldr	r0, [r7, #20]
 800b5fc:	f001 fd98 	bl	800d130 <vPortFree>
 800b600:	e001      	b.n	800b606 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d017      	beq.n	800b63c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b614:	88fa      	ldrh	r2, [r7, #6]
 800b616:	2300      	movs	r3, #0
 800b618:	9303      	str	r3, [sp, #12]
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	9302      	str	r3, [sp, #8]
 800b61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	68b9      	ldr	r1, [r7, #8]
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f000 f80e 	bl	800b64c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b630:	69f8      	ldr	r0, [r7, #28]
 800b632:	f000 f8b1 	bl	800b798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b636:	2301      	movs	r3, #1
 800b638:	61bb      	str	r3, [r7, #24]
 800b63a:	e002      	b.n	800b642 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b63c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b640:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b642:	69bb      	ldr	r3, [r7, #24]
	}
 800b644:	4618      	mov	r0, r3
 800b646:	3720      	adds	r7, #32
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	461a      	mov	r2, r3
 800b664:	21a5      	movs	r1, #165	; 0xa5
 800b666:	f001 fe81 	bl	800d36c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b66e:	6879      	ldr	r1, [r7, #4]
 800b670:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b674:	440b      	add	r3, r1
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	f023 0307 	bic.w	r3, r3, #7
 800b682:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	f003 0307 	and.w	r3, r3, #7
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	617b      	str	r3, [r7, #20]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d01f      	beq.n	800b6ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	e012      	b.n	800b6d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	7819      	ldrb	r1, [r3, #0]
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	4413      	add	r3, r2
 800b6be:	3334      	adds	r3, #52	; 0x34
 800b6c0:	460a      	mov	r2, r1
 800b6c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d006      	beq.n	800b6de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	61fb      	str	r3, [r7, #28]
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	2b0f      	cmp	r3, #15
 800b6da:	d9e9      	bls.n	800b6b0 <prvInitialiseNewTask+0x64>
 800b6dc:	e000      	b.n	800b6e0 <prvInitialiseNewTask+0x94>
			{
				break;
 800b6de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6e8:	e003      	b.n	800b6f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	2b37      	cmp	r3, #55	; 0x37
 800b6f6:	d901      	bls.n	800b6fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6f8:	2337      	movs	r3, #55	; 0x37
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b700:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b706:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	2200      	movs	r2, #0
 800b70c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	3304      	adds	r3, #4
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff f978 	bl	800aa08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	3318      	adds	r3, #24
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff f973 	bl	800aa08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b726:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b736:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	2200      	movs	r2, #0
 800b744:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	3354      	adds	r3, #84	; 0x54
 800b74c:	224c      	movs	r2, #76	; 0x4c
 800b74e:	2100      	movs	r1, #0
 800b750:	4618      	mov	r0, r3
 800b752:	f001 fe0b 	bl	800d36c <memset>
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	4a0c      	ldr	r2, [pc, #48]	; (800b78c <prvInitialiseNewTask+0x140>)
 800b75a:	659a      	str	r2, [r3, #88]	; 0x58
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	4a0c      	ldr	r2, [pc, #48]	; (800b790 <prvInitialiseNewTask+0x144>)
 800b760:	65da      	str	r2, [r3, #92]	; 0x5c
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	4a0b      	ldr	r2, [pc, #44]	; (800b794 <prvInitialiseNewTask+0x148>)
 800b766:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	68f9      	ldr	r1, [r7, #12]
 800b76c:	69b8      	ldr	r0, [r7, #24]
 800b76e:	f001 f9c7 	bl	800cb00 <pxPortInitialiseStack>
 800b772:	4602      	mov	r2, r0
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b782:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b784:	bf00      	nop
 800b786:	3720      	adds	r7, #32
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	24005354 	.word	0x24005354
 800b790:	240053bc 	.word	0x240053bc
 800b794:	24005424 	.word	0x24005424

0800b798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7a0:	f001 fad8 	bl	800cd54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7a4:	4b2d      	ldr	r3, [pc, #180]	; (800b85c <prvAddNewTaskToReadyList+0xc4>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	4a2c      	ldr	r2, [pc, #176]	; (800b85c <prvAddNewTaskToReadyList+0xc4>)
 800b7ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7ae:	4b2c      	ldr	r3, [pc, #176]	; (800b860 <prvAddNewTaskToReadyList+0xc8>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d109      	bne.n	800b7ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7b6:	4a2a      	ldr	r2, [pc, #168]	; (800b860 <prvAddNewTaskToReadyList+0xc8>)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7bc:	4b27      	ldr	r3, [pc, #156]	; (800b85c <prvAddNewTaskToReadyList+0xc4>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d110      	bne.n	800b7e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7c4:	f000 fbf2 	bl	800bfac <prvInitialiseTaskLists>
 800b7c8:	e00d      	b.n	800b7e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7ca:	4b26      	ldr	r3, [pc, #152]	; (800b864 <prvAddNewTaskToReadyList+0xcc>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d109      	bne.n	800b7e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7d2:	4b23      	ldr	r3, [pc, #140]	; (800b860 <prvAddNewTaskToReadyList+0xc8>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d802      	bhi.n	800b7e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7e0:	4a1f      	ldr	r2, [pc, #124]	; (800b860 <prvAddNewTaskToReadyList+0xc8>)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7e6:	4b20      	ldr	r3, [pc, #128]	; (800b868 <prvAddNewTaskToReadyList+0xd0>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	4a1e      	ldr	r2, [pc, #120]	; (800b868 <prvAddNewTaskToReadyList+0xd0>)
 800b7ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7f0:	4b1d      	ldr	r3, [pc, #116]	; (800b868 <prvAddNewTaskToReadyList+0xd0>)
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	4b1b      	ldr	r3, [pc, #108]	; (800b86c <prvAddNewTaskToReadyList+0xd4>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	429a      	cmp	r2, r3
 800b802:	d903      	bls.n	800b80c <prvAddNewTaskToReadyList+0x74>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	4a18      	ldr	r2, [pc, #96]	; (800b86c <prvAddNewTaskToReadyList+0xd4>)
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b810:	4613      	mov	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4a15      	ldr	r2, [pc, #84]	; (800b870 <prvAddNewTaskToReadyList+0xd8>)
 800b81a:	441a      	add	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3304      	adds	r3, #4
 800b820:	4619      	mov	r1, r3
 800b822:	4610      	mov	r0, r2
 800b824:	f7ff f8fd 	bl	800aa22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b828:	f001 fac4 	bl	800cdb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b82c:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <prvAddNewTaskToReadyList+0xcc>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00e      	beq.n	800b852 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <prvAddNewTaskToReadyList+0xc8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	429a      	cmp	r2, r3
 800b840:	d207      	bcs.n	800b852 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b842:	4b0c      	ldr	r3, [pc, #48]	; (800b874 <prvAddNewTaskToReadyList+0xdc>)
 800b844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b852:	bf00      	nop
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	240015d4 	.word	0x240015d4
 800b860:	24001100 	.word	0x24001100
 800b864:	240015e0 	.word	0x240015e0
 800b868:	240015f0 	.word	0x240015f0
 800b86c:	240015dc 	.word	0x240015dc
 800b870:	24001104 	.word	0x24001104
 800b874:	e000ed04 	.word	0xe000ed04

0800b878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08a      	sub	sp, #40	; 0x28
 800b87c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b886:	463a      	mov	r2, r7
 800b888:	1d39      	adds	r1, r7, #4
 800b88a:	f107 0308 	add.w	r3, r7, #8
 800b88e:	4618      	mov	r0, r3
 800b890:	f7ff f866 	bl	800a960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	9202      	str	r2, [sp, #8]
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	460a      	mov	r2, r1
 800b8a6:	4924      	ldr	r1, [pc, #144]	; (800b938 <vTaskStartScheduler+0xc0>)
 800b8a8:	4824      	ldr	r0, [pc, #144]	; (800b93c <vTaskStartScheduler+0xc4>)
 800b8aa:	f7ff fe2d 	bl	800b508 <xTaskCreateStatic>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	4a23      	ldr	r2, [pc, #140]	; (800b940 <vTaskStartScheduler+0xc8>)
 800b8b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8b4:	4b22      	ldr	r3, [pc, #136]	; (800b940 <vTaskStartScheduler+0xc8>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	617b      	str	r3, [r7, #20]
 800b8c0:	e001      	b.n	800b8c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d102      	bne.n	800b8d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8cc:	f000 fd10 	bl	800c2f0 <xTimerCreateTimerTask>
 800b8d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d11b      	bne.n	800b910 <vTaskStartScheduler+0x98>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	613b      	str	r3, [r7, #16]
}
 800b8ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8ec:	4b15      	ldr	r3, [pc, #84]	; (800b944 <vTaskStartScheduler+0xcc>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3354      	adds	r3, #84	; 0x54
 800b8f2:	4a15      	ldr	r2, [pc, #84]	; (800b948 <vTaskStartScheduler+0xd0>)
 800b8f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8f6:	4b15      	ldr	r3, [pc, #84]	; (800b94c <vTaskStartScheduler+0xd4>)
 800b8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8fe:	4b14      	ldr	r3, [pc, #80]	; (800b950 <vTaskStartScheduler+0xd8>)
 800b900:	2201      	movs	r2, #1
 800b902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b904:	4b13      	ldr	r3, [pc, #76]	; (800b954 <vTaskStartScheduler+0xdc>)
 800b906:	2200      	movs	r2, #0
 800b908:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b90a:	f001 f981 	bl	800cc10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b90e:	e00e      	b.n	800b92e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b916:	d10a      	bne.n	800b92e <vTaskStartScheduler+0xb6>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	60fb      	str	r3, [r7, #12]
}
 800b92a:	bf00      	nop
 800b92c:	e7fe      	b.n	800b92c <vTaskStartScheduler+0xb4>
}
 800b92e:	bf00      	nop
 800b930:	3718      	adds	r7, #24
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	0800d584 	.word	0x0800d584
 800b93c:	0800bf7d 	.word	0x0800bf7d
 800b940:	240015f8 	.word	0x240015f8
 800b944:	24001100 	.word	0x24001100
 800b948:	24000060 	.word	0x24000060
 800b94c:	240015f4 	.word	0x240015f4
 800b950:	240015e0 	.word	0x240015e0
 800b954:	240015d8 	.word	0x240015d8

0800b958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b95c:	4b04      	ldr	r3, [pc, #16]	; (800b970 <vTaskSuspendAll+0x18>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	3301      	adds	r3, #1
 800b962:	4a03      	ldr	r2, [pc, #12]	; (800b970 <vTaskSuspendAll+0x18>)
 800b964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b966:	bf00      	nop
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	240015fc 	.word	0x240015fc

0800b974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b97e:	2300      	movs	r3, #0
 800b980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b982:	4b42      	ldr	r3, [pc, #264]	; (800ba8c <xTaskResumeAll+0x118>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10a      	bne.n	800b9a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	603b      	str	r3, [r7, #0]
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9a0:	f001 f9d8 	bl	800cd54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9a4:	4b39      	ldr	r3, [pc, #228]	; (800ba8c <xTaskResumeAll+0x118>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	4a38      	ldr	r2, [pc, #224]	; (800ba8c <xTaskResumeAll+0x118>)
 800b9ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ae:	4b37      	ldr	r3, [pc, #220]	; (800ba8c <xTaskResumeAll+0x118>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d162      	bne.n	800ba7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9b6:	4b36      	ldr	r3, [pc, #216]	; (800ba90 <xTaskResumeAll+0x11c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d05e      	beq.n	800ba7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9be:	e02f      	b.n	800ba20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c0:	4b34      	ldr	r3, [pc, #208]	; (800ba94 <xTaskResumeAll+0x120>)
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	3318      	adds	r3, #24
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff f885 	bl	800aadc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff f880 	bl	800aadc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ba98 <xTaskResumeAll+0x124>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d903      	bls.n	800b9f0 <xTaskResumeAll+0x7c>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	4a2a      	ldr	r2, [pc, #168]	; (800ba98 <xTaskResumeAll+0x124>)
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4a27      	ldr	r2, [pc, #156]	; (800ba9c <xTaskResumeAll+0x128>)
 800b9fe:	441a      	add	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3304      	adds	r3, #4
 800ba04:	4619      	mov	r1, r3
 800ba06:	4610      	mov	r0, r2
 800ba08:	f7ff f80b 	bl	800aa22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba10:	4b23      	ldr	r3, [pc, #140]	; (800baa0 <xTaskResumeAll+0x12c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d302      	bcc.n	800ba20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba1a:	4b22      	ldr	r3, [pc, #136]	; (800baa4 <xTaskResumeAll+0x130>)
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba20:	4b1c      	ldr	r3, [pc, #112]	; (800ba94 <xTaskResumeAll+0x120>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1cb      	bne.n	800b9c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba2e:	f000 fb5f 	bl	800c0f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba32:	4b1d      	ldr	r3, [pc, #116]	; (800baa8 <xTaskResumeAll+0x134>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d010      	beq.n	800ba60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba3e:	f000 f847 	bl	800bad0 <xTaskIncrementTick>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba48:	4b16      	ldr	r3, [pc, #88]	; (800baa4 <xTaskResumeAll+0x130>)
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1f1      	bne.n	800ba3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba5a:	4b13      	ldr	r3, [pc, #76]	; (800baa8 <xTaskResumeAll+0x134>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba60:	4b10      	ldr	r3, [pc, #64]	; (800baa4 <xTaskResumeAll+0x130>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba6c:	4b0f      	ldr	r3, [pc, #60]	; (800baac <xTaskResumeAll+0x138>)
 800ba6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba7c:	f001 f99a 	bl	800cdb4 <vPortExitCritical>

	return xAlreadyYielded;
 800ba80:	68bb      	ldr	r3, [r7, #8]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	240015fc 	.word	0x240015fc
 800ba90:	240015d4 	.word	0x240015d4
 800ba94:	24001594 	.word	0x24001594
 800ba98:	240015dc 	.word	0x240015dc
 800ba9c:	24001104 	.word	0x24001104
 800baa0:	24001100 	.word	0x24001100
 800baa4:	240015e8 	.word	0x240015e8
 800baa8:	240015e4 	.word	0x240015e4
 800baac:	e000ed04 	.word	0xe000ed04

0800bab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bab6:	4b05      	ldr	r3, [pc, #20]	; (800bacc <xTaskGetTickCount+0x1c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800babc:	687b      	ldr	r3, [r7, #4]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	240015d8 	.word	0x240015d8

0800bad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bada:	4b4f      	ldr	r3, [pc, #316]	; (800bc18 <xTaskIncrementTick+0x148>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f040 808f 	bne.w	800bc02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bae4:	4b4d      	ldr	r3, [pc, #308]	; (800bc1c <xTaskIncrementTick+0x14c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800baec:	4a4b      	ldr	r2, [pc, #300]	; (800bc1c <xTaskIncrementTick+0x14c>)
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d120      	bne.n	800bb3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800baf8:	4b49      	ldr	r3, [pc, #292]	; (800bc20 <xTaskIncrementTick+0x150>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	603b      	str	r3, [r7, #0]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <xTaskIncrementTick+0x46>
 800bb18:	4b41      	ldr	r3, [pc, #260]	; (800bc20 <xTaskIncrementTick+0x150>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	4b41      	ldr	r3, [pc, #260]	; (800bc24 <xTaskIncrementTick+0x154>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a3f      	ldr	r2, [pc, #252]	; (800bc20 <xTaskIncrementTick+0x150>)
 800bb24:	6013      	str	r3, [r2, #0]
 800bb26:	4a3f      	ldr	r2, [pc, #252]	; (800bc24 <xTaskIncrementTick+0x154>)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	4b3e      	ldr	r3, [pc, #248]	; (800bc28 <xTaskIncrementTick+0x158>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3301      	adds	r3, #1
 800bb32:	4a3d      	ldr	r2, [pc, #244]	; (800bc28 <xTaskIncrementTick+0x158>)
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	f000 fadb 	bl	800c0f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb3a:	4b3c      	ldr	r3, [pc, #240]	; (800bc2c <xTaskIncrementTick+0x15c>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d349      	bcc.n	800bbd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb44:	4b36      	ldr	r3, [pc, #216]	; (800bc20 <xTaskIncrementTick+0x150>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d104      	bne.n	800bb58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb4e:	4b37      	ldr	r3, [pc, #220]	; (800bc2c <xTaskIncrementTick+0x15c>)
 800bb50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb54:	601a      	str	r2, [r3, #0]
					break;
 800bb56:	e03f      	b.n	800bbd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb58:	4b31      	ldr	r3, [pc, #196]	; (800bc20 <xTaskIncrementTick+0x150>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d203      	bcs.n	800bb78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb70:	4a2e      	ldr	r2, [pc, #184]	; (800bc2c <xTaskIncrementTick+0x15c>)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb76:	e02f      	b.n	800bbd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	3304      	adds	r3, #4
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe ffad 	bl	800aadc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d004      	beq.n	800bb94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	3318      	adds	r3, #24
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe ffa4 	bl	800aadc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb98:	4b25      	ldr	r3, [pc, #148]	; (800bc30 <xTaskIncrementTick+0x160>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d903      	bls.n	800bba8 <xTaskIncrementTick+0xd8>
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	4a22      	ldr	r2, [pc, #136]	; (800bc30 <xTaskIncrementTick+0x160>)
 800bba6:	6013      	str	r3, [r2, #0]
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4a1f      	ldr	r2, [pc, #124]	; (800bc34 <xTaskIncrementTick+0x164>)
 800bbb6:	441a      	add	r2, r3
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	f7fe ff2f 	bl	800aa22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc8:	4b1b      	ldr	r3, [pc, #108]	; (800bc38 <xTaskIncrementTick+0x168>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d3b8      	bcc.n	800bb44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbd6:	e7b5      	b.n	800bb44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbd8:	4b17      	ldr	r3, [pc, #92]	; (800bc38 <xTaskIncrementTick+0x168>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	4915      	ldr	r1, [pc, #84]	; (800bc34 <xTaskIncrementTick+0x164>)
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	440b      	add	r3, r1
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d901      	bls.n	800bbf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bbf4:	4b11      	ldr	r3, [pc, #68]	; (800bc3c <xTaskIncrementTick+0x16c>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d007      	beq.n	800bc0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	e004      	b.n	800bc0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc02:	4b0f      	ldr	r3, [pc, #60]	; (800bc40 <xTaskIncrementTick+0x170>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3301      	adds	r3, #1
 800bc08:	4a0d      	ldr	r2, [pc, #52]	; (800bc40 <xTaskIncrementTick+0x170>)
 800bc0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc0c:	697b      	ldr	r3, [r7, #20]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	240015fc 	.word	0x240015fc
 800bc1c:	240015d8 	.word	0x240015d8
 800bc20:	2400158c 	.word	0x2400158c
 800bc24:	24001590 	.word	0x24001590
 800bc28:	240015ec 	.word	0x240015ec
 800bc2c:	240015f4 	.word	0x240015f4
 800bc30:	240015dc 	.word	0x240015dc
 800bc34:	24001104 	.word	0x24001104
 800bc38:	24001100 	.word	0x24001100
 800bc3c:	240015e8 	.word	0x240015e8
 800bc40:	240015e4 	.word	0x240015e4

0800bc44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc4a:	4b2a      	ldr	r3, [pc, #168]	; (800bcf4 <vTaskSwitchContext+0xb0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc52:	4b29      	ldr	r3, [pc, #164]	; (800bcf8 <vTaskSwitchContext+0xb4>)
 800bc54:	2201      	movs	r2, #1
 800bc56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc58:	e046      	b.n	800bce8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bc5a:	4b27      	ldr	r3, [pc, #156]	; (800bcf8 <vTaskSwitchContext+0xb4>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc60:	4b26      	ldr	r3, [pc, #152]	; (800bcfc <vTaskSwitchContext+0xb8>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	60fb      	str	r3, [r7, #12]
 800bc66:	e010      	b.n	800bc8a <vTaskSwitchContext+0x46>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10a      	bne.n	800bc84 <vTaskSwitchContext+0x40>
	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	607b      	str	r3, [r7, #4]
}
 800bc80:	bf00      	nop
 800bc82:	e7fe      	b.n	800bc82 <vTaskSwitchContext+0x3e>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	491d      	ldr	r1, [pc, #116]	; (800bd00 <vTaskSwitchContext+0xbc>)
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	440b      	add	r3, r1
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0e4      	beq.n	800bc68 <vTaskSwitchContext+0x24>
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	4613      	mov	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4a15      	ldr	r2, [pc, #84]	; (800bd00 <vTaskSwitchContext+0xbc>)
 800bcaa:	4413      	add	r3, r2
 800bcac:	60bb      	str	r3, [r7, #8]
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	605a      	str	r2, [r3, #4]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d104      	bne.n	800bcce <vTaskSwitchContext+0x8a>
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	605a      	str	r2, [r3, #4]
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	4a0b      	ldr	r2, [pc, #44]	; (800bd04 <vTaskSwitchContext+0xc0>)
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	4a08      	ldr	r2, [pc, #32]	; (800bcfc <vTaskSwitchContext+0xb8>)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcde:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <vTaskSwitchContext+0xc0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3354      	adds	r3, #84	; 0x54
 800bce4:	4a08      	ldr	r2, [pc, #32]	; (800bd08 <vTaskSwitchContext+0xc4>)
 800bce6:	6013      	str	r3, [r2, #0]
}
 800bce8:	bf00      	nop
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr
 800bcf4:	240015fc 	.word	0x240015fc
 800bcf8:	240015e8 	.word	0x240015e8
 800bcfc:	240015dc 	.word	0x240015dc
 800bd00:	24001104 	.word	0x24001104
 800bd04:	24001100 	.word	0x24001100
 800bd08:	24000060 	.word	0x24000060

0800bd0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10a      	bne.n	800bd32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	60fb      	str	r3, [r7, #12]
}
 800bd2e:	bf00      	nop
 800bd30:	e7fe      	b.n	800bd30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd32:	4b07      	ldr	r3, [pc, #28]	; (800bd50 <vTaskPlaceOnEventList+0x44>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3318      	adds	r3, #24
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7fe fe95 	bl	800aa6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd40:	2101      	movs	r1, #1
 800bd42:	6838      	ldr	r0, [r7, #0]
 800bd44:	f000 fa80 	bl	800c248 <prvAddCurrentTaskToDelayedList>
}
 800bd48:	bf00      	nop
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	24001100 	.word	0x24001100

0800bd54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10a      	bne.n	800bd7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	617b      	str	r3, [r7, #20]
}
 800bd78:	bf00      	nop
 800bd7a:	e7fe      	b.n	800bd7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd7c:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3318      	adds	r3, #24
 800bd82:	4619      	mov	r1, r3
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f7fe fe4c 	bl	800aa22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d002      	beq.n	800bd96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	68b8      	ldr	r0, [r7, #8]
 800bd9a:	f000 fa55 	bl	800c248 <prvAddCurrentTaskToDelayedList>
	}
 800bd9e:	bf00      	nop
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	24001100 	.word	0x24001100

0800bdac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10a      	bne.n	800bdd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	60fb      	str	r3, [r7, #12]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	3318      	adds	r3, #24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fe7d 	bl	800aadc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bde2:	4b1e      	ldr	r3, [pc, #120]	; (800be5c <xTaskRemoveFromEventList+0xb0>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d11d      	bne.n	800be26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	3304      	adds	r3, #4
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fe fe74 	bl	800aadc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf8:	4b19      	ldr	r3, [pc, #100]	; (800be60 <xTaskRemoveFromEventList+0xb4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d903      	bls.n	800be08 <xTaskRemoveFromEventList+0x5c>
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be04:	4a16      	ldr	r2, [pc, #88]	; (800be60 <xTaskRemoveFromEventList+0xb4>)
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0c:	4613      	mov	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4a13      	ldr	r2, [pc, #76]	; (800be64 <xTaskRemoveFromEventList+0xb8>)
 800be16:	441a      	add	r2, r3
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	3304      	adds	r3, #4
 800be1c:	4619      	mov	r1, r3
 800be1e:	4610      	mov	r0, r2
 800be20:	f7fe fdff 	bl	800aa22 <vListInsertEnd>
 800be24:	e005      	b.n	800be32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	3318      	adds	r3, #24
 800be2a:	4619      	mov	r1, r3
 800be2c:	480e      	ldr	r0, [pc, #56]	; (800be68 <xTaskRemoveFromEventList+0xbc>)
 800be2e:	f7fe fdf8 	bl	800aa22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be36:	4b0d      	ldr	r3, [pc, #52]	; (800be6c <xTaskRemoveFromEventList+0xc0>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d905      	bls.n	800be4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be40:	2301      	movs	r3, #1
 800be42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be44:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <xTaskRemoveFromEventList+0xc4>)
 800be46:	2201      	movs	r2, #1
 800be48:	601a      	str	r2, [r3, #0]
 800be4a:	e001      	b.n	800be50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be4c:	2300      	movs	r3, #0
 800be4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be50:	697b      	ldr	r3, [r7, #20]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3718      	adds	r7, #24
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	240015fc 	.word	0x240015fc
 800be60:	240015dc 	.word	0x240015dc
 800be64:	24001104 	.word	0x24001104
 800be68:	24001594 	.word	0x24001594
 800be6c:	24001100 	.word	0x24001100
 800be70:	240015e8 	.word	0x240015e8

0800be74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be7c:	4b06      	ldr	r3, [pc, #24]	; (800be98 <vTaskInternalSetTimeOutState+0x24>)
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be84:	4b05      	ldr	r3, [pc, #20]	; (800be9c <vTaskInternalSetTimeOutState+0x28>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	605a      	str	r2, [r3, #4]
}
 800be8c:	bf00      	nop
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	240015ec 	.word	0x240015ec
 800be9c:	240015d8 	.word	0x240015d8

0800bea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	613b      	str	r3, [r7, #16]
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10a      	bne.n	800bee2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	60fb      	str	r3, [r7, #12]
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bee2:	f000 ff37 	bl	800cd54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bee6:	4b1d      	ldr	r3, [pc, #116]	; (800bf5c <xTaskCheckForTimeOut+0xbc>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800befe:	d102      	bne.n	800bf06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf00:	2300      	movs	r3, #0
 800bf02:	61fb      	str	r3, [r7, #28]
 800bf04:	e023      	b.n	800bf4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	4b15      	ldr	r3, [pc, #84]	; (800bf60 <xTaskCheckForTimeOut+0xc0>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d007      	beq.n	800bf22 <xTaskCheckForTimeOut+0x82>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	69ba      	ldr	r2, [r7, #24]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d302      	bcc.n	800bf22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	61fb      	str	r3, [r7, #28]
 800bf20:	e015      	b.n	800bf4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	697a      	ldr	r2, [r7, #20]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d20b      	bcs.n	800bf44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	1ad2      	subs	r2, r2, r3
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff ff9b 	bl	800be74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	61fb      	str	r3, [r7, #28]
 800bf42:	e004      	b.n	800bf4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf4e:	f000 ff31 	bl	800cdb4 <vPortExitCritical>

	return xReturn;
 800bf52:	69fb      	ldr	r3, [r7, #28]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3720      	adds	r7, #32
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	240015d8 	.word	0x240015d8
 800bf60:	240015ec 	.word	0x240015ec

0800bf64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf64:	b480      	push	{r7}
 800bf66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf68:	4b03      	ldr	r3, [pc, #12]	; (800bf78 <vTaskMissedYield+0x14>)
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	601a      	str	r2, [r3, #0]
}
 800bf6e:	bf00      	nop
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	240015e8 	.word	0x240015e8

0800bf7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf84:	f000 f852 	bl	800c02c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf88:	4b06      	ldr	r3, [pc, #24]	; (800bfa4 <prvIdleTask+0x28>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d9f9      	bls.n	800bf84 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf90:	4b05      	ldr	r3, [pc, #20]	; (800bfa8 <prvIdleTask+0x2c>)
 800bf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfa0:	e7f0      	b.n	800bf84 <prvIdleTask+0x8>
 800bfa2:	bf00      	nop
 800bfa4:	24001104 	.word	0x24001104
 800bfa8:	e000ed04 	.word	0xe000ed04

0800bfac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	607b      	str	r3, [r7, #4]
 800bfb6:	e00c      	b.n	800bfd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4a12      	ldr	r2, [pc, #72]	; (800c00c <prvInitialiseTaskLists+0x60>)
 800bfc4:	4413      	add	r3, r2
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fe fcfe 	bl	800a9c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	607b      	str	r3, [r7, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b37      	cmp	r3, #55	; 0x37
 800bfd6:	d9ef      	bls.n	800bfb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfd8:	480d      	ldr	r0, [pc, #52]	; (800c010 <prvInitialiseTaskLists+0x64>)
 800bfda:	f7fe fcf5 	bl	800a9c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfde:	480d      	ldr	r0, [pc, #52]	; (800c014 <prvInitialiseTaskLists+0x68>)
 800bfe0:	f7fe fcf2 	bl	800a9c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfe4:	480c      	ldr	r0, [pc, #48]	; (800c018 <prvInitialiseTaskLists+0x6c>)
 800bfe6:	f7fe fcef 	bl	800a9c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfea:	480c      	ldr	r0, [pc, #48]	; (800c01c <prvInitialiseTaskLists+0x70>)
 800bfec:	f7fe fcec 	bl	800a9c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bff0:	480b      	ldr	r0, [pc, #44]	; (800c020 <prvInitialiseTaskLists+0x74>)
 800bff2:	f7fe fce9 	bl	800a9c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bff6:	4b0b      	ldr	r3, [pc, #44]	; (800c024 <prvInitialiseTaskLists+0x78>)
 800bff8:	4a05      	ldr	r2, [pc, #20]	; (800c010 <prvInitialiseTaskLists+0x64>)
 800bffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bffc:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <prvInitialiseTaskLists+0x7c>)
 800bffe:	4a05      	ldr	r2, [pc, #20]	; (800c014 <prvInitialiseTaskLists+0x68>)
 800c000:	601a      	str	r2, [r3, #0]
}
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	24001104 	.word	0x24001104
 800c010:	24001564 	.word	0x24001564
 800c014:	24001578 	.word	0x24001578
 800c018:	24001594 	.word	0x24001594
 800c01c:	240015a8 	.word	0x240015a8
 800c020:	240015c0 	.word	0x240015c0
 800c024:	2400158c 	.word	0x2400158c
 800c028:	24001590 	.word	0x24001590

0800c02c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c032:	e019      	b.n	800c068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c034:	f000 fe8e 	bl	800cd54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c038:	4b10      	ldr	r3, [pc, #64]	; (800c07c <prvCheckTasksWaitingTermination+0x50>)
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3304      	adds	r3, #4
 800c044:	4618      	mov	r0, r3
 800c046:	f7fe fd49 	bl	800aadc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c04a:	4b0d      	ldr	r3, [pc, #52]	; (800c080 <prvCheckTasksWaitingTermination+0x54>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3b01      	subs	r3, #1
 800c050:	4a0b      	ldr	r2, [pc, #44]	; (800c080 <prvCheckTasksWaitingTermination+0x54>)
 800c052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c054:	4b0b      	ldr	r3, [pc, #44]	; (800c084 <prvCheckTasksWaitingTermination+0x58>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3b01      	subs	r3, #1
 800c05a:	4a0a      	ldr	r2, [pc, #40]	; (800c084 <prvCheckTasksWaitingTermination+0x58>)
 800c05c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c05e:	f000 fea9 	bl	800cdb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f810 	bl	800c088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c068:	4b06      	ldr	r3, [pc, #24]	; (800c084 <prvCheckTasksWaitingTermination+0x58>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e1      	bne.n	800c034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	240015a8 	.word	0x240015a8
 800c080:	240015d4 	.word	0x240015d4
 800c084:	240015bc 	.word	0x240015bc

0800c088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3354      	adds	r3, #84	; 0x54
 800c094:	4618      	mov	r0, r3
 800c096:	f001 f971 	bl	800d37c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d108      	bne.n	800c0b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f001 f841 	bl	800d130 <vPortFree>
				vPortFree( pxTCB );
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f001 f83e 	bl	800d130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0b4:	e018      	b.n	800c0e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d103      	bne.n	800c0c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 f835 	bl	800d130 <vPortFree>
	}
 800c0c6:	e00f      	b.n	800c0e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d00a      	beq.n	800c0e8 <prvDeleteTCB+0x60>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	60fb      	str	r3, [r7, #12]
}
 800c0e4:	bf00      	nop
 800c0e6:	e7fe      	b.n	800c0e6 <prvDeleteTCB+0x5e>
	}
 800c0e8:	bf00      	nop
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <prvResetNextTaskUnblockTime+0x38>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d104      	bne.n	800c10a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c100:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <prvResetNextTaskUnblockTime+0x3c>)
 800c102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c108:	e008      	b.n	800c11c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c10a:	4b07      	ldr	r3, [pc, #28]	; (800c128 <prvResetNextTaskUnblockTime+0x38>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	4a04      	ldr	r2, [pc, #16]	; (800c12c <prvResetNextTaskUnblockTime+0x3c>)
 800c11a:	6013      	str	r3, [r2, #0]
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	2400158c 	.word	0x2400158c
 800c12c:	240015f4 	.word	0x240015f4

0800c130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c136:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <xTaskGetSchedulerState+0x34>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d102      	bne.n	800c144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c13e:	2301      	movs	r3, #1
 800c140:	607b      	str	r3, [r7, #4]
 800c142:	e008      	b.n	800c156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c144:	4b08      	ldr	r3, [pc, #32]	; (800c168 <xTaskGetSchedulerState+0x38>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d102      	bne.n	800c152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c14c:	2302      	movs	r3, #2
 800c14e:	607b      	str	r3, [r7, #4]
 800c150:	e001      	b.n	800c156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c152:	2300      	movs	r3, #0
 800c154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c156:	687b      	ldr	r3, [r7, #4]
	}
 800c158:	4618      	mov	r0, r3
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	240015e0 	.word	0x240015e0
 800c168:	240015fc 	.word	0x240015fc

0800c16c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d056      	beq.n	800c230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c182:	4b2e      	ldr	r3, [pc, #184]	; (800c23c <xTaskPriorityDisinherit+0xd0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d00a      	beq.n	800c1a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	60fb      	str	r3, [r7, #12]
}
 800c19e:	bf00      	nop
 800c1a0:	e7fe      	b.n	800c1a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10a      	bne.n	800c1c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	60bb      	str	r3, [r7, #8]
}
 800c1bc:	bf00      	nop
 800c1be:	e7fe      	b.n	800c1be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1c4:	1e5a      	subs	r2, r3, #1
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d02c      	beq.n	800c230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d128      	bne.n	800c230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe fc7a 	bl	800aadc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c200:	4b0f      	ldr	r3, [pc, #60]	; (800c240 <xTaskPriorityDisinherit+0xd4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	429a      	cmp	r2, r3
 800c206:	d903      	bls.n	800c210 <xTaskPriorityDisinherit+0xa4>
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	4a0c      	ldr	r2, [pc, #48]	; (800c240 <xTaskPriorityDisinherit+0xd4>)
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4a09      	ldr	r2, [pc, #36]	; (800c244 <xTaskPriorityDisinherit+0xd8>)
 800c21e:	441a      	add	r2, r3
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f7fe fbfb 	bl	800aa22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c22c:	2301      	movs	r3, #1
 800c22e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c230:	697b      	ldr	r3, [r7, #20]
	}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	24001100 	.word	0x24001100
 800c240:	240015dc 	.word	0x240015dc
 800c244:	24001104 	.word	0x24001104

0800c248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c252:	4b21      	ldr	r3, [pc, #132]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c258:	4b20      	ldr	r3, [pc, #128]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3304      	adds	r3, #4
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fc3c 	bl	800aadc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c26a:	d10a      	bne.n	800c282 <prvAddCurrentTaskToDelayedList+0x3a>
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c272:	4b1a      	ldr	r3, [pc, #104]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3304      	adds	r3, #4
 800c278:	4619      	mov	r1, r3
 800c27a:	4819      	ldr	r0, [pc, #100]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c27c:	f7fe fbd1 	bl	800aa22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c280:	e026      	b.n	800c2d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4413      	add	r3, r2
 800c288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c28a:	4b14      	ldr	r3, [pc, #80]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	429a      	cmp	r2, r3
 800c298:	d209      	bcs.n	800c2ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c29a:	4b12      	ldr	r3, [pc, #72]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	4b0f      	ldr	r3, [pc, #60]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f7fe fbdf 	bl	800aa6a <vListInsert>
}
 800c2ac:	e010      	b.n	800c2d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ae:	4b0e      	ldr	r3, [pc, #56]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	4b0a      	ldr	r3, [pc, #40]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3304      	adds	r3, #4
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	f7fe fbd5 	bl	800aa6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d202      	bcs.n	800c2d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2ca:	4a08      	ldr	r2, [pc, #32]	; (800c2ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	6013      	str	r3, [r2, #0]
}
 800c2d0:	bf00      	nop
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	240015d8 	.word	0x240015d8
 800c2dc:	24001100 	.word	0x24001100
 800c2e0:	240015c0 	.word	0x240015c0
 800c2e4:	24001590 	.word	0x24001590
 800c2e8:	2400158c 	.word	0x2400158c
 800c2ec:	240015f4 	.word	0x240015f4

0800c2f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b08a      	sub	sp, #40	; 0x28
 800c2f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2fa:	f000 fba1 	bl	800ca40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2fe:	4b1c      	ldr	r3, [pc, #112]	; (800c370 <xTimerCreateTimerTask+0x80>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d021      	beq.n	800c34a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c306:	2300      	movs	r3, #0
 800c308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c30a:	2300      	movs	r3, #0
 800c30c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c30e:	1d3a      	adds	r2, r7, #4
 800c310:	f107 0108 	add.w	r1, r7, #8
 800c314:	f107 030c 	add.w	r3, r7, #12
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe fb3b 	bl	800a994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c31e:	6879      	ldr	r1, [r7, #4]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	9202      	str	r2, [sp, #8]
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	2302      	movs	r3, #2
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	2300      	movs	r3, #0
 800c32e:	460a      	mov	r2, r1
 800c330:	4910      	ldr	r1, [pc, #64]	; (800c374 <xTimerCreateTimerTask+0x84>)
 800c332:	4811      	ldr	r0, [pc, #68]	; (800c378 <xTimerCreateTimerTask+0x88>)
 800c334:	f7ff f8e8 	bl	800b508 <xTaskCreateStatic>
 800c338:	4603      	mov	r3, r0
 800c33a:	4a10      	ldr	r2, [pc, #64]	; (800c37c <xTimerCreateTimerTask+0x8c>)
 800c33c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c33e:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <xTimerCreateTimerTask+0x8c>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c346:	2301      	movs	r3, #1
 800c348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	613b      	str	r3, [r7, #16]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c366:	697b      	ldr	r3, [r7, #20]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	24001630 	.word	0x24001630
 800c374:	0800d58c 	.word	0x0800d58c
 800c378:	0800c5e9 	.word	0x0800c5e9
 800c37c:	24001634 	.word	0x24001634

0800c380 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af02      	add	r7, sp, #8
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c38e:	202c      	movs	r0, #44	; 0x2c
 800c390:	f000 fe02 	bl	800cf98 <pvPortMalloc>
 800c394:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00d      	beq.n	800c3b8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	68b9      	ldr	r1, [r7, #8]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f000 f843 	bl	800c43e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c3b8:	697b      	ldr	r3, [r7, #20]
	}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3718      	adds	r7, #24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b08a      	sub	sp, #40	; 0x28
 800c3c6:	af02      	add	r7, sp, #8
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
 800c3ce:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c3d0:	232c      	movs	r3, #44	; 0x2c
 800c3d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b2c      	cmp	r3, #44	; 0x2c
 800c3d8:	d00a      	beq.n	800c3f0 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	61bb      	str	r3, [r7, #24]
}
 800c3ec:	bf00      	nop
 800c3ee:	e7fe      	b.n	800c3ee <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c3f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10a      	bne.n	800c40e <xTimerCreateStatic+0x4c>
	__asm volatile
 800c3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fc:	f383 8811 	msr	BASEPRI, r3
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	617b      	str	r3, [r7, #20]
}
 800c40a:	bf00      	nop
 800c40c:	e7fe      	b.n	800c40c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00d      	beq.n	800c434 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	2202      	movs	r2, #2
 800c41c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	9301      	str	r3, [sp, #4]
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	68b9      	ldr	r1, [r7, #8]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f000 f805 	bl	800c43e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c434:	69fb      	ldr	r3, [r7, #28]
	}
 800c436:	4618      	mov	r0, r3
 800c438:	3720      	adds	r7, #32
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b086      	sub	sp, #24
 800c442:	af00      	add	r7, sp, #0
 800c444:	60f8      	str	r0, [r7, #12]
 800c446:	60b9      	str	r1, [r7, #8]
 800c448:	607a      	str	r2, [r7, #4]
 800c44a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10a      	bne.n	800c468 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	617b      	str	r3, [r7, #20]
}
 800c464:	bf00      	nop
 800c466:	e7fe      	b.n	800c466 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d01e      	beq.n	800c4ac <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c46e:	f000 fae7 	bl	800ca40 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	6a3a      	ldr	r2, [r7, #32]
 800c488:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	3304      	adds	r3, #4
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe faba 	bl	800aa08 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d008      	beq.n	800c4ac <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4a0:	f043 0304 	orr.w	r3, r3, #4
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c4ac:	bf00      	nop
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b08a      	sub	sp, #40	; 0x28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	623b      	str	r3, [r7, #32]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4e2:	4b1a      	ldr	r3, [pc, #104]	; (800c54c <xTimerGenericCommand+0x98>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d02a      	beq.n	800c540 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b05      	cmp	r3, #5
 800c4fa:	dc18      	bgt.n	800c52e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4fc:	f7ff fe18 	bl	800c130 <xTaskGetSchedulerState>
 800c500:	4603      	mov	r3, r0
 800c502:	2b02      	cmp	r3, #2
 800c504:	d109      	bne.n	800c51a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c506:	4b11      	ldr	r3, [pc, #68]	; (800c54c <xTimerGenericCommand+0x98>)
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f107 0110 	add.w	r1, r7, #16
 800c50e:	2300      	movs	r3, #0
 800c510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c512:	f7fe fc11 	bl	800ad38 <xQueueGenericSend>
 800c516:	6278      	str	r0, [r7, #36]	; 0x24
 800c518:	e012      	b.n	800c540 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c51a:	4b0c      	ldr	r3, [pc, #48]	; (800c54c <xTimerGenericCommand+0x98>)
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	f107 0110 	add.w	r1, r7, #16
 800c522:	2300      	movs	r3, #0
 800c524:	2200      	movs	r2, #0
 800c526:	f7fe fc07 	bl	800ad38 <xQueueGenericSend>
 800c52a:	6278      	str	r0, [r7, #36]	; 0x24
 800c52c:	e008      	b.n	800c540 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c52e:	4b07      	ldr	r3, [pc, #28]	; (800c54c <xTimerGenericCommand+0x98>)
 800c530:	6818      	ldr	r0, [r3, #0]
 800c532:	f107 0110 	add.w	r1, r7, #16
 800c536:	2300      	movs	r3, #0
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	f7fe fcfb 	bl	800af34 <xQueueGenericSendFromISR>
 800c53e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c542:	4618      	mov	r0, r3
 800c544:	3728      	adds	r7, #40	; 0x28
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	24001630 	.word	0x24001630

0800c550 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af02      	add	r7, sp, #8
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c55a:	4b22      	ldr	r3, [pc, #136]	; (800c5e4 <prvProcessExpiredTimer+0x94>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	3304      	adds	r3, #4
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fe fab7 	bl	800aadc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d022      	beq.n	800c5c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	699a      	ldr	r2, [r3, #24]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	18d1      	adds	r1, r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	6978      	ldr	r0, [r7, #20]
 800c58a:	f000 f8d1 	bl	800c730 <prvInsertTimerInActiveList>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d01f      	beq.n	800c5d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c594:	2300      	movs	r3, #0
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	2300      	movs	r3, #0
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	2100      	movs	r1, #0
 800c59e:	6978      	ldr	r0, [r7, #20]
 800c5a0:	f7ff ff88 	bl	800c4b4 <xTimerGenericCommand>
 800c5a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d113      	bne.n	800c5d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	60fb      	str	r3, [r7, #12]
}
 800c5be:	bf00      	nop
 800c5c0:	e7fe      	b.n	800c5c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5c8:	f023 0301 	bic.w	r3, r3, #1
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	6a1b      	ldr	r3, [r3, #32]
 800c5d8:	6978      	ldr	r0, [r7, #20]
 800c5da:	4798      	blx	r3
}
 800c5dc:	bf00      	nop
 800c5de:	3718      	adds	r7, #24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	24001628 	.word	0x24001628

0800c5e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5f0:	f107 0308 	add.w	r3, r7, #8
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 f857 	bl	800c6a8 <prvGetNextExpireTime>
 800c5fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	4619      	mov	r1, r3
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f000 f803 	bl	800c60c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c606:	f000 f8d5 	bl	800c7b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c60a:	e7f1      	b.n	800c5f0 <prvTimerTask+0x8>

0800c60c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c616:	f7ff f99f 	bl	800b958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c61a:	f107 0308 	add.w	r3, r7, #8
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 f866 	bl	800c6f0 <prvSampleTimeNow>
 800c624:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d130      	bne.n	800c68e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10a      	bne.n	800c648 <prvProcessTimerOrBlockTask+0x3c>
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	429a      	cmp	r2, r3
 800c638:	d806      	bhi.n	800c648 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c63a:	f7ff f99b 	bl	800b974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c63e:	68f9      	ldr	r1, [r7, #12]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff ff85 	bl	800c550 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c646:	e024      	b.n	800c692 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d008      	beq.n	800c660 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c64e:	4b13      	ldr	r3, [pc, #76]	; (800c69c <prvProcessTimerOrBlockTask+0x90>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <prvProcessTimerOrBlockTask+0x50>
 800c658:	2301      	movs	r3, #1
 800c65a:	e000      	b.n	800c65e <prvProcessTimerOrBlockTask+0x52>
 800c65c:	2300      	movs	r3, #0
 800c65e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c660:	4b0f      	ldr	r3, [pc, #60]	; (800c6a0 <prvProcessTimerOrBlockTask+0x94>)
 800c662:	6818      	ldr	r0, [r3, #0]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	4619      	mov	r1, r3
 800c66e:	f7fe ff17 	bl	800b4a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c672:	f7ff f97f 	bl	800b974 <xTaskResumeAll>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10a      	bne.n	800c692 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c67c:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <prvProcessTimerOrBlockTask+0x98>)
 800c67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	f3bf 8f6f 	isb	sy
}
 800c68c:	e001      	b.n	800c692 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c68e:	f7ff f971 	bl	800b974 <xTaskResumeAll>
}
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	2400162c 	.word	0x2400162c
 800c6a0:	24001630 	.word	0x24001630
 800c6a4:	e000ed04 	.word	0xe000ed04

0800c6a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6b0:	4b0e      	ldr	r3, [pc, #56]	; (800c6ec <prvGetNextExpireTime+0x44>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <prvGetNextExpireTime+0x16>
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	e000      	b.n	800c6c0 <prvGetNextExpireTime+0x18>
 800c6be:	2200      	movs	r2, #0
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d105      	bne.n	800c6d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6cc:	4b07      	ldr	r3, [pc, #28]	; (800c6ec <prvGetNextExpireTime+0x44>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	e001      	b.n	800c6dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	24001628 	.word	0x24001628

0800c6f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6f8:	f7ff f9da 	bl	800bab0 <xTaskGetTickCount>
 800c6fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6fe:	4b0b      	ldr	r3, [pc, #44]	; (800c72c <prvSampleTimeNow+0x3c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	429a      	cmp	r2, r3
 800c706:	d205      	bcs.n	800c714 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c708:	f000 f936 	bl	800c978 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	601a      	str	r2, [r3, #0]
 800c712:	e002      	b.n	800c71a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c71a:	4a04      	ldr	r2, [pc, #16]	; (800c72c <prvSampleTimeNow+0x3c>)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c720:	68fb      	ldr	r3, [r7, #12]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	24001638 	.word	0x24001638

0800c730 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c73e:	2300      	movs	r3, #0
 800c740:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	429a      	cmp	r2, r3
 800c754:	d812      	bhi.n	800c77c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	1ad2      	subs	r2, r2, r3
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	429a      	cmp	r2, r3
 800c762:	d302      	bcc.n	800c76a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c764:	2301      	movs	r3, #1
 800c766:	617b      	str	r3, [r7, #20]
 800c768:	e01b      	b.n	800c7a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c76a:	4b10      	ldr	r3, [pc, #64]	; (800c7ac <prvInsertTimerInActiveList+0x7c>)
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3304      	adds	r3, #4
 800c772:	4619      	mov	r1, r3
 800c774:	4610      	mov	r0, r2
 800c776:	f7fe f978 	bl	800aa6a <vListInsert>
 800c77a:	e012      	b.n	800c7a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	429a      	cmp	r2, r3
 800c782:	d206      	bcs.n	800c792 <prvInsertTimerInActiveList+0x62>
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d302      	bcc.n	800c792 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c78c:	2301      	movs	r3, #1
 800c78e:	617b      	str	r3, [r7, #20]
 800c790:	e007      	b.n	800c7a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c792:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <prvInsertTimerInActiveList+0x80>)
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3304      	adds	r3, #4
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fe f964 	bl	800aa6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7a2:	697b      	ldr	r3, [r7, #20]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	2400162c 	.word	0x2400162c
 800c7b0:	24001628 	.word	0x24001628

0800c7b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08e      	sub	sp, #56	; 0x38
 800c7b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ba:	e0ca      	b.n	800c952 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	da18      	bge.n	800c7f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7c2:	1d3b      	adds	r3, r7, #4
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10a      	bne.n	800c7e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	61fb      	str	r3, [r7, #28]
}
 800c7e0:	bf00      	nop
 800c7e2:	e7fe      	b.n	800c7e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ea:	6850      	ldr	r0, [r2, #4]
 800c7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ee:	6892      	ldr	r2, [r2, #8]
 800c7f0:	4611      	mov	r1, r2
 800c7f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f2c0 80ab 	blt.w	800c952 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d004      	beq.n	800c812 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	3304      	adds	r3, #4
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fe f965 	bl	800aadc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c812:	463b      	mov	r3, r7
 800c814:	4618      	mov	r0, r3
 800c816:	f7ff ff6b 	bl	800c6f0 <prvSampleTimeNow>
 800c81a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b09      	cmp	r3, #9
 800c820:	f200 8096 	bhi.w	800c950 <prvProcessReceivedCommands+0x19c>
 800c824:	a201      	add	r2, pc, #4	; (adr r2, 800c82c <prvProcessReceivedCommands+0x78>)
 800c826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82a:	bf00      	nop
 800c82c:	0800c855 	.word	0x0800c855
 800c830:	0800c855 	.word	0x0800c855
 800c834:	0800c855 	.word	0x0800c855
 800c838:	0800c8c9 	.word	0x0800c8c9
 800c83c:	0800c8dd 	.word	0x0800c8dd
 800c840:	0800c927 	.word	0x0800c927
 800c844:	0800c855 	.word	0x0800c855
 800c848:	0800c855 	.word	0x0800c855
 800c84c:	0800c8c9 	.word	0x0800c8c9
 800c850:	0800c8dd 	.word	0x0800c8dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c85a:	f043 0301 	orr.w	r3, r3, #1
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	18d1      	adds	r1, r2, r3
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c874:	f7ff ff5c 	bl	800c730 <prvInsertTimerInActiveList>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d069      	beq.n	800c952 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	6a1b      	ldr	r3, [r3, #32]
 800c882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c884:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b00      	cmp	r3, #0
 800c892:	d05e      	beq.n	800c952 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	441a      	add	r2, r3
 800c89c:	2300      	movs	r3, #0
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8a6:	f7ff fe05 	bl	800c4b4 <xTimerGenericCommand>
 800c8aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d14f      	bne.n	800c952 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	61bb      	str	r3, [r7, #24]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ce:	f023 0301 	bic.w	r3, r3, #1
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c8da:	e03a      	b.n	800c952 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8e2:	f043 0301 	orr.w	r3, r3, #1
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10a      	bne.n	800c912 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	617b      	str	r3, [r7, #20]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	699a      	ldr	r2, [r3, #24]
 800c916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c918:	18d1      	adds	r1, r2, r3
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c920:	f7ff ff06 	bl	800c730 <prvInsertTimerInActiveList>
					break;
 800c924:	e015      	b.n	800c952 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c92c:	f003 0302 	and.w	r3, r3, #2
 800c930:	2b00      	cmp	r3, #0
 800c932:	d103      	bne.n	800c93c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c936:	f000 fbfb 	bl	800d130 <vPortFree>
 800c93a:	e00a      	b.n	800c952 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c942:	f023 0301 	bic.w	r3, r3, #1
 800c946:	b2da      	uxtb	r2, r3
 800c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c94e:	e000      	b.n	800c952 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c950:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c952:	4b08      	ldr	r3, [pc, #32]	; (800c974 <prvProcessReceivedCommands+0x1c0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	1d39      	adds	r1, r7, #4
 800c958:	2200      	movs	r2, #0
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fe fb86 	bl	800b06c <xQueueReceive>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	f47f af2a 	bne.w	800c7bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	3730      	adds	r7, #48	; 0x30
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	24001630 	.word	0x24001630

0800c978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c97e:	e048      	b.n	800ca12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c980:	4b2d      	ldr	r3, [pc, #180]	; (800ca38 <prvSwitchTimerLists+0xc0>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c98a:	4b2b      	ldr	r3, [pc, #172]	; (800ca38 <prvSwitchTimerLists+0xc0>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3304      	adds	r3, #4
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe f89f 	bl	800aadc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ac:	f003 0304 	and.w	r3, r3, #4
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d02e      	beq.n	800ca12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	693a      	ldr	r2, [r7, #16]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d90e      	bls.n	800c9e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9d2:	4b19      	ldr	r3, [pc, #100]	; (800ca38 <prvSwitchTimerLists+0xc0>)
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	3304      	adds	r3, #4
 800c9da:	4619      	mov	r1, r3
 800c9dc:	4610      	mov	r0, r2
 800c9de:	f7fe f844 	bl	800aa6a <vListInsert>
 800c9e2:	e016      	b.n	800ca12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f7ff fd60 	bl	800c4b4 <xTimerGenericCommand>
 800c9f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10a      	bne.n	800ca12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	603b      	str	r3, [r7, #0]
}
 800ca0e:	bf00      	nop
 800ca10:	e7fe      	b.n	800ca10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca12:	4b09      	ldr	r3, [pc, #36]	; (800ca38 <prvSwitchTimerLists+0xc0>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1b1      	bne.n	800c980 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca1c:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <prvSwitchTimerLists+0xc0>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca22:	4b06      	ldr	r3, [pc, #24]	; (800ca3c <prvSwitchTimerLists+0xc4>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a04      	ldr	r2, [pc, #16]	; (800ca38 <prvSwitchTimerLists+0xc0>)
 800ca28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca2a:	4a04      	ldr	r2, [pc, #16]	; (800ca3c <prvSwitchTimerLists+0xc4>)
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	6013      	str	r3, [r2, #0]
}
 800ca30:	bf00      	nop
 800ca32:	3718      	adds	r7, #24
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	24001628 	.word	0x24001628
 800ca3c:	2400162c 	.word	0x2400162c

0800ca40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca46:	f000 f985 	bl	800cd54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca4a:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <prvCheckForValidListAndQueue+0x60>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d120      	bne.n	800ca94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca52:	4814      	ldr	r0, [pc, #80]	; (800caa4 <prvCheckForValidListAndQueue+0x64>)
 800ca54:	f7fd ffb8 	bl	800a9c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca58:	4813      	ldr	r0, [pc, #76]	; (800caa8 <prvCheckForValidListAndQueue+0x68>)
 800ca5a:	f7fd ffb5 	bl	800a9c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca5e:	4b13      	ldr	r3, [pc, #76]	; (800caac <prvCheckForValidListAndQueue+0x6c>)
 800ca60:	4a10      	ldr	r2, [pc, #64]	; (800caa4 <prvCheckForValidListAndQueue+0x64>)
 800ca62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca64:	4b12      	ldr	r3, [pc, #72]	; (800cab0 <prvCheckForValidListAndQueue+0x70>)
 800ca66:	4a10      	ldr	r2, [pc, #64]	; (800caa8 <prvCheckForValidListAndQueue+0x68>)
 800ca68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	4b11      	ldr	r3, [pc, #68]	; (800cab4 <prvCheckForValidListAndQueue+0x74>)
 800ca70:	4a11      	ldr	r2, [pc, #68]	; (800cab8 <prvCheckForValidListAndQueue+0x78>)
 800ca72:	2110      	movs	r1, #16
 800ca74:	200a      	movs	r0, #10
 800ca76:	f7fe f8c3 	bl	800ac00 <xQueueGenericCreateStatic>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	4a08      	ldr	r2, [pc, #32]	; (800caa0 <prvCheckForValidListAndQueue+0x60>)
 800ca7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca80:	4b07      	ldr	r3, [pc, #28]	; (800caa0 <prvCheckForValidListAndQueue+0x60>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d005      	beq.n	800ca94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <prvCheckForValidListAndQueue+0x60>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	490b      	ldr	r1, [pc, #44]	; (800cabc <prvCheckForValidListAndQueue+0x7c>)
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fe fcdc 	bl	800b44c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca94:	f000 f98e 	bl	800cdb4 <vPortExitCritical>
}
 800ca98:	bf00      	nop
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	24001630 	.word	0x24001630
 800caa4:	24001600 	.word	0x24001600
 800caa8:	24001614 	.word	0x24001614
 800caac:	24001628 	.word	0x24001628
 800cab0:	2400162c 	.word	0x2400162c
 800cab4:	240016dc 	.word	0x240016dc
 800cab8:	2400163c 	.word	0x2400163c
 800cabc:	0800d594 	.word	0x0800d594

0800cac0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10a      	bne.n	800cae8 <pvTimerGetTimerID+0x28>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	60fb      	str	r3, [r7, #12]
}
 800cae4:	bf00      	nop
 800cae6:	e7fe      	b.n	800cae6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cae8:	f000 f934 	bl	800cd54 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	69db      	ldr	r3, [r3, #28]
 800caf0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800caf2:	f000 f95f 	bl	800cdb4 <vPortExitCritical>

	return pvReturn;
 800caf6:	693b      	ldr	r3, [r7, #16]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3b04      	subs	r3, #4
 800cb10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3b04      	subs	r3, #4
 800cb1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f023 0201 	bic.w	r2, r3, #1
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3b04      	subs	r3, #4
 800cb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb30:	4a0c      	ldr	r2, [pc, #48]	; (800cb64 <pxPortInitialiseStack+0x64>)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3b14      	subs	r3, #20
 800cb3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	3b04      	subs	r3, #4
 800cb46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f06f 0202 	mvn.w	r2, #2
 800cb4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3b20      	subs	r3, #32
 800cb54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb56:	68fb      	ldr	r3, [r7, #12]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	0800cb69 	.word	0x0800cb69

0800cb68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb72:	4b12      	ldr	r3, [pc, #72]	; (800cbbc <prvTaskExitError+0x54>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb7a:	d00a      	beq.n	800cb92 <prvTaskExitError+0x2a>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60fb      	str	r3, [r7, #12]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <prvTaskExitError+0x28>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	60bb      	str	r3, [r7, #8]
}
 800cba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cba6:	bf00      	nop
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0fc      	beq.n	800cba8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbae:	bf00      	nop
 800cbb0:	bf00      	nop
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	24000010 	.word	0x24000010

0800cbc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbc0:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <pxCurrentTCBConst2>)
 800cbc2:	6819      	ldr	r1, [r3, #0]
 800cbc4:	6808      	ldr	r0, [r1, #0]
 800cbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbca:	f380 8809 	msr	PSP, r0
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f04f 0000 	mov.w	r0, #0
 800cbd6:	f380 8811 	msr	BASEPRI, r0
 800cbda:	4770      	bx	lr
 800cbdc:	f3af 8000 	nop.w

0800cbe0 <pxCurrentTCBConst2>:
 800cbe0:	24001100 	.word	0x24001100
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop

0800cbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbe8:	4808      	ldr	r0, [pc, #32]	; (800cc0c <prvPortStartFirstTask+0x24>)
 800cbea:	6800      	ldr	r0, [r0, #0]
 800cbec:	6800      	ldr	r0, [r0, #0]
 800cbee:	f380 8808 	msr	MSP, r0
 800cbf2:	f04f 0000 	mov.w	r0, #0
 800cbf6:	f380 8814 	msr	CONTROL, r0
 800cbfa:	b662      	cpsie	i
 800cbfc:	b661      	cpsie	f
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	df00      	svc	0
 800cc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc0a:	bf00      	nop
 800cc0c:	e000ed08 	.word	0xe000ed08

0800cc10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc16:	4b46      	ldr	r3, [pc, #280]	; (800cd30 <xPortStartScheduler+0x120>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a46      	ldr	r2, [pc, #280]	; (800cd34 <xPortStartScheduler+0x124>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d10a      	bne.n	800cc36 <xPortStartScheduler+0x26>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	613b      	str	r3, [r7, #16]
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc36:	4b3e      	ldr	r3, [pc, #248]	; (800cd30 <xPortStartScheduler+0x120>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a3f      	ldr	r2, [pc, #252]	; (800cd38 <xPortStartScheduler+0x128>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d10a      	bne.n	800cc56 <xPortStartScheduler+0x46>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	60fb      	str	r3, [r7, #12]
}
 800cc52:	bf00      	nop
 800cc54:	e7fe      	b.n	800cc54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc56:	4b39      	ldr	r3, [pc, #228]	; (800cd3c <xPortStartScheduler+0x12c>)
 800cc58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	22ff      	movs	r2, #255	; 0xff
 800cc66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc70:	78fb      	ldrb	r3, [r7, #3]
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	4b31      	ldr	r3, [pc, #196]	; (800cd40 <xPortStartScheduler+0x130>)
 800cc7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc7e:	4b31      	ldr	r3, [pc, #196]	; (800cd44 <xPortStartScheduler+0x134>)
 800cc80:	2207      	movs	r2, #7
 800cc82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc84:	e009      	b.n	800cc9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc86:	4b2f      	ldr	r3, [pc, #188]	; (800cd44 <xPortStartScheduler+0x134>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	4a2d      	ldr	r2, [pc, #180]	; (800cd44 <xPortStartScheduler+0x134>)
 800cc8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc90:	78fb      	ldrb	r3, [r7, #3]
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc9a:	78fb      	ldrb	r3, [r7, #3]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca2:	2b80      	cmp	r3, #128	; 0x80
 800cca4:	d0ef      	beq.n	800cc86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cca6:	4b27      	ldr	r3, [pc, #156]	; (800cd44 <xPortStartScheduler+0x134>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f1c3 0307 	rsb	r3, r3, #7
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d00a      	beq.n	800ccc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	60bb      	str	r3, [r7, #8]
}
 800ccc4:	bf00      	nop
 800ccc6:	e7fe      	b.n	800ccc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccc8:	4b1e      	ldr	r3, [pc, #120]	; (800cd44 <xPortStartScheduler+0x134>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	021b      	lsls	r3, r3, #8
 800ccce:	4a1d      	ldr	r2, [pc, #116]	; (800cd44 <xPortStartScheduler+0x134>)
 800ccd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <xPortStartScheduler+0x134>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccda:	4a1a      	ldr	r2, [pc, #104]	; (800cd44 <xPortStartScheduler+0x134>)
 800ccdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cce6:	4b18      	ldr	r3, [pc, #96]	; (800cd48 <xPortStartScheduler+0x138>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a17      	ldr	r2, [pc, #92]	; (800cd48 <xPortStartScheduler+0x138>)
 800ccec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccf2:	4b15      	ldr	r3, [pc, #84]	; (800cd48 <xPortStartScheduler+0x138>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a14      	ldr	r2, [pc, #80]	; (800cd48 <xPortStartScheduler+0x138>)
 800ccf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccfe:	f000 f8dd 	bl	800cebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd02:	4b12      	ldr	r3, [pc, #72]	; (800cd4c <xPortStartScheduler+0x13c>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd08:	f000 f8fc 	bl	800cf04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd0c:	4b10      	ldr	r3, [pc, #64]	; (800cd50 <xPortStartScheduler+0x140>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a0f      	ldr	r2, [pc, #60]	; (800cd50 <xPortStartScheduler+0x140>)
 800cd12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd18:	f7ff ff66 	bl	800cbe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd1c:	f7fe ff92 	bl	800bc44 <vTaskSwitchContext>
	prvTaskExitError();
 800cd20:	f7ff ff22 	bl	800cb68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	e000ed00 	.word	0xe000ed00
 800cd34:	410fc271 	.word	0x410fc271
 800cd38:	410fc270 	.word	0x410fc270
 800cd3c:	e000e400 	.word	0xe000e400
 800cd40:	2400172c 	.word	0x2400172c
 800cd44:	24001730 	.word	0x24001730
 800cd48:	e000ed20 	.word	0xe000ed20
 800cd4c:	24000010 	.word	0x24000010
 800cd50:	e000ef34 	.word	0xe000ef34

0800cd54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	607b      	str	r3, [r7, #4]
}
 800cd6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd6e:	4b0f      	ldr	r3, [pc, #60]	; (800cdac <vPortEnterCritical+0x58>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3301      	adds	r3, #1
 800cd74:	4a0d      	ldr	r2, [pc, #52]	; (800cdac <vPortEnterCritical+0x58>)
 800cd76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd78:	4b0c      	ldr	r3, [pc, #48]	; (800cdac <vPortEnterCritical+0x58>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d10f      	bne.n	800cda0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd80:	4b0b      	ldr	r3, [pc, #44]	; (800cdb0 <vPortEnterCritical+0x5c>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00a      	beq.n	800cda0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	603b      	str	r3, [r7, #0]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <vPortEnterCritical+0x4a>
	}
}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	24000010 	.word	0x24000010
 800cdb0:	e000ed04 	.word	0xe000ed04

0800cdb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdba:	4b12      	ldr	r3, [pc, #72]	; (800ce04 <vPortExitCritical+0x50>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10a      	bne.n	800cdd8 <vPortExitCritical+0x24>
	__asm volatile
 800cdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	607b      	str	r3, [r7, #4]
}
 800cdd4:	bf00      	nop
 800cdd6:	e7fe      	b.n	800cdd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <vPortExitCritical+0x50>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	4a09      	ldr	r2, [pc, #36]	; (800ce04 <vPortExitCritical+0x50>)
 800cde0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cde2:	4b08      	ldr	r3, [pc, #32]	; (800ce04 <vPortExitCritical+0x50>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d105      	bne.n	800cdf6 <vPortExitCritical+0x42>
 800cdea:	2300      	movs	r3, #0
 800cdec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	f383 8811 	msr	BASEPRI, r3
}
 800cdf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	24000010 	.word	0x24000010
	...

0800ce10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce10:	f3ef 8009 	mrs	r0, PSP
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <pxCurrentTCBConst>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	f01e 0f10 	tst.w	lr, #16
 800ce20:	bf08      	it	eq
 800ce22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2a:	6010      	str	r0, [r2, #0]
 800ce2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce34:	f380 8811 	msr	BASEPRI, r0
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f7fe ff00 	bl	800bc44 <vTaskSwitchContext>
 800ce44:	f04f 0000 	mov.w	r0, #0
 800ce48:	f380 8811 	msr	BASEPRI, r0
 800ce4c:	bc09      	pop	{r0, r3}
 800ce4e:	6819      	ldr	r1, [r3, #0]
 800ce50:	6808      	ldr	r0, [r1, #0]
 800ce52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce56:	f01e 0f10 	tst.w	lr, #16
 800ce5a:	bf08      	it	eq
 800ce5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce60:	f380 8809 	msr	PSP, r0
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	f3af 8000 	nop.w

0800ce70 <pxCurrentTCBConst>:
 800ce70:	24001100 	.word	0x24001100
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop

0800ce78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	607b      	str	r3, [r7, #4]
}
 800ce90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce92:	f7fe fe1d 	bl	800bad0 <xTaskIncrementTick>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d003      	beq.n	800cea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce9c:	4b06      	ldr	r3, [pc, #24]	; (800ceb8 <xPortSysTickHandler+0x40>)
 800ce9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	2300      	movs	r3, #0
 800cea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	f383 8811 	msr	BASEPRI, r3
}
 800ceae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cebc:	b480      	push	{r7}
 800cebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cec0:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <vPortSetupTimerInterrupt+0x34>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <vPortSetupTimerInterrupt+0x38>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cecc:	4b0a      	ldr	r3, [pc, #40]	; (800cef8 <vPortSetupTimerInterrupt+0x3c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a0a      	ldr	r2, [pc, #40]	; (800cefc <vPortSetupTimerInterrupt+0x40>)
 800ced2:	fba2 2303 	umull	r2, r3, r2, r3
 800ced6:	099b      	lsrs	r3, r3, #6
 800ced8:	4a09      	ldr	r2, [pc, #36]	; (800cf00 <vPortSetupTimerInterrupt+0x44>)
 800ceda:	3b01      	subs	r3, #1
 800cedc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cede:	4b04      	ldr	r3, [pc, #16]	; (800cef0 <vPortSetupTimerInterrupt+0x34>)
 800cee0:	2207      	movs	r2, #7
 800cee2:	601a      	str	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	e000e010 	.word	0xe000e010
 800cef4:	e000e018 	.word	0xe000e018
 800cef8:	24000000 	.word	0x24000000
 800cefc:	10624dd3 	.word	0x10624dd3
 800cf00:	e000e014 	.word	0xe000e014

0800cf04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf14 <vPortEnableVFP+0x10>
 800cf08:	6801      	ldr	r1, [r0, #0]
 800cf0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf0e:	6001      	str	r1, [r0, #0]
 800cf10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf12:	bf00      	nop
 800cf14:	e000ed88 	.word	0xe000ed88

0800cf18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf1e:	f3ef 8305 	mrs	r3, IPSR
 800cf22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2b0f      	cmp	r3, #15
 800cf28:	d914      	bls.n	800cf54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf2a:	4a17      	ldr	r2, [pc, #92]	; (800cf88 <vPortValidateInterruptPriority+0x70>)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4413      	add	r3, r2
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf34:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <vPortValidateInterruptPriority+0x74>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	7afa      	ldrb	r2, [r7, #11]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d20a      	bcs.n	800cf54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	607b      	str	r3, [r7, #4]
}
 800cf50:	bf00      	nop
 800cf52:	e7fe      	b.n	800cf52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf54:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <vPortValidateInterruptPriority+0x78>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf5c:	4b0d      	ldr	r3, [pc, #52]	; (800cf94 <vPortValidateInterruptPriority+0x7c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d90a      	bls.n	800cf7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	603b      	str	r3, [r7, #0]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <vPortValidateInterruptPriority+0x60>
	}
 800cf7a:	bf00      	nop
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	e000e3f0 	.word	0xe000e3f0
 800cf8c:	2400172c 	.word	0x2400172c
 800cf90:	e000ed0c 	.word	0xe000ed0c
 800cf94:	24001730 	.word	0x24001730

0800cf98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08a      	sub	sp, #40	; 0x28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfa4:	f7fe fcd8 	bl	800b958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfa8:	4b5b      	ldr	r3, [pc, #364]	; (800d118 <pvPortMalloc+0x180>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfb0:	f000 f920 	bl	800d1f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfb4:	4b59      	ldr	r3, [pc, #356]	; (800d11c <pvPortMalloc+0x184>)
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4013      	ands	r3, r2
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f040 8093 	bne.w	800d0e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d01d      	beq.n	800d004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfc8:	2208      	movs	r2, #8
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4413      	add	r3, r2
 800cfce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f003 0307 	and.w	r3, r3, #7
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d014      	beq.n	800d004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f023 0307 	bic.w	r3, r3, #7
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f003 0307 	and.w	r3, r3, #7
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00a      	beq.n	800d004 <pvPortMalloc+0x6c>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	617b      	str	r3, [r7, #20]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d06e      	beq.n	800d0e8 <pvPortMalloc+0x150>
 800d00a:	4b45      	ldr	r3, [pc, #276]	; (800d120 <pvPortMalloc+0x188>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	429a      	cmp	r2, r3
 800d012:	d869      	bhi.n	800d0e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d014:	4b43      	ldr	r3, [pc, #268]	; (800d124 <pvPortMalloc+0x18c>)
 800d016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d018:	4b42      	ldr	r3, [pc, #264]	; (800d124 <pvPortMalloc+0x18c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d01e:	e004      	b.n	800d02a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	429a      	cmp	r2, r3
 800d032:	d903      	bls.n	800d03c <pvPortMalloc+0xa4>
 800d034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1f1      	bne.n	800d020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d03c:	4b36      	ldr	r3, [pc, #216]	; (800d118 <pvPortMalloc+0x180>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d042:	429a      	cmp	r2, r3
 800d044:	d050      	beq.n	800d0e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2208      	movs	r2, #8
 800d04c:	4413      	add	r3, r2
 800d04e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	1ad2      	subs	r2, r2, r3
 800d060:	2308      	movs	r3, #8
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	429a      	cmp	r2, r3
 800d066:	d91f      	bls.n	800d0a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4413      	add	r3, r2
 800d06e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00a      	beq.n	800d090 <pvPortMalloc+0xf8>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	613b      	str	r3, [r7, #16]
}
 800d08c:	bf00      	nop
 800d08e:	e7fe      	b.n	800d08e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	685a      	ldr	r2, [r3, #4]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	1ad2      	subs	r2, r2, r3
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0a2:	69b8      	ldr	r0, [r7, #24]
 800d0a4:	f000 f908 	bl	800d2b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0a8:	4b1d      	ldr	r3, [pc, #116]	; (800d120 <pvPortMalloc+0x188>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	4a1b      	ldr	r2, [pc, #108]	; (800d120 <pvPortMalloc+0x188>)
 800d0b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0b6:	4b1a      	ldr	r3, [pc, #104]	; (800d120 <pvPortMalloc+0x188>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	4b1b      	ldr	r3, [pc, #108]	; (800d128 <pvPortMalloc+0x190>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d203      	bcs.n	800d0ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0c2:	4b17      	ldr	r3, [pc, #92]	; (800d120 <pvPortMalloc+0x188>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a18      	ldr	r2, [pc, #96]	; (800d128 <pvPortMalloc+0x190>)
 800d0c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	685a      	ldr	r2, [r3, #4]
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <pvPortMalloc+0x184>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	2200      	movs	r2, #0
 800d0dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0de:	4b13      	ldr	r3, [pc, #76]	; (800d12c <pvPortMalloc+0x194>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	4a11      	ldr	r2, [pc, #68]	; (800d12c <pvPortMalloc+0x194>)
 800d0e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0e8:	f7fe fc44 	bl	800b974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	f003 0307 	and.w	r3, r3, #7
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00a      	beq.n	800d10c <pvPortMalloc+0x174>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	60fb      	str	r3, [r7, #12]
}
 800d108:	bf00      	nop
 800d10a:	e7fe      	b.n	800d10a <pvPortMalloc+0x172>
	return pvReturn;
 800d10c:	69fb      	ldr	r3, [r7, #28]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3728      	adds	r7, #40	; 0x28
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	2400533c 	.word	0x2400533c
 800d11c:	24005350 	.word	0x24005350
 800d120:	24005340 	.word	0x24005340
 800d124:	24005334 	.word	0x24005334
 800d128:	24005344 	.word	0x24005344
 800d12c:	24005348 	.word	0x24005348

0800d130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d04d      	beq.n	800d1de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d142:	2308      	movs	r3, #8
 800d144:	425b      	negs	r3, r3
 800d146:	697a      	ldr	r2, [r7, #20]
 800d148:	4413      	add	r3, r2
 800d14a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	685a      	ldr	r2, [r3, #4]
 800d154:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <vPortFree+0xb8>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4013      	ands	r3, r2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10a      	bne.n	800d174 <vPortFree+0x44>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	60fb      	str	r3, [r7, #12]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00a      	beq.n	800d192 <vPortFree+0x62>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	60bb      	str	r3, [r7, #8]
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	4b14      	ldr	r3, [pc, #80]	; (800d1e8 <vPortFree+0xb8>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4013      	ands	r3, r2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d01e      	beq.n	800d1de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d11a      	bne.n	800d1de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <vPortFree+0xb8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	43db      	mvns	r3, r3
 800d1b2:	401a      	ands	r2, r3
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1b8:	f7fe fbce 	bl	800b958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	685a      	ldr	r2, [r3, #4]
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <vPortFree+0xbc>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	4a09      	ldr	r2, [pc, #36]	; (800d1ec <vPortFree+0xbc>)
 800d1c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1ca:	6938      	ldr	r0, [r7, #16]
 800d1cc:	f000 f874 	bl	800d2b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1d0:	4b07      	ldr	r3, [pc, #28]	; (800d1f0 <vPortFree+0xc0>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	4a06      	ldr	r2, [pc, #24]	; (800d1f0 <vPortFree+0xc0>)
 800d1d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1da:	f7fe fbcb 	bl	800b974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1de:	bf00      	nop
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	24005350 	.word	0x24005350
 800d1ec:	24005340 	.word	0x24005340
 800d1f0:	2400534c 	.word	0x2400534c

0800d1f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d1fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d200:	4b27      	ldr	r3, [pc, #156]	; (800d2a0 <prvHeapInit+0xac>)
 800d202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f003 0307 	and.w	r3, r3, #7
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00c      	beq.n	800d228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3307      	adds	r3, #7
 800d212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0307 	bic.w	r3, r3, #7
 800d21a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	4a1f      	ldr	r2, [pc, #124]	; (800d2a0 <prvHeapInit+0xac>)
 800d224:	4413      	add	r3, r2
 800d226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d22c:	4a1d      	ldr	r2, [pc, #116]	; (800d2a4 <prvHeapInit+0xb0>)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d232:	4b1c      	ldr	r3, [pc, #112]	; (800d2a4 <prvHeapInit+0xb0>)
 800d234:	2200      	movs	r2, #0
 800d236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	4413      	add	r3, r2
 800d23e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d240:	2208      	movs	r2, #8
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	1a9b      	subs	r3, r3, r2
 800d246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f023 0307 	bic.w	r3, r3, #7
 800d24e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	4a15      	ldr	r2, [pc, #84]	; (800d2a8 <prvHeapInit+0xb4>)
 800d254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d256:	4b14      	ldr	r3, [pc, #80]	; (800d2a8 <prvHeapInit+0xb4>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2200      	movs	r2, #0
 800d25c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d25e:	4b12      	ldr	r3, [pc, #72]	; (800d2a8 <prvHeapInit+0xb4>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2200      	movs	r2, #0
 800d264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	1ad2      	subs	r2, r2, r3
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d274:	4b0c      	ldr	r3, [pc, #48]	; (800d2a8 <prvHeapInit+0xb4>)
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	4a0a      	ldr	r2, [pc, #40]	; (800d2ac <prvHeapInit+0xb8>)
 800d282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4a09      	ldr	r2, [pc, #36]	; (800d2b0 <prvHeapInit+0xbc>)
 800d28a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d28c:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <prvHeapInit+0xc0>)
 800d28e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d292:	601a      	str	r2, [r3, #0]
}
 800d294:	bf00      	nop
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	24001734 	.word	0x24001734
 800d2a4:	24005334 	.word	0x24005334
 800d2a8:	2400533c 	.word	0x2400533c
 800d2ac:	24005344 	.word	0x24005344
 800d2b0:	24005340 	.word	0x24005340
 800d2b4:	24005350 	.word	0x24005350

0800d2b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2c0:	4b28      	ldr	r3, [pc, #160]	; (800d364 <prvInsertBlockIntoFreeList+0xac>)
 800d2c2:	60fb      	str	r3, [r7, #12]
 800d2c4:	e002      	b.n	800d2cc <prvInsertBlockIntoFreeList+0x14>
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	60fb      	str	r3, [r7, #12]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d8f7      	bhi.n	800d2c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d108      	bne.n	800d2fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	441a      	add	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	441a      	add	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d118      	bne.n	800d340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	4b15      	ldr	r3, [pc, #84]	; (800d368 <prvInsertBlockIntoFreeList+0xb0>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	429a      	cmp	r2, r3
 800d318:	d00d      	beq.n	800d336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685a      	ldr	r2, [r3, #4]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	441a      	add	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	601a      	str	r2, [r3, #0]
 800d334:	e008      	b.n	800d348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <prvInsertBlockIntoFreeList+0xb0>)
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	e003      	b.n	800d348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d002      	beq.n	800d356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d356:	bf00      	nop
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	24005334 	.word	0x24005334
 800d368:	2400533c 	.word	0x2400533c

0800d36c <memset>:
 800d36c:	4402      	add	r2, r0
 800d36e:	4603      	mov	r3, r0
 800d370:	4293      	cmp	r3, r2
 800d372:	d100      	bne.n	800d376 <memset+0xa>
 800d374:	4770      	bx	lr
 800d376:	f803 1b01 	strb.w	r1, [r3], #1
 800d37a:	e7f9      	b.n	800d370 <memset+0x4>

0800d37c <_reclaim_reent>:
 800d37c:	4b29      	ldr	r3, [pc, #164]	; (800d424 <_reclaim_reent+0xa8>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4283      	cmp	r3, r0
 800d382:	b570      	push	{r4, r5, r6, lr}
 800d384:	4604      	mov	r4, r0
 800d386:	d04b      	beq.n	800d420 <_reclaim_reent+0xa4>
 800d388:	69c3      	ldr	r3, [r0, #28]
 800d38a:	b143      	cbz	r3, 800d39e <_reclaim_reent+0x22>
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d144      	bne.n	800d41c <_reclaim_reent+0xa0>
 800d392:	69e3      	ldr	r3, [r4, #28]
 800d394:	6819      	ldr	r1, [r3, #0]
 800d396:	b111      	cbz	r1, 800d39e <_reclaim_reent+0x22>
 800d398:	4620      	mov	r0, r4
 800d39a:	f000 f879 	bl	800d490 <_free_r>
 800d39e:	6961      	ldr	r1, [r4, #20]
 800d3a0:	b111      	cbz	r1, 800d3a8 <_reclaim_reent+0x2c>
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 f874 	bl	800d490 <_free_r>
 800d3a8:	69e1      	ldr	r1, [r4, #28]
 800d3aa:	b111      	cbz	r1, 800d3b2 <_reclaim_reent+0x36>
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f000 f86f 	bl	800d490 <_free_r>
 800d3b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d3b4:	b111      	cbz	r1, 800d3bc <_reclaim_reent+0x40>
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 f86a 	bl	800d490 <_free_r>
 800d3bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3be:	b111      	cbz	r1, 800d3c6 <_reclaim_reent+0x4a>
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f000 f865 	bl	800d490 <_free_r>
 800d3c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d3c8:	b111      	cbz	r1, 800d3d0 <_reclaim_reent+0x54>
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 f860 	bl	800d490 <_free_r>
 800d3d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d3d2:	b111      	cbz	r1, 800d3da <_reclaim_reent+0x5e>
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f000 f85b 	bl	800d490 <_free_r>
 800d3da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d3dc:	b111      	cbz	r1, 800d3e4 <_reclaim_reent+0x68>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 f856 	bl	800d490 <_free_r>
 800d3e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d3e6:	b111      	cbz	r1, 800d3ee <_reclaim_reent+0x72>
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 f851 	bl	800d490 <_free_r>
 800d3ee:	6a23      	ldr	r3, [r4, #32]
 800d3f0:	b1b3      	cbz	r3, 800d420 <_reclaim_reent+0xa4>
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3f8:	4718      	bx	r3
 800d3fa:	5949      	ldr	r1, [r1, r5]
 800d3fc:	b941      	cbnz	r1, 800d410 <_reclaim_reent+0x94>
 800d3fe:	3504      	adds	r5, #4
 800d400:	69e3      	ldr	r3, [r4, #28]
 800d402:	2d80      	cmp	r5, #128	; 0x80
 800d404:	68d9      	ldr	r1, [r3, #12]
 800d406:	d1f8      	bne.n	800d3fa <_reclaim_reent+0x7e>
 800d408:	4620      	mov	r0, r4
 800d40a:	f000 f841 	bl	800d490 <_free_r>
 800d40e:	e7c0      	b.n	800d392 <_reclaim_reent+0x16>
 800d410:	680e      	ldr	r6, [r1, #0]
 800d412:	4620      	mov	r0, r4
 800d414:	f000 f83c 	bl	800d490 <_free_r>
 800d418:	4631      	mov	r1, r6
 800d41a:	e7ef      	b.n	800d3fc <_reclaim_reent+0x80>
 800d41c:	2500      	movs	r5, #0
 800d41e:	e7ef      	b.n	800d400 <_reclaim_reent+0x84>
 800d420:	bd70      	pop	{r4, r5, r6, pc}
 800d422:	bf00      	nop
 800d424:	24000060 	.word	0x24000060

0800d428 <__libc_init_array>:
 800d428:	b570      	push	{r4, r5, r6, lr}
 800d42a:	4d0d      	ldr	r5, [pc, #52]	; (800d460 <__libc_init_array+0x38>)
 800d42c:	4c0d      	ldr	r4, [pc, #52]	; (800d464 <__libc_init_array+0x3c>)
 800d42e:	1b64      	subs	r4, r4, r5
 800d430:	10a4      	asrs	r4, r4, #2
 800d432:	2600      	movs	r6, #0
 800d434:	42a6      	cmp	r6, r4
 800d436:	d109      	bne.n	800d44c <__libc_init_array+0x24>
 800d438:	4d0b      	ldr	r5, [pc, #44]	; (800d468 <__libc_init_array+0x40>)
 800d43a:	4c0c      	ldr	r4, [pc, #48]	; (800d46c <__libc_init_array+0x44>)
 800d43c:	f000 f880 	bl	800d540 <_init>
 800d440:	1b64      	subs	r4, r4, r5
 800d442:	10a4      	asrs	r4, r4, #2
 800d444:	2600      	movs	r6, #0
 800d446:	42a6      	cmp	r6, r4
 800d448:	d105      	bne.n	800d456 <__libc_init_array+0x2e>
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d450:	4798      	blx	r3
 800d452:	3601      	adds	r6, #1
 800d454:	e7ee      	b.n	800d434 <__libc_init_array+0xc>
 800d456:	f855 3b04 	ldr.w	r3, [r5], #4
 800d45a:	4798      	blx	r3
 800d45c:	3601      	adds	r6, #1
 800d45e:	e7f2      	b.n	800d446 <__libc_init_array+0x1e>
 800d460:	0800d628 	.word	0x0800d628
 800d464:	0800d628 	.word	0x0800d628
 800d468:	0800d628 	.word	0x0800d628
 800d46c:	0800d62c 	.word	0x0800d62c

0800d470 <__retarget_lock_acquire_recursive>:
 800d470:	4770      	bx	lr

0800d472 <__retarget_lock_release_recursive>:
 800d472:	4770      	bx	lr

0800d474 <memcpy>:
 800d474:	440a      	add	r2, r1
 800d476:	4291      	cmp	r1, r2
 800d478:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d47c:	d100      	bne.n	800d480 <memcpy+0xc>
 800d47e:	4770      	bx	lr
 800d480:	b510      	push	{r4, lr}
 800d482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d48a:	4291      	cmp	r1, r2
 800d48c:	d1f9      	bne.n	800d482 <memcpy+0xe>
 800d48e:	bd10      	pop	{r4, pc}

0800d490 <_free_r>:
 800d490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d492:	2900      	cmp	r1, #0
 800d494:	d044      	beq.n	800d520 <_free_r+0x90>
 800d496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d49a:	9001      	str	r0, [sp, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f1a1 0404 	sub.w	r4, r1, #4
 800d4a2:	bfb8      	it	lt
 800d4a4:	18e4      	addlt	r4, r4, r3
 800d4a6:	f000 f83f 	bl	800d528 <__malloc_lock>
 800d4aa:	4a1e      	ldr	r2, [pc, #120]	; (800d524 <_free_r+0x94>)
 800d4ac:	9801      	ldr	r0, [sp, #4]
 800d4ae:	6813      	ldr	r3, [r2, #0]
 800d4b0:	b933      	cbnz	r3, 800d4c0 <_free_r+0x30>
 800d4b2:	6063      	str	r3, [r4, #4]
 800d4b4:	6014      	str	r4, [r2, #0]
 800d4b6:	b003      	add	sp, #12
 800d4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4bc:	f000 b83a 	b.w	800d534 <__malloc_unlock>
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	d908      	bls.n	800d4d6 <_free_r+0x46>
 800d4c4:	6825      	ldr	r5, [r4, #0]
 800d4c6:	1961      	adds	r1, r4, r5
 800d4c8:	428b      	cmp	r3, r1
 800d4ca:	bf01      	itttt	eq
 800d4cc:	6819      	ldreq	r1, [r3, #0]
 800d4ce:	685b      	ldreq	r3, [r3, #4]
 800d4d0:	1949      	addeq	r1, r1, r5
 800d4d2:	6021      	streq	r1, [r4, #0]
 800d4d4:	e7ed      	b.n	800d4b2 <_free_r+0x22>
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	b10b      	cbz	r3, 800d4e0 <_free_r+0x50>
 800d4dc:	42a3      	cmp	r3, r4
 800d4de:	d9fa      	bls.n	800d4d6 <_free_r+0x46>
 800d4e0:	6811      	ldr	r1, [r2, #0]
 800d4e2:	1855      	adds	r5, r2, r1
 800d4e4:	42a5      	cmp	r5, r4
 800d4e6:	d10b      	bne.n	800d500 <_free_r+0x70>
 800d4e8:	6824      	ldr	r4, [r4, #0]
 800d4ea:	4421      	add	r1, r4
 800d4ec:	1854      	adds	r4, r2, r1
 800d4ee:	42a3      	cmp	r3, r4
 800d4f0:	6011      	str	r1, [r2, #0]
 800d4f2:	d1e0      	bne.n	800d4b6 <_free_r+0x26>
 800d4f4:	681c      	ldr	r4, [r3, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	6053      	str	r3, [r2, #4]
 800d4fa:	440c      	add	r4, r1
 800d4fc:	6014      	str	r4, [r2, #0]
 800d4fe:	e7da      	b.n	800d4b6 <_free_r+0x26>
 800d500:	d902      	bls.n	800d508 <_free_r+0x78>
 800d502:	230c      	movs	r3, #12
 800d504:	6003      	str	r3, [r0, #0]
 800d506:	e7d6      	b.n	800d4b6 <_free_r+0x26>
 800d508:	6825      	ldr	r5, [r4, #0]
 800d50a:	1961      	adds	r1, r4, r5
 800d50c:	428b      	cmp	r3, r1
 800d50e:	bf04      	itt	eq
 800d510:	6819      	ldreq	r1, [r3, #0]
 800d512:	685b      	ldreq	r3, [r3, #4]
 800d514:	6063      	str	r3, [r4, #4]
 800d516:	bf04      	itt	eq
 800d518:	1949      	addeq	r1, r1, r5
 800d51a:	6021      	streq	r1, [r4, #0]
 800d51c:	6054      	str	r4, [r2, #4]
 800d51e:	e7ca      	b.n	800d4b6 <_free_r+0x26>
 800d520:	b003      	add	sp, #12
 800d522:	bd30      	pop	{r4, r5, pc}
 800d524:	24005490 	.word	0x24005490

0800d528 <__malloc_lock>:
 800d528:	4801      	ldr	r0, [pc, #4]	; (800d530 <__malloc_lock+0x8>)
 800d52a:	f7ff bfa1 	b.w	800d470 <__retarget_lock_acquire_recursive>
 800d52e:	bf00      	nop
 800d530:	2400548c 	.word	0x2400548c

0800d534 <__malloc_unlock>:
 800d534:	4801      	ldr	r0, [pc, #4]	; (800d53c <__malloc_unlock+0x8>)
 800d536:	f7ff bf9c 	b.w	800d472 <__retarget_lock_release_recursive>
 800d53a:	bf00      	nop
 800d53c:	2400548c 	.word	0x2400548c

0800d540 <_init>:
 800d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d542:	bf00      	nop
 800d544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d546:	bc08      	pop	{r3}
 800d548:	469e      	mov	lr, r3
 800d54a:	4770      	bx	lr

0800d54c <_fini>:
 800d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54e:	bf00      	nop
 800d550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d552:	bc08      	pop	{r3}
 800d554:	469e      	mov	lr, r3
 800d556:	4770      	bx	lr
